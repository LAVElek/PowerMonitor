
PowerMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00004568  000045fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800080  00800080  0000461c  2**0
                  ALLOC
  3 .stab         00003498  00000000  00000000  0000461c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001080  00000000  00000000  00007ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008b34  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00008b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d8d  00000000  00000000  00008e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ce4  00000000  00000000  0000dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001451  00000000  00000000  0000e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a88  00000000  00000000  0000fd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007ff  00000000  00000000  00010798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000045a7  00000000  00000000  00010f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002a8  00000000  00000000  0001553e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  TWI_SendData(buf, 6);
}

// получает дату
void getDate(unsigned char *time_buf)
{
       0:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__ctors_end>
       4:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[0] = SLA_W;
       8:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[1] = R_WEEK_DAY;
       c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      10:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  TWI_SendData(buf, 2);
      14:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      18:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[0] = SLA_R;
      1c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      20:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[1] = 0;
      24:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[2] = 0;
      28:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__vector_10>
  buf[3] = 0;
      2c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  buf[4] = 0;
      30:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  TWI_SendData(buf, 5);
      34:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      38:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  if (TWI_GetState() == TWI_SUCCESS)
      3c:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      40:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
  {
    TWI_GetData(buf, 5);
      44:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      48:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
      4c:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__vector_19>
    time_buf[0] = buf[1]; // день недели
      50:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__bad_interrupt>
    time_buf[1] = (buf[2] >> 4) * 10 + (buf[2] & 0xf); // день мес€ца
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
    time_buf[2] = (buf[3] >> 4) * 10 + (buf[3] & 0xf); // мес€ц
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <BigFont>:
      72:	10 10 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
    time_buf[3] = (buf[4] >> 4) * 10 + (buf[4] & 0xf); // год
  }
      9a:	07 00 0f 80 0f 80 0f 80 0f 80 0f 80 07 00 07 00     ................
      aa:	00 00 00 00 07 00 07 00 07 00 00 00 00 00 0e 38     ...............8
      ba:	0e 38 0e 38 0e 38 06 30 00 00 00 00 00 00 00 00     .8.8.8.0........
	...
      d6:	00 00 0c 30 0c 30 0c 30 7f fe 7f fe 0c 30 0c 30     ...0.0.0.....0.0
      e6:	0c 30 0c 30 7f fe 7f fe 0c 30 0c 30 0c 30 00 00     .0.0.....0.0.0..
      f6:	00 00 02 40 02 40 0f f8 1f f8 1a 40 1a 40 1f f0     ...@.@.....@.@..
     106:	0f f8 02 58 02 58 1f f8 1f f0 02 40 02 40 00 00     ...X.X.....@.@..
     116:	00 00 00 00 00 00 0e 10 0e 30 0e 70 00 e0 01 c0     .........0.p....
     126:	03 80 07 00 0e 70 0c 70 08 70 00 00 00 00 00 00     .....p.p.p......
     136:	00 00 00 00 0f 00 19 80 19 80 19 80 0f 00 0f 08     ................
     146:	0f 98 19 f8 18 f0 18 e0 19 f0 0f 98 00 00 00 00     ................
     156:	00 00 00 00 07 00 07 00 07 00 0e 00 00 00 00 00     ................
	...
     17a:	00 f0 01 c0 03 80 07 00 0e 00 0e 00 0e 00 0e 00     ................
     18a:	07 00 03 80 01 c0 00 f0 00 00 00 00 00 00 00 00     ................
     19a:	0f 00 03 80 01 c0 00 e0 00 70 00 70 00 70 00 70     .........p.p.p.p
     1aa:	00 e0 01 c0 03 80 0f 00 00 00 00 00 00 00 00 00     ................
     1ba:	01 80 11 88 09 90 07 e0 07 e0 3f fc 3f fc 07 e0     ..........?.?...
     1ca:	07 e0 09 90 11 88 01 80 00 00 00 00 00 00 00 00     ................
     1da:	00 00 00 00 01 80 01 80 01 80 0f f0 0f f0 01 80     ................
     1ea:	01 80 01 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     20a:	00 00 07 00 07 00 07 00 0e 00 00 00 00 00 00 00     ................
	...
     222:	00 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     24a:	00 00 07 00 07 00 07 00 00 00 00 00 00 00 00 00     ................
     25a:	00 02 00 06 00 0e 00 1c 00 38 00 70 00 e0 01 c0     .........8.p....
     26a:	03 80 07 00 0e 00 1c 00 00 00 00 00 00 00 00 00     ................
     27a:	0f f0 1c 38 1c 78 1c f8 1c f8 1d b8 1d b8 1f 38     ...8.x.........8
     28a:	1f 38 1e 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     29a:	01 80 01 80 03 80 1f 80 1f 80 03 80 03 80 03 80     ................
     2aa:	03 80 03 80 03 80 1f f0 00 00 00 00 00 00 00 00     ................
     2ba:	0f e0 1c 70 1c 38 00 38 00 70 00 e0 01 c0 03 80     ...p.8.8.p......
     2ca:	07 00 0e 38 1c 38 1f f8 00 00 00 00 00 00 00 00     ...8.8..........
     2da:	0f e0 1c 70 1c 38 00 38 00 70 03 c0 03 c0 00 70     ...p.8.8.p.....p
     2ea:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     2fa:	00 e0 01 e0 03 e0 06 e0 0c e0 18 e0 1f f8 1f f8     ................
     30a:	00 e0 00 e0 00 e0 03 f8 00 00 00 00 00 00 00 00     ................
     31a:	1f f8 1c 00 1c 00 1c 00 1c 00 1f e0 1f f0 00 78     ...............x
     32a:	00 38 1c 38 1c 70 0f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     33a:	03 e0 07 00 0e 00 1c 00 1c 00 1f f0 1f f8 1c 38     ...............8
     34a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     35a:	1f fc 1c 1c 1c 1c 1c 1c 00 1c 00 38 00 70 00 e0     ...........8.p..
     36a:	01 c0 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     37a:	0f f0 1c 38 1c 38 1c 38 1f 38 07 e0 07 e0 1c f8     ...8.8.8.8......
     38a:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     39a:	0f f0 1c 38 1c 38 1c 38 1c 38 1f f8 0f f8 00 38     ...8.8.8.8.....8
     3aa:	00 38 00 70 00 e0 07 c0 00 00 00 00 00 00 00 00     .8.p............
     3ba:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ca:	03 80 03 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3da:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 03 80     ................
     3ea:	03 80 03 80 07 00 00 00 00 00 00 00 00 00 00 70     ...............p
     3fa:	00 e0 01 c0 03 80 07 00 0e 00 1c 00 1c 00 0e 00     ................
     40a:	07 00 03 80 01 c0 00 e0 00 70 00 00 00 00 00 00     .........p......
     41a:	00 00 00 00 00 00 3f fc 3f fc 00 00 00 00 3f fc     ......?.?.....?.
     42a:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 1c 00     ?...............
     43a:	0e 00 07 00 03 80 01 c0 00 e0 00 70 00 70 00 e0     ...........p.p..
     44a:	01 c0 03 80 07 00 0e 00 1c 00 00 00 00 00 03 c0     ................
     45a:	0f f0 1e 78 18 38 00 38 00 70 00 e0 01 c0 01 c0     ...x.8.8.p......
     46a:	00 00 00 00 01 c0 01 c0 01 c0 00 00 00 00 0f f8     ................
     47a:	1c 1c 1c 1c 1c 1c 1c 1c 1c fc 1c fc 1c fc 1c fc     ................
     48a:	1c 00 1c 00 1c 00 1f f0 07 f8 00 00 00 00 00 00     ................
     49a:	03 c0 07 e0 0e 70 1c 38 1c 38 1c 38 1c 38 1f f8     .....p.8.8.8.8..
     4aa:	1c 38 1c 38 1c 38 1c 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     4ba:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 38     ...8.8.8.8.....8
     4ca:	0e 38 0e 38 0e 38 1f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     4da:	07 f0 0e 38 1c 38 1c 00 1c 00 1c 00 1c 00 1c 00     ...8.8..........
     4ea:	1c 00 1c 38 0e 38 07 f0 00 00 00 00 00 00 00 00     ...8.8..........
     4fa:	1f e0 0e 70 0e 38 0e 38 0e 38 0e 38 0e 38 0e 38     ...p.8.8.8.8.8.8
     50a:	0e 38 0e 38 0e 70 1f e0 00 00 00 00 00 00 00 00     .8.8.p..........
     51a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     52a:	0e 00 0e 08 0e 18 1f f8 00 00 00 00 00 00 00 00     ................
     53a:	1f f8 0e 18 0e 08 0e 00 0e 30 0f f0 0f f0 0e 30     .........0.....0
     54a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     55a:	07 f0 0e 38 1c 38 1c 38 1c 00 1c 00 1c 00 1c f8     ...8.8.8........
     56a:	1c 38 1c 38 0e 38 07 f8 00 00 00 00 00 00 00 00     .8.8.8..........
     57a:	1c 70 1c 70 1c 70 1c 70 1c 70 1f f0 1f f0 1c 70     .p.p.p.p.p.....p
     58a:	1c 70 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     .p.p.p.p........
     59a:	0f e0 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     5aa:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     5ba:	01 fc 00 70 00 70 00 70 00 70 00 70 00 70 38 70     ...p.p.p.p.p.p8p
     5ca:	38 70 38 70 38 70 0f e0 00 00 00 00 00 00 00 00     8p8p8p..........
     5da:	1e 38 0e 38 0e 70 0e e0 0f c0 0f 80 0f 80 0f c0     .8.8.p..........
     5ea:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     5fa:	1f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00     ................
     60a:	0e 08 0e 18 0e 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     61a:	1c 1c 1e 3c 1f 7c 1f fc 1f fc 1d dc 1c 9c 1c 1c     ...<.|..........
     62a:	1c 1c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     ................
     63a:	1c 1c 1c 1c 1e 1c 1f 1c 1f 9c 1d dc 1c fc 1c 7c     ...............|
     64a:	1c 3c 1c 1c 1c 1c 1c 1c 00 00 00 00 00 00 00 00     .<..............
     65a:	03 e0 07 f0 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     .....8..........
     66a:	1c 1c 0e 38 07 f0 03 e0 00 00 00 00 00 00 00 00     ...8............
     67a:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 00     ...8.8.8.8......
     68a:	0e 00 0e 00 0e 00 1f 00 00 00 00 00 00 00 00 00     ................
     69a:	03 e0 0f 78 0e 38 1c 1c 1c 1c 1c 1c 1c 1c 1c 7c     ...x.8.........|
     6aa:	1c fc 0f f8 0f f8 00 38 00 fc 00 00 00 00 00 00     .......8........
     6ba:	1f f0 0e 38 0e 38 0e 38 0e 38 0f f0 0f f0 0e 70     ...8.8.8.8.....p
     6ca:	0e 38 0e 38 0e 38 1e 38 00 00 00 00 00 00 00 00     .8.8.8.8........
     6da:	0f f0 1c 38 1c 38 1c 38 1c 00 0f e0 07 f0 00 38     ...8.8.8.......8
     6ea:	1c 38 1c 38 1c 38 0f f0 00 00 00 00 00 00 00 00     .8.8.8..........
     6fa:	1f fc 19 cc 11 c4 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     70a:	01 c0 01 c0 01 c0 07 f0 00 00 00 00 00 00 00 00     ................
     71a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     72a:	1c 70 1c 70 1c 70 0f e0 00 00 00 00 00 00 00 00     .p.p.p..........
     73a:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     .p.p.p.p.p.p.p.p
     74a:	1c 70 0e e0 07 c0 03 80 00 00 00 00 00 00 00 00     .p..............
     75a:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 1c 9c     ................
     76a:	0f f8 0f f8 07 70 07 70 00 00 00 00 00 00 00 00     .....p.p........
     77a:	1c 70 1c 70 1c 70 0e e0 07 c0 03 80 03 80 07 c0     .p.p.p..........
     78a:	0e e0 1c 70 1c 70 1c 70 00 00 00 00 00 00 00 00     ...p.p.p........
     79a:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
     7aa:	03 80 03 80 03 80 0f e0 00 00 00 00 00 00 00 00     ................
     7ba:	1f f8 1c 38 18 38 10 70 00 e0 01 c0 03 80 07 00     ...8.8.p........
     7ca:	0e 08 1c 18 1c 38 1f f8 00 00 00 00 00 00 00 00     .....8..........
     7da:	07 f0 07 00 07 00 07 00 07 00 07 00 07 00 07 00     ................
     7ea:	07 00 07 00 07 00 07 f0 00 00 00 00 00 00 00 00     ................
     7fa:	10 00 18 00 1c 00 0e 00 07 00 03 80 01 c0 00 e0     ................
     80a:	00 70 00 38 00 1c 00 07 00 00 00 00 00 00 00 00     .p.8............
     81a:	07 f0 00 70 00 70 00 70 00 70 00 70 00 70 00 70     ...p.p.p.p.p.p.p
     82a:	00 70 00 70 00 70 07 f0 00 00 00 00 00 00 01 80     .p.p.p..........
     83a:	03 c0 07 e0 0e 70 1c 38 00 00 00 00 00 00 00 00     .....p.8........
	...
     872:	7f ff 7f ff 00 00 00 00 1c 00 1c 00 07 00 07 00     ................
	...
     8a2:	0f e0 00 70 00 70 0f f0 1c 70 1c 70 1c 70 0f d8     ...p.p...p.p.p..
	...
     8ba:	1e 00 0e 00 0e 00 0e 00 0f f0 0e 38 0e 38 0e 38     ...........8.8.8
     8ca:	0e 38 0e 38 0e 38 1b f0 00 00 00 00 00 00 00 00     .8.8.8..........
	...
     8e2:	0f e0 1c 70 1c 70 1c 00 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     8fa:	00 f8 00 70 00 70 00 70 0f f0 1c 70 1c 70 1c 70     ...p.p.p...p.p.p
     90a:	1c 70 1c 70 1c 70 0f d8 00 00 00 00 00 00 00 00     .p.p.p..........
	...
     922:	0f e0 1c 70 1c 70 1f f0 1c 00 1c 70 1c 70 0f e0     ...p.p.....p.p..
	...
     93a:	03 e0 07 70 07 70 07 00 07 00 1f e0 1f e0 07 00     ...p.p..........
     94a:	07 00 07 00 07 00 1f c0 00 00 00 00 00 00 00 00     ................
	...
     962:	0f d8 1c 70 1c 70 1c 70 1c 70 0f f0 07 f0 00 70     ...p.p.p.p.....p
     972:	1c 70 0f e0 00 00 00 00 1e 00 0e 00 0e 00 0e 00     .p..............
     982:	0e f0 0f 38 0f 38 0e 38 0e 38 0e 38 0e 38 1e 38     ...8.8.8.8.8.8.8
	...
     99a:	01 c0 01 c0 01 c0 00 00 0f c0 01 c0 01 c0 01 c0     ................
     9aa:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
     9ba:	00 70 00 70 00 70 00 00 03 f0 00 70 00 70 00 70     .p.p.p.....p.p.p
     9ca:	00 70 00 70 00 70 1c 70 0c f0 07 e0 00 00 00 00     .p.p.p.p........
     9da:	1e 00 0e 00 0e 00 0e 00 0e 38 0e 70 0e e0 0f c0     .........8.p....
     9ea:	0e e0 0e 70 0e 38 1e 38 00 00 00 00 00 00 00 00     ...p.8.8........
     9fa:	0f c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     a0a:	01 c0 01 c0 01 c0 0f f8 00 00 00 00 00 00 00 00     ................
	...
     a22:	1f f8 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c 1c 9c     ................
	...
     a42:	1f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70     ...p.p.p.p.p.p.p
	...
     a62:	0f e0 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f e0     ...p.p.p.p.p.p..
	...
     a82:	1b f0 0e 38 0e 38 0e 38 0e 38 0e 38 0f f0 0e 00     ...8.8.8.8.8....
     a92:	0e 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     aa2:	1f b0 38 e0 38 e0 38 e0 38 e0 38 e0 1f e0 00 e0     ..8.8.8.8.8.....
     ab2:	00 e0 01 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ac2:	1e f0 0f f8 0f 38 0e 00 0e 00 0e 00 0e 00 1f 00     .....8..........
	...
     ae2:	0f e0 1c 30 1c 30 0f 80 03 e0 18 70 18 70 0f e0     ...0.0.....p.p..
	...
     afa:	00 00 01 00 03 00 07 00 1f f0 07 00 07 00 07 00     ................
     b0a:	07 00 07 70 07 70 03 e0 00 00 00 00 00 00 00 00     ...p.p..........
	...
     b22:	1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 1c 70 0f d8     .p.p.p.p.p.p.p..
	...
     b42:	1c 70 1c 70 1c 70 1c 70 1c 70 0e e0 07 c0 03 80     .p.p.p.p.p......
	...
     b62:	1c 1c 1c 1c 1c 1c 1c 9c 1c 9c 0f f8 07 70 07 70     .............p.p
	...
     b82:	1c e0 1c e0 0f c0 07 80 07 80 0f c0 1c e0 1c e0     ................
	...
     ba2:	0e 38 0e 38 0e 38 0e 38 0e 38 07 f0 03 e0 00 e0     .8.8.8.8.8......
     bb2:	01 c0 1f 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     bc2:	1f e0 18 e0 11 c0 03 80 07 00 0e 20 1c 60 1f e0     ........... .`..
	...
     bda:	01 f8 03 80 03 80 03 80 07 00 1c 00 1c 00 07 00     ................
     bea:	03 80 03 80 03 80 01 f8 00 00 00 00 00 00 01 c0     ................
     bfa:	01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0 01 c0     ................
     c0a:	01 c0 01 c0 01 c0 01 c0 01 c0 00 00 00 00 00 00     ................
     c1a:	1f 80 01 c0 01 c0 01 c0 00 e0 00 38 00 38 00 e0     ...........8.8..
     c2a:	01 c0 01 c0 01 c0 1f 80 00 00 00 00 00 00 00 00     ................
     c3a:	1f 1c 3b 9c 39 dc 38 f8 00 00 00 00 00 00 00 00     ..;.9.8.........
	...

00000c56 <SmallFont>:
     c56:	08 0c 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
     c66:	00 00 20 20 20 20 20 20 00 20 00 00 00 28 50 50     ..      . ...(PP
	...
     c7e:	00 00 28 28 fc 28 50 fc 50 50 00 00 00 20 78 a8     ..((.(P.PP... x.
     c8e:	a0 60 30 28 a8 f0 20 00 00 00 48 a8 b0 50 28 34     .`0(.. ...H..P(4
     c9e:	54 48 00 00 00 00 20 50 50 78 a8 a8 90 6c 00 00     TH.... PPx...l..
     cae:	00 40 40 80 00 00 00 00 00 00 00 00 00 04 08 10     .@@.............
     cbe:	10 10 10 10 10 08 04 00 00 40 20 10 10 10 10 10     .........@ .....
     cce:	10 20 40 00 00 00 00 20 a8 70 70 a8 20 00 00 00     . @.... .pp. ...
     cde:	00 00 20 20 20 f8 20 20 20 00 00 00 00 00 00 00     ..   .   .......
     cee:	00 00 00 00 00 40 40 80 00 00 00 00 00 f8 00 00     .....@@.........
	...
     d0a:	00 40 00 00 00 08 10 10 10 20 20 40 40 40 80 00     .@.......  @@@..
     d1a:	00 00 70 88 88 88 88 88 88 70 00 00 00 00 20 60     ..p......p.... `
     d2a:	20 20 20 20 20 70 00 00 00 00 70 88 88 10 20 40          p....p... @
     d3a:	80 f8 00 00 00 00 70 88 08 30 08 08 88 70 00 00     ......p..0...p..
     d4a:	00 00 10 30 50 50 90 78 10 18 00 00 00 00 f8 80     ...0PP.x........
     d5a:	80 f0 08 08 88 70 00 00 00 00 70 90 80 f0 88 88     .....p....p.....
     d6a:	88 70 00 00 00 00 f8 90 10 20 20 20 20 20 00 00     .p.......     ..
     d7a:	00 00 70 88 88 70 88 88 88 70 00 00 00 00 70 88     ..p..p...p....p.
     d8a:	88 88 78 08 48 70 00 00 00 00 00 00 20 00 00 00     ..x.Hp...... ...
     d9a:	00 20 00 00 00 00 00 00 00 20 00 00 00 20 20 00     . ....... ...  .
     daa:	00 04 08 10 20 40 20 10 08 04 00 00 00 00 00 00     .... @ .........
     dba:	f8 00 00 f8 00 00 00 00 00 40 20 10 08 04 08 10     .........@ .....
     dca:	20 40 00 00 00 00 70 88 88 10 20 20 00 20 00 00      @....p...  . ..
     dda:	00 00 70 88 98 a8 a8 b8 80 78 00 00 00 00 20 20     ..p......x....  
     dea:	30 50 50 78 48 cc 00 00 00 00 f0 48 48 70 48 48     0PPxH......HHpHH
     dfa:	48 f0 00 00 00 00 78 88 80 80 80 80 88 70 00 00     H.....x......p..
     e0a:	00 00 f0 48 48 48 48 48 48 f0 00 00 00 00 f8 48     ...HHHHHH......H
     e1a:	50 70 50 40 48 f8 00 00 00 00 f8 48 50 70 50 40     PpP@H......HPpP@
     e2a:	40 e0 00 00 00 00 38 48 80 80 9c 88 48 30 00 00     @.....8H....H0..
     e3a:	00 00 cc 48 48 78 48 48 48 cc 00 00 00 00 f8 20     ...HHxHHH...... 
     e4a:	20 20 20 20 20 f8 00 00 00 00 7c 10 10 10 10 10          .....|.....
     e5a:	10 90 e0 00 00 00 ec 48 50 60 50 50 48 ec 00 00     .......HP`PPH...
     e6a:	00 00 e0 40 40 40 40 40 44 fc 00 00 00 00 d8 d8     ...@@@@@D.......
     e7a:	d8 d8 a8 a8 a8 a8 00 00 00 00 dc 48 68 68 58 58     ...........HhhXX
     e8a:	48 e8 00 00 00 00 70 88 88 88 88 88 88 70 00 00     H.....p......p..
     e9a:	00 00 f0 48 48 70 40 40 40 e0 00 00 00 00 70 88     ...HHp@@@.....p.
     eaa:	88 88 88 e8 98 70 18 00 00 00 f0 48 48 70 50 48     .....p.....HHpPH
     eba:	48 ec 00 00 00 00 78 88 80 60 10 08 88 f0 00 00     H.....x..`......
     eca:	00 00 f8 a8 20 20 20 20 20 70 00 00 00 00 cc 48     ....     p.....H
     eda:	48 48 48 48 48 30 00 00 00 00 cc 48 48 50 50 30     HHHHH0.....HHPP0
     eea:	20 20 00 00 00 00 a8 a8 a8 70 50 50 50 50 00 00       .......pPPPP..
     efa:	00 00 d8 50 50 20 20 50 50 d8 00 00 00 00 d8 50     ...PP  PP......P
     f0a:	50 20 20 20 20 70 00 00 00 00 f8 90 10 20 20 40     P    p.......  @
     f1a:	48 f8 00 00 00 38 20 20 20 20 20 20 20 20 38 00     H....8        8.
     f2a:	00 40 40 40 20 20 10 10 10 08 00 00 00 70 10 10     .@@@  .......p..
     f3a:	10 10 10 10 10 10 70 00 00 20 50 00 00 00 00 00     ......p.. P.....
	...
     f56:	00 00 00 fc 00 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
     f66:	00 00 00 00 00 30 48 38 48 3c 00 00 00 00 c0 40     .....0H8H<.....@
     f76:	40 70 48 48 48 70 00 00 00 00 00 00 00 38 48 40     @pHHHp.......8H@
     f86:	40 38 00 00 00 00 18 08 08 38 48 48 48 3c 00 00     @8.......8HHH<..
     f96:	00 00 00 00 00 30 48 78 40 38 00 00 00 00 1c 20     .....0Hx@8..... 
     fa6:	20 78 20 20 20 78 00 00 00 00 00 00 00 3c 48 30      x   x.......<H0
     fb6:	40 78 44 38 00 00 c0 40 40 70 48 48 48 ec 00 00     @xD8...@@pHHH...
     fc6:	00 00 20 00 00 60 20 20 20 70 00 00 00 00 10 00     .. ..`   p......
     fd6:	00 30 10 10 10 10 10 e0 00 00 c0 40 40 5c 50 70     .0.........@@\Pp
     fe6:	48 ec 00 00 00 00 e0 20 20 20 20 20 20 f8 00 00     H......      ...
     ff6:	00 00 00 00 00 f0 a8 a8 a8 a8 00 00 00 00 00 00     ................
    1006:	00 f0 48 48 48 ec 00 00 00 00 00 00 00 30 48 48     ..HHH........0HH
    1016:	48 30 00 00 00 00 00 00 00 f0 48 48 48 70 40 e0     H0........HHHp@.
    1026:	00 00 00 00 00 38 48 48 48 38 08 1c 00 00 00 00     .....8HHH8......
    1036:	00 d8 60 40 40 e0 00 00 00 00 00 00 00 78 40 30     ..`@@........x@0
    1046:	08 78 00 00 00 00 00 20 20 70 20 20 20 18 00 00     .x.....  p   ...
    1056:	00 00 00 00 00 d8 48 48 48 3c 00 00 00 00 00 00     ......HHH<......
    1066:	00 ec 48 50 30 20 00 00 00 00 00 00 00 a8 a8 70     ..HP0 .........p
    1076:	50 50 00 00 00 00 00 00 00 d8 50 20 50 d8 00 00     PP........P P...
    1086:	00 00 00 00 00 ec 48 50 30 20 20 c0 00 00 00 00     ......HP0  .....
    1096:	00 78 10 20 20 78 00 00 00 18 10 10 10 20 10 10     .x.  x....... ..
    10a6:	10 10 18 00 10 10 10 10 10 10 10 10 10 10 10 10     ................
    10b6:	00 60 20 20 20 10 20 20 20 20 60 00 40 a4 18 00     .`   .    `.@...
	...

000010ce <__ctors_end>:
    10ce:	11 24       	eor	r1, r1
    10d0:	1f be       	out	0x3f, r1	; 63
    10d2:	cf e5       	ldi	r28, 0x5F	; 95
    10d4:	d8 e0       	ldi	r29, 0x08	; 8
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	cd bf       	out	0x3d, r28	; 61

000010da <__do_copy_data>:
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	a0 e6       	ldi	r26, 0x60	; 96
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e6       	ldi	r30, 0x68	; 104
    10e2:	f5 e4       	ldi	r31, 0x45	; 69
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <__do_copy_data+0x10>
    10e6:	05 90       	lpm	r0, Z+
    10e8:	0d 92       	st	X+, r0
    10ea:	a0 38       	cpi	r26, 0x80	; 128
    10ec:	b1 07       	cpc	r27, r17
    10ee:	d9 f7       	brne	.-10     	; 0x10e6 <__do_copy_data+0xc>

000010f0 <__do_clear_bss>:
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	a0 e8       	ldi	r26, 0x80	; 128
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <.do_clear_bss_start>

000010f8 <.do_clear_bss_loop>:
    10f8:	1d 92       	st	X+, r1

000010fa <.do_clear_bss_start>:
    10fa:	a4 3c       	cpi	r26, 0xC4	; 196
    10fc:	b2 07       	cpc	r27, r18
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <.do_clear_bss_loop>
    1100:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <main>
    1104:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <_exit>

00001108 <__bad_interrupt>:
    1108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000110c <read_clock>:
#include "DS1307.h"

unsigned char ack;
//‘ункци€ чтени€ из часов по адресу
unsigned char read_clock(unsigned char adr)
{
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	1f 92       	push	r1
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	18 2f       	mov	r17, r24
  unsigned char z;
  do
  {
    ack = 0;
    111c:	10 92 ae 00 	sts	0x00AE, r1
    i2start();
    1120:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <i2start>
    i2write(0xD0); ack |= i2ack();
    1124:	80 ed       	ldi	r24, 0xD0	; 208
    1126:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <i2write>
    112a:	00 91 ae 00 	lds	r16, 0x00AE
    112e:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <i2ack>
    1132:	80 2b       	or	r24, r16
    1134:	80 93 ae 00 	sts	0x00AE, r24
    i2write(adr); ack |= i2ack();
    1138:	81 2f       	mov	r24, r17
    113a:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <i2write>
    113e:	00 91 ae 00 	lds	r16, 0x00AE
    1142:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <i2ack>
    1146:	80 2b       	or	r24, r16
    1148:	80 93 ae 00 	sts	0x00AE, r24
    i2start();
    114c:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <i2start>
    i2write(0xD1); ack |= i2ack();
    1150:	81 ed       	ldi	r24, 0xD1	; 209
    1152:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <i2write>
    1156:	00 91 ae 00 	lds	r16, 0x00AE
    115a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <i2ack>
    115e:	80 2b       	or	r24, r16
    1160:	80 93 ae 00 	sts	0x00AE, r24
    z=i2read(); i2nack();
    1164:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <i2read>
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <i2nack>
    i2stop();
    116e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <i2stop>
  }
  while(ack);
    1172:	90 91 ae 00 	lds	r25, 0x00AE
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	91 11       	cpse	r25, r1
    117a:	d0 cf       	rjmp	.-96     	; 0x111c <read_clock+0x10>
  return z;
}
    117c:	0f 90       	pop	r0
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <l_get_time>:
// возвращает элемент времени
// time_adr - адрес элемента(секунда, минута, час)
unsigned char l_get_time(unsigned char time_adr)
{
  unsigned char tmp;
  tmp = read_clock(time_adr);
    1188:	0e 94 86 08 	call	0x110c	; 0x110c <read_clock>
  return (tmp >> 4) * 10 + (tmp & 0xf);
    118c:	98 2f       	mov	r25, r24
    118e:	92 95       	swap	r25
    1190:	9f 70       	andi	r25, 0x0F	; 15
    1192:	8f 70       	andi	r24, 0x0F	; 15
}
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	92 9f       	mul	r25, r18
    1198:	80 0d       	add	r24, r0
    119a:	11 24       	eor	r1, r1
    119c:	08 95       	ret

0000119e <l_get_second>:

// возвращает секунды
unsigned char l_get_second()
{
  return l_get_time(R_SECOND);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <l_get_time>

000011a4 <l_get_minute>:
}

// возвращает минут
unsigned char l_get_minute()
{
  return l_get_time(R_MINUTE);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <l_get_time>

000011aa <l_get_hour>:
}
// возвращает часы
unsigned char l_get_hour()
{
  return l_get_time(R_HOUR);
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <l_get_time>

000011b0 <LCD_Write_Bus>:
//========================================================================================================
// «апись в шину данных диспле€. 8-битный режим
//========================================================================================================
void LCD_Write_Bus(unsigned char VH, unsigned char VL)
{
  switch(lcd_param.transfer_mode)
    11b0:	90 91 ba 00 	lds	r25, 0x00BA
    11b4:	99 23       	and	r25, r25
    11b6:	49 f0       	breq	.+18     	; 0x11ca <LCD_Write_Bus+0x1a>
    11b8:	91 30       	cpi	r25, 0x01	; 1
    11ba:	71 f4       	brne	.+28     	; 0x11d8 <LCD_Write_Bus+0x28>
  {
    case TRANSFER_MODE_8:
      LCD_HI_PORT = VH;
    11bc:	82 bb       	out	0x12, r24	; 18
      asm volatile ("nop");
    11be:	00 00       	nop
      PULSE_WR_LOW();
    11c0:	c4 98       	cbi	0x18, 4	; 24
    11c2:	00 00       	nop
    11c4:	c4 9a       	sbi	0x18, 4	; 24
      asm volatile ("nop");
    11c6:	00 00       	nop
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <LCD_Write_Bus+0x1c>
      asm volatile ("nop");
      PULSE_WR_LOW();
      asm volatile ("nop");
      break;
    case TRANSFER_MODE_16:
      LCD_HI_PORT = VH;
    11ca:	82 bb       	out	0x12, r24	; 18
      LCD_LO_PORT = VL;
    11cc:	62 bb       	out	0x12, r22	; 18
      asm volatile ("nop");
    11ce:	00 00       	nop
      PULSE_WR_LOW();
    11d0:	c4 98       	cbi	0x18, 4	; 24
    11d2:	00 00       	nop
    11d4:	c4 9a       	sbi	0x18, 4	; 24
      asm volatile ("nop");
    11d6:	00 00       	nop
    11d8:	08 95       	ret

000011da <LCD_Write_DATA>:
//========================================================================================================
// ќтправка на дисплей данные (старший и младший байт)
//========================================================================================================
void LCD_Write_DATA(unsigned char VH, unsigned char VL)
{
  LCD_SET_RS();
    11da:	c3 9a       	sbi	0x18, 3	; 24
  LCD_Write_Bus(VH, VL);
    11dc:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <LCD_Write_Bus>

000011e0 <LCD_Write_COM>:
//========================================================================================================
// ќтправка на дисплей комманды
//========================================================================================================
void LCD_Write_COM(unsigned char VL)
{
  LCD_CLR_RS();
    11e0:	c3 98       	cbi	0x18, 3	; 24
  LCD_Write_Bus(0x00, VL);
    11e2:	68 2f       	mov	r22, r24
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <LCD_Write_Bus>

000011ea <LCD_Write_COM_DATA>:

//========================================================================================================
// ќтправка на дисплей комманды и данные
//========================================================================================================
void LCD_Write_COM_DATA(unsigned char commmand, int data)
{
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <LCD_Write_COM_DATA+0x6>
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
  LCD_Write_COM(commmand);
    11f4:	69 83       	std	Y+1, r22	; 0x01
    11f6:	7a 83       	std	Y+2, r23	; 0x02
    11f8:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <LCD_Write_COM>
  LCD_Write_DATA(data >> 8, data);
    11fc:	69 81       	ldd	r22, Y+1	; 0x01
    11fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1200:	87 2f       	mov	r24, r23
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
// ќтправка на дисплей комманды и данные
//========================================================================================================
void LCD_Write_COM_DATA(unsigned char commmand, int data)
{
  LCD_Write_COM(commmand);
  LCD_Write_DATA(data >> 8, data);
    120a:	0c 94 ed 08 	jmp	0x11da	; 0x11da <LCD_Write_DATA>

0000120e <init_BUS>:
_current_font cfont;  // “екущий шрифт

// инициализирует шину управлени€ дисплеем
void init_BUS(unsigned char display_model, unsigned char orientation)
{
  LCD_HI_DDR = 0b11111111; // все порты как выходы
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	91 bb       	out	0x11, r25	; 17
  LCD_HI_PORT = 0b00000000; // на выходе 0
    1212:	12 ba       	out	0x12, r1	; 18
  
  // пины управлени€ настраиваем на выход
  LCD_RS_DDR |= 1 << LCD_RS_PIN;
    1214:	bb 9a       	sbi	0x17, 3	; 23
  LCD_WR_DDR |= 1 << LCD_WR_PIN;
    1216:	bc 9a       	sbi	0x17, 4	; 23
  LCD_REST_DDR |= 1 << LCD_REST_PIN;
    1218:	a1 9a       	sbi	0x14, 1	; 20
  //LCD_CS_DDR |= 1 << LCD_CS_PIN;
  LCD_RD_DDR |= 1 << LCD_RD_PIN;
    121a:	d3 9a       	sbi	0x1a, 3	; 26
  
  // устанавливаем начальные значени€ управл€ющих выводов
  //LCD_SET_CS();
  LCD_SET_REST();
    121c:	a9 9a       	sbi	0x15, 1	; 21
  LCD_SET_RS();
    121e:	c3 9a       	sbi	0x18, 3	; 24
  LCD_SET_WR();
    1220:	c4 9a       	sbi	0x18, 4	; 24
  LCD_SET_RD();
    1222:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1224:	2f e7       	ldi	r18, 0x7F	; 127
    1226:	3a e1       	ldi	r19, 0x1A	; 26
    1228:	96 e0       	ldi	r25, 0x06	; 6
    122a:	21 50       	subi	r18, 0x01	; 1
    122c:	30 40       	sbci	r19, 0x00	; 0
    122e:	90 40       	sbci	r25, 0x00	; 0
    1230:	e1 f7       	brne	.-8      	; 0x122a <init_BUS+0x1c>
    1232:	00 c0       	rjmp	.+0      	; 0x1234 <init_BUS+0x26>
    1234:	00 00       	nop
  
  // железный сброс диспле€
  _delay_ms(100);
  LCD_CLR_REST(); // запускаем сброс
    1236:	a9 98       	cbi	0x15, 1	; 21
    1238:	ef e4       	ldi	r30, 0x4F	; 79
    123a:	f3 ec       	ldi	r31, 0xC3	; 195
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <init_BUS+0x2e>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <init_BUS+0x34>
    1242:	00 00       	nop
  _delay_ms(10);
  LCD_SET_REST(); // останавливаем
    1244:	a9 9a       	sbi	0x15, 1	; 21
    1246:	ef e4       	ldi	r30, 0x4F	; 79
    1248:	f3 ec       	ldi	r31, 0xC3	; 195
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <init_BUS+0x3c>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <init_BUS+0x42>
    1250:	00 00       	nop
  
  // выбираем дисплей
  //LCD_CLR_CS();
  
  // инициализаци€ диспле€
  lcd_param.disp_x_size = 240;
    1252:	20 ef       	ldi	r18, 0xF0	; 240
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	30 93 b2 00 	sts	0x00B2, r19
    125a:	20 93 b1 00 	sts	0x00B1, r18
  lcd_param.disp_y_size = 320;
    125e:	20 e4       	ldi	r18, 0x40	; 64
    1260:	31 e0       	ldi	r19, 0x01	; 1
    1262:	30 93 b4 00 	sts	0x00B4, r19
    1266:	20 93 b3 00 	sts	0x00B3, r18
  lcd_param.model = display_model;
    126a:	80 93 af 00 	sts	0x00AF, r24
  lcd_param.orient = orientation;
    126e:	60 93 b0 00 	sts	0x00B0, r22
  lcd_param._transparent = 0;
    1272:	10 92 b5 00 	sts	0x00B5, r1
  lcd_param.transfer_mode = TRANSFER_MODE_8;
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	90 93 ba 00 	sts	0x00BA, r25
  switch(display_model)
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	09 f0       	breq	.+2      	; 0x1282 <init_BUS+0x74>
    1280:	21 c1       	rjmp	.+578    	; 0x14c4 <init_BUS+0x2b6>
//ILI9328
LCD_Write_COM_DATA(0xE5, 0x78F0); // set SRAM internal timing
    1282:	60 ef       	ldi	r22, 0xF0	; 240
    1284:	78 e7       	ldi	r23, 0x78	; 120
    1286:	85 ee       	ldi	r24, 0xE5	; 229
    1288:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x01, 0x0100); // set Driver Output Control
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x02, 0x0200); // set 1 line inversion
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	72 e0       	ldi	r23, 0x02	; 2
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x03, /*0x1038*/0x1018); // set GRAM write direction and BGR=1.
    12a0:	68 e1       	ldi	r22, 0x18	; 24
    12a2:	70 e1       	ldi	r23, 0x10	; 16
    12a4:	83 e0       	ldi	r24, 0x03	; 3
    12a6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x04, 0x0000); // Resize register
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	84 e0       	ldi	r24, 0x04	; 4
    12b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x08, 0x0207); // set the back porch and front porch
    12b4:	67 e0       	ldi	r22, 0x07	; 7
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x09, 0x0000); // set non-display area refresh cycle ISC[3:0]
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	89 e0       	ldi	r24, 0x09	; 9
    12c4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x0A, 0x0000); // FMARK function
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	8a e0       	ldi	r24, 0x0A	; 10
    12ce:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x0C, 0x0000); // RGB interface setting
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	8c e0       	ldi	r24, 0x0C	; 12
    12d8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x0D, 0x0000); // Frame marker Position
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	8d e0       	ldi	r24, 0x0D	; 13
    12e2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x0F, 0x0000); // RGB interface polarity
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	8f e0       	ldi	r24, 0x0F	; 15
    12ec:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
//*************Power On sequence ****************//
LCD_Write_COM_DATA(0x10, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	80 e1       	ldi	r24, 0x10	; 16
    12f6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x11, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
    12fa:	67 e0       	ldi	r22, 0x07	; 7
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	81 e1       	ldi	r24, 0x11	; 17
    1300:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x12, 0x0000); // VREG1OUT voltage
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	82 e1       	ldi	r24, 0x12	; 18
    130a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x13, 0x0000); // VDV[4:0] for VCOM amplitude
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	83 e1       	ldi	r24, 0x13	; 19
    1314:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x07, 0x0001);
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	87 e0       	ldi	r24, 0x07	; 7
    131e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    1322:	ff ef       	ldi	r31, 0xFF	; 255
    1324:	24 e3       	ldi	r18, 0x34	; 52
    1326:	3c e0       	ldi	r19, 0x0C	; 12
    1328:	f1 50       	subi	r31, 0x01	; 1
    132a:	20 40       	sbci	r18, 0x00	; 0
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	e1 f7       	brne	.-8      	; 0x1328 <init_BUS+0x11a>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <init_BUS+0x124>
    1332:	00 00       	nop
_delay_ms(200); // Dis-charge capacitor power voltage
LCD_Write_COM_DATA(0x10, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
    1334:	60 e9       	ldi	r22, 0x90	; 144
    1336:	76 e1       	ldi	r23, 0x16	; 22
    1338:	80 e1       	ldi	r24, 0x10	; 16
    133a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x11, 0x0227); // Set DC1[2:0], DC0[2:0], VC[2:0]
    133e:	67 e2       	ldi	r22, 0x27	; 39
    1340:	72 e0       	ldi	r23, 0x02	; 2
    1342:	81 e1       	ldi	r24, 0x11	; 17
    1344:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    1348:	8f e3       	ldi	r24, 0x3F	; 63
    134a:	9d e0       	ldi	r25, 0x0D	; 13
    134c:	e3 e0       	ldi	r30, 0x03	; 3
    134e:	81 50       	subi	r24, 0x01	; 1
    1350:	90 40       	sbci	r25, 0x00	; 0
    1352:	e0 40       	sbci	r30, 0x00	; 0
    1354:	e1 f7       	brne	.-8      	; 0x134e <init_BUS+0x140>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <init_BUS+0x14a>
    1358:	00 00       	nop
_delay_ms(50); // Delay 50ms
LCD_Write_COM_DATA(0x12, 0x000D); // 0012
    135a:	6d e0       	ldi	r22, 0x0D	; 13
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	82 e1       	ldi	r24, 0x12	; 18
    1360:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    1364:	ff e3       	ldi	r31, 0x3F	; 63
    1366:	2d e0       	ldi	r18, 0x0D	; 13
    1368:	33 e0       	ldi	r19, 0x03	; 3
    136a:	f1 50       	subi	r31, 0x01	; 1
    136c:	20 40       	sbci	r18, 0x00	; 0
    136e:	30 40       	sbci	r19, 0x00	; 0
    1370:	e1 f7       	brne	.-8      	; 0x136a <init_BUS+0x15c>
    1372:	00 c0       	rjmp	.+0      	; 0x1374 <init_BUS+0x166>
    1374:	00 00       	nop
_delay_ms(50); // Delay 50ms
LCD_Write_COM_DATA(0x13, 0x1200); // VDV[4:0] for VCOM amplitude
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	72 e1       	ldi	r23, 0x12	; 18
    137a:	83 e1       	ldi	r24, 0x13	; 19
    137c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x29, 0x000A); // 04  VCM[5:0] for VCOMH
    1380:	6a e0       	ldi	r22, 0x0A	; 10
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	89 e2       	ldi	r24, 0x29	; 41
    1386:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x2B, 0x000D); // Set Frame Rate
    138a:	6d e0       	ldi	r22, 0x0D	; 13
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	8b e2       	ldi	r24, 0x2B	; 43
    1390:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    1394:	8f e3       	ldi	r24, 0x3F	; 63
    1396:	9d e0       	ldi	r25, 0x0D	; 13
    1398:	e3 e0       	ldi	r30, 0x03	; 3
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	e0 40       	sbci	r30, 0x00	; 0
    13a0:	e1 f7       	brne	.-8      	; 0x139a <init_BUS+0x18c>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <init_BUS+0x196>
    13a4:	00 00       	nop
_delay_ms(50); // Delay 50ms
LCD_Write_COM_DATA(0x20, 0x0000); // GRAM horizontal Address
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	80 e2       	ldi	r24, 0x20	; 32
    13ac:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x21, 0x0000); // GRAM Vertical Address
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	81 e2       	ldi	r24, 0x21	; 33
    13b6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
// ----------- Adjust the Gamma Curve ----------//
LCD_Write_COM_DATA(0x30, 0x0000);
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 e3       	ldi	r24, 0x30	; 48
    13c0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x31, 0x0404);
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	74 e0       	ldi	r23, 0x04	; 4
    13c8:	81 e3       	ldi	r24, 0x31	; 49
    13ca:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x32, 0x0003);
    13ce:	63 e0       	ldi	r22, 0x03	; 3
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	82 e3       	ldi	r24, 0x32	; 50
    13d4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x35, 0x0405);
    13d8:	65 e0       	ldi	r22, 0x05	; 5
    13da:	74 e0       	ldi	r23, 0x04	; 4
    13dc:	85 e3       	ldi	r24, 0x35	; 53
    13de:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x36, 0x0808);
    13e2:	68 e0       	ldi	r22, 0x08	; 8
    13e4:	78 e0       	ldi	r23, 0x08	; 8
    13e6:	86 e3       	ldi	r24, 0x36	; 54
    13e8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x37, 0x0407);
    13ec:	67 e0       	ldi	r22, 0x07	; 7
    13ee:	74 e0       	ldi	r23, 0x04	; 4
    13f0:	87 e3       	ldi	r24, 0x37	; 55
    13f2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x38, 0x0303);
    13f6:	63 e0       	ldi	r22, 0x03	; 3
    13f8:	73 e0       	ldi	r23, 0x03	; 3
    13fa:	88 e3       	ldi	r24, 0x38	; 56
    13fc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x39, 0x0707);
    1400:	67 e0       	ldi	r22, 0x07	; 7
    1402:	77 e0       	ldi	r23, 0x07	; 7
    1404:	89 e3       	ldi	r24, 0x39	; 57
    1406:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x3C, 0x0504);
    140a:	64 e0       	ldi	r22, 0x04	; 4
    140c:	75 e0       	ldi	r23, 0x05	; 5
    140e:	8c e3       	ldi	r24, 0x3C	; 60
    1410:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x3D, 0x0808);
    1414:	68 e0       	ldi	r22, 0x08	; 8
    1416:	78 e0       	ldi	r23, 0x08	; 8
    1418:	8d e3       	ldi	r24, 0x3D	; 61
    141a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
//------------------ Set GRAM area ---------------//
LCD_Write_COM_DATA(0x50, 0x0000); // Horizontal GRAM Start Address
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	80 e5       	ldi	r24, 0x50	; 80
    1424:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x51, 0x00EF); // Horizontal GRAM End Address
    1428:	6f ee       	ldi	r22, 0xEF	; 239
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	81 e5       	ldi	r24, 0x51	; 81
    142e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x52, 0x0000); // Vertical GRAM Start Address
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	82 e5       	ldi	r24, 0x52	; 82
    1438:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x53, 0x013F); // Vertical GRAM Start Address
    143c:	6f e3       	ldi	r22, 0x3F	; 63
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	83 e5       	ldi	r24, 0x53	; 83
    1442:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x60, 0xA700); // Gate Scan Line
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	77 ea       	ldi	r23, 0xA7	; 167
    144a:	80 e6       	ldi	r24, 0x60	; 96
    144c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x61, 0x0001); // NDL,VLE, REV
    1450:	61 e0       	ldi	r22, 0x01	; 1
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	81 e6       	ldi	r24, 0x61	; 97
    1456:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x6A, 0x0000); // set scrolling line
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	8a e6       	ldi	r24, 0x6A	; 106
    1460:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
//-------------- Partial Display Control ---------//
LCD_Write_COM_DATA(0x80, 0x0000);
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	80 e8       	ldi	r24, 0x80	; 128
    146a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x81, 0x0000);
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	81 e8       	ldi	r24, 0x81	; 129
    1474:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x82, 0x0000);
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	82 e8       	ldi	r24, 0x82	; 130
    147e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x83, 0x0000);
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	83 e8       	ldi	r24, 0x83	; 131
    1488:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x84, 0x0000);
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	84 e8       	ldi	r24, 0x84	; 132
    1492:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x85, 0x0000);
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	85 e8       	ldi	r24, 0x85	; 133
    149c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
//-------------- Panel Control -------------------//
LCD_Write_COM_DATA(0x90, 0x0010);
    14a0:	60 e1       	ldi	r22, 0x10	; 16
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	80 e9       	ldi	r24, 0x90	; 144
    14a6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x92, 0x0000);
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	82 e9       	ldi	r24, 0x92	; 146
    14b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x07, 0x0133); // 262K color and display ON
    14b4:	63 e3       	ldi	r22, 0x33	; 51
    14b6:	71 e0       	ldi	r23, 0x01	; 1
    14b8:	87 e0       	ldi	r24, 0x07	; 7
    14ba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    14be:	82 e2       	ldi	r24, 0x22	; 34
    14c0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <LCD_Write_COM>
}

// устанавливает цвет шрифта.
void LCD_SetFontColor_RGB(unsigned char r, unsigned char g, unsigned char b)
{
  lcd_param.fnt_color_h = ((r & 248) | g >> 5);
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 93 b6 00 	sts	0x00B6, r24
  lcd_param.fnt_color_l = ((g & 28) << 3 | b >> 3);
    14ca:	80 93 b7 00 	sts	0x00B7, r24
  lcd_param.fnt_color_l = (color & 0xFF);
}
//устанавливает цвет фона
void LCD_SetBackColor_RGB(unsigned char r, unsigned char g, unsigned char b)
{
  lcd_param.bg_color_h = ((r & 248) | g >> 5);
    14ce:	10 92 b8 00 	sts	0x00B8, r1
  lcd_param.bg_color_l = ((g & 28) << 3 | b >> 3);
    14d2:	10 92 b9 00 	sts	0x00B9, r1
  lcd_param._transparent = 0;
    14d6:	10 92 b5 00 	sts	0x00B5, r1
      break;
    #endif
  }
  LCD_SetFontColor_RGB(255, 255, 255);
  LCD_SetBackColor_RGB(0, 0, 0);
  cfont.font = 0;
    14da:	10 92 bc 00 	sts	0x00BC, r1
    14de:	10 92 bb 00 	sts	0x00BB, r1
    14e2:	08 95       	ret

000014e4 <LCD_SetFontColor_Word>:
}

//устанавливает цвет шрифта
void LCD_SetFontColor_Word(unsigned int color)
{
  lcd_param.fnt_color_h = (color >> 8);
    14e4:	90 93 b6 00 	sts	0x00B6, r25
  lcd_param.fnt_color_l = (color & 0xFF);
    14e8:	80 93 b7 00 	sts	0x00B7, r24
    14ec:	08 95       	ret

000014ee <LCD_SetBackColor_Word>:
  {
    lcd_param._transparent = 1;
  } 
  else 
  {
    lcd_param.bg_color_h = (color >> 8);
    14ee:	90 93 b8 00 	sts	0x00B8, r25
    lcd_param.bg_color_l = (color & 0xFF);
    14f2:	80 93 b9 00 	sts	0x00B9, r24
    lcd_param._transparent = 0;
    14f6:	10 92 b5 00 	sts	0x00B5, r1
    14fa:	08 95       	ret

000014fc <LCD_SetWorkAreaXY>:
  }
}

//устанавливает курсор в позицию (х1, у1). и выставл€ет рабочую область с координатами ((х1, у1)(х2, у2))
void LCD_SetWorkAreaXY(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	ec 01       	movw	r28, r24
    150e:	6b 01       	movw	r12, r22
    1510:	8a 01       	movw	r16, r20
    1512:	f2 2e       	mov	r15, r18
    1514:	e3 2e       	mov	r14, r19
  // скорректируем значени€ с учетом смещени€ начала координат  
  if (lcd_param.orient == LANDSCAPE)
    1516:	80 91 b0 00 	lds	r24, 0x00B0
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	79 f4       	brne	.+30     	; 0x153c <LCD_SetWorkAreaXY+0x40>
  {
    swap(unsigned int, x1, y1);
    swap(unsigned int, x2, y2)
    y1 = lcd_param.disp_y_size - y1;
    151e:	80 91 b3 00 	lds	r24, 0x00B3
    1522:	90 91 b4 00 	lds	r25, 0x00B4
    1526:	ac 01       	movw	r20, r24
    1528:	4c 1b       	sub	r20, r28
    152a:	5d 0b       	sbc	r21, r29
    y2 = lcd_param.disp_y_size - y2;
    152c:	80 1b       	sub	r24, r16
    152e:	91 0b       	sbc	r25, r17
{
  // скорректируем значени€ с учетом смещени€ начала координат  
  if (lcd_param.orient == LANDSCAPE)
  {
    swap(unsigned int, x1, y1);
    swap(unsigned int, x2, y2)
    1530:	02 2f       	mov	r16, r18
    1532:	13 2f       	mov	r17, r19
    y1 = lcd_param.disp_y_size - y1;
    y2 = lcd_param.disp_y_size - y2;
    swap(unsigned int, y1, y2)
    1534:	f4 2e       	mov	r15, r20
    1536:	e5 2e       	mov	r14, r21
void LCD_SetWorkAreaXY(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
  // скорректируем значени€ с учетом смещени€ начала координат  
  if (lcd_param.orient == LANDSCAPE)
  {
    swap(unsigned int, x1, y1);
    1538:	eb 01       	movw	r28, r22
    swap(unsigned int, x2, y2)
    y1 = lcd_param.disp_y_size - y1;
    y2 = lcd_param.disp_y_size - y2;
    swap(unsigned int, y1, y2)
    153a:	6c 01       	movw	r12, r24
  }
  switch(lcd_param.model)
    153c:	80 91 af 00 	lds	r24, 0x00AF
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	29 f5       	brne	.+74     	; 0x158e <LCD_SetWorkAreaXY+0x92>
LCD_Write_COM_DATA(0x20,x1);
    1544:	be 01       	movw	r22, r28
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x21,y2); // дл€ портретного режима должно быть y1
    154c:	6f 2d       	mov	r22, r15
    154e:	7e 2d       	mov	r23, r14
    1550:	81 e2       	ldi	r24, 0x21	; 33
    1552:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x50,x1);
    1556:	be 01       	movw	r22, r28
    1558:	80 e5       	ldi	r24, 0x50	; 80
    155a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x52,y1);
    155e:	b6 01       	movw	r22, r12
    1560:	82 e5       	ldi	r24, 0x52	; 82
    1562:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x51,x2);
    1566:	b8 01       	movw	r22, r16
    1568:	81 e5       	ldi	r24, 0x51	; 81
    156a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
LCD_Write_COM_DATA(0x53,y2);
    156e:	6f 2d       	mov	r22, r15
    1570:	7e 2d       	mov	r23, r14
    1572:	83 e5       	ldi	r24, 0x53	; 83
    1574:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_Write_COM_DATA>
    1578:	82 e2       	ldi	r24, 0x22	; 34
      case ILI9328:
      #include "setxy_ILI9328.h"
    break;
    #endif
  }
}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <LCD_Write_COM>
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	08 95       	ret

000015a0 <LCD_DrawPixel>:

// закрашивает пиксель по координатам (х,у) в цвет color
void LCD_DrawPixel(unsigned int x, unsigned int y, unsigned int color)
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	d4 2f       	mov	r29, r20
    15a6:	c5 2f       	mov	r28, r21
  LCD_SetWorkAreaXY(x, y, x, y);
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <LCD_SetWorkAreaXY>
  LCD_Write_DATA(color >> 8, color);
    15b0:	6d 2f       	mov	r22, r29
    15b2:	8c 2f       	mov	r24, r28
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28

// закрашивает пиксель по координатам (х,у) в цвет color
void LCD_DrawPixel(unsigned int x, unsigned int y, unsigned int color)
{
  LCD_SetWorkAreaXY(x, y, x, y);
  LCD_Write_DATA(color >> 8, color);
    15b8:	0c 94 ed 08 	jmp	0x11da	; 0x11da <LCD_Write_DATA>

000015bc <LCD_ClrXY>:
}

//очищает экран
void LCD_ClrXY(void)
{
  if (lcd_param.orient == PORTRAIT)
    15bc:	20 91 b0 00 	lds	r18, 0x00B0
    15c0:	80 91 b3 00 	lds	r24, 0x00B3
    15c4:	90 91 b4 00 	lds	r25, 0x00B4
    15c8:	40 91 b1 00 	lds	r20, 0x00B1
    15cc:	50 91 b2 00 	lds	r21, 0x00B2
    15d0:	21 11       	cpse	r18, r1
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <LCD_ClrXY+0x1c>
  {
    LCD_SetWorkAreaXY(X_begin, Y_begin, lcd_param.disp_x_size, lcd_param.disp_y_size);
    15d4:	9c 01       	movw	r18, r24
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <LCD_ClrXY+0x20>
  }
  else
  {
    LCD_SetWorkAreaXY(X_begin, Y_begin, lcd_param.disp_y_size, lcd_param.disp_x_size);
    15d8:	9a 01       	movw	r18, r20
    15da:	ac 01       	movw	r20, r24
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <LCD_SetWorkAreaXY>

000015e8 <_fast_fill_16>:
  }
}

// быстра€ перерисовка области цветом
void _fast_fill_16(unsigned int ch, unsigned int cl, unsigned long pix)
{
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
  unsigned long blocks;
  unsigned int i;
  LCD_HI_PORT = ch;
    15f0:	82 bb       	out	0x12, r24	; 18
  LCD_LO_PORT = cl;
    15f2:	62 bb       	out	0x12, r22	; 18
  blocks = pix / 16;
    15f4:	da 01       	movw	r26, r20
    15f6:	c9 01       	movw	r24, r18
    15f8:	64 e0       	ldi	r22, 0x04	; 4
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	6a 95       	dec	r22
    1604:	d1 f7       	brne	.-12     	; 0x15fa <_fast_fill_16+0x12>
  for (i = 0; i < blocks; i++)
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	32 c0       	rjmp	.+100    	; 0x1670 <_fast_fill_16+0x88>
  {
    PULSE_WR_LOW();
    160c:	c4 98       	cbi	0x18, 4	; 24
    160e:	00 00       	nop
    1610:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1612:	c4 98       	cbi	0x18, 4	; 24
    1614:	00 00       	nop
    1616:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1618:	c4 98       	cbi	0x18, 4	; 24
    161a:	00 00       	nop
    161c:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    161e:	c4 98       	cbi	0x18, 4	; 24
    1620:	00 00       	nop
    1622:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1624:	c4 98       	cbi	0x18, 4	; 24
    1626:	00 00       	nop
    1628:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    162a:	c4 98       	cbi	0x18, 4	; 24
    162c:	00 00       	nop
    162e:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1630:	c4 98       	cbi	0x18, 4	; 24
    1632:	00 00       	nop
    1634:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1636:	c4 98       	cbi	0x18, 4	; 24
    1638:	00 00       	nop
    163a:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    163c:	c4 98       	cbi	0x18, 4	; 24
    163e:	00 00       	nop
    1640:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1642:	c4 98       	cbi	0x18, 4	; 24
    1644:	00 00       	nop
    1646:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1648:	c4 98       	cbi	0x18, 4	; 24
    164a:	00 00       	nop
    164c:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    164e:	c4 98       	cbi	0x18, 4	; 24
    1650:	00 00       	nop
    1652:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1654:	c4 98       	cbi	0x18, 4	; 24
    1656:	00 00       	nop
    1658:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    165a:	c4 98       	cbi	0x18, 4	; 24
    165c:	00 00       	nop
    165e:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1660:	c4 98       	cbi	0x18, 4	; 24
    1662:	00 00       	nop
    1664:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    1666:	c4 98       	cbi	0x18, 4	; 24
    1668:	00 00       	nop
    166a:	c4 9a       	sbi	0x18, 4	; 24
  unsigned long blocks;
  unsigned int i;
  LCD_HI_PORT = ch;
  LCD_LO_PORT = cl;
  blocks = pix / 16;
  for (i = 0; i < blocks; i++)
    166c:	6f 5f       	subi	r22, 0xFF	; 255
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	6b 01       	movw	r12, r22
    1672:	e1 2c       	mov	r14, r1
    1674:	f1 2c       	mov	r15, r1
    1676:	c8 16       	cp	r12, r24
    1678:	d9 06       	cpc	r13, r25
    167a:	ea 06       	cpc	r14, r26
    167c:	fb 06       	cpc	r15, r27
    167e:	08 f4       	brcc	.+2      	; 0x1682 <_fast_fill_16+0x9a>
    1680:	c5 cf       	rjmp	.-118    	; 0x160c <_fast_fill_16+0x24>
    PULSE_WR_LOW();
    PULSE_WR_LOW();
    PULSE_WR_LOW();
    PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
    1682:	da 01       	movw	r26, r20
    1684:	c9 01       	movw	r24, r18
    1686:	8f 70       	andi	r24, 0x0F	; 15
    1688:	99 27       	eor	r25, r25
    168a:	aa 27       	eor	r26, r26
    168c:	bb 27       	eor	r27, r27
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	a1 05       	cpc	r26, r1
    1692:	b1 05       	cpc	r27, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <_fast_fill_16+0xbc>
    1696:	13 c0       	rjmp	.+38     	; 0x16be <_fast_fill_16+0xd6>
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    {
      PULSE_WR_LOW();
    1698:	c4 98       	cbi	0x18, 4	; 24
    169a:	00 00       	nop
    169c:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW();
    PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    169e:	2f 5f       	subi	r18, 0xFF	; 255
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <_fast_fill_16+0xc6>
    PULSE_WR_LOW();
    PULSE_WR_LOW();
    PULSE_WR_LOW();
    PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	a1 1d       	adc	r26, r1
    16ac:	b1 1d       	adc	r27, r1
    16ae:	a9 01       	movw	r20, r18
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	48 17       	cp	r20, r24
    16b6:	59 07       	cpc	r21, r25
    16b8:	6a 07       	cpc	r22, r26
    16ba:	7b 07       	cpc	r23, r27
    16bc:	68 f3       	brcs	.-38     	; 0x1698 <_fast_fill_16+0xb0>
    {
      PULSE_WR_LOW();
    }
  }
}
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	08 95       	ret

000016c8 <_fast_fill_8>:
//========================================================================================================
// ест много пам€ти
void _fast_fill_8(unsigned int ch, unsigned long pix)
{
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
  unsigned long blocks;
  unsigned long i;
  LCD_HI_PORT = ch;
    16cc:	82 bb       	out	0x12, r24	; 18
  blocks = pix / 16;
    16ce:	8a 01       	movw	r16, r20
    16d0:	9b 01       	movw	r18, r22
    16d2:	e4 e0       	ldi	r30, 0x04	; 4
    16d4:	36 95       	lsr	r19
    16d6:	27 95       	ror	r18
    16d8:	17 95       	ror	r17
    16da:	07 95       	ror	r16
    16dc:	ea 95       	dec	r30
    16de:	d1 f7       	brne	.-12     	; 0x16d4 <_fast_fill_8+0xc>
  for (i = 0; i < blocks; i++)
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	dc 01       	movw	r26, r24
    16e6:	63 c0       	rjmp	.+198    	; 0x17ae <_fast_fill_8+0xe6>
  {
    PULSE_WR_LOW(); PULSE_WR_LOW();
    16e8:	c4 98       	cbi	0x18, 4	; 24
    16ea:	00 00       	nop
    16ec:	c4 9a       	sbi	0x18, 4	; 24
    16ee:	c4 98       	cbi	0x18, 4	; 24
    16f0:	00 00       	nop
    16f2:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    16f4:	c4 98       	cbi	0x18, 4	; 24
    16f6:	00 00       	nop
    16f8:	c4 9a       	sbi	0x18, 4	; 24
    16fa:	c4 98       	cbi	0x18, 4	; 24
    16fc:	00 00       	nop
    16fe:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1700:	c4 98       	cbi	0x18, 4	; 24
    1702:	00 00       	nop
    1704:	c4 9a       	sbi	0x18, 4	; 24
    1706:	c4 98       	cbi	0x18, 4	; 24
    1708:	00 00       	nop
    170a:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    170c:	c4 98       	cbi	0x18, 4	; 24
    170e:	00 00       	nop
    1710:	c4 9a       	sbi	0x18, 4	; 24
    1712:	c4 98       	cbi	0x18, 4	; 24
    1714:	00 00       	nop
    1716:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1718:	c4 98       	cbi	0x18, 4	; 24
    171a:	00 00       	nop
    171c:	c4 9a       	sbi	0x18, 4	; 24
    171e:	c4 98       	cbi	0x18, 4	; 24
    1720:	00 00       	nop
    1722:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1724:	c4 98       	cbi	0x18, 4	; 24
    1726:	00 00       	nop
    1728:	c4 9a       	sbi	0x18, 4	; 24
    172a:	c4 98       	cbi	0x18, 4	; 24
    172c:	00 00       	nop
    172e:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1730:	c4 98       	cbi	0x18, 4	; 24
    1732:	00 00       	nop
    1734:	c4 9a       	sbi	0x18, 4	; 24
    1736:	c4 98       	cbi	0x18, 4	; 24
    1738:	00 00       	nop
    173a:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    173c:	c4 98       	cbi	0x18, 4	; 24
    173e:	00 00       	nop
    1740:	c4 9a       	sbi	0x18, 4	; 24
    1742:	c4 98       	cbi	0x18, 4	; 24
    1744:	00 00       	nop
    1746:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1748:	c4 98       	cbi	0x18, 4	; 24
    174a:	00 00       	nop
    174c:	c4 9a       	sbi	0x18, 4	; 24
    174e:	c4 98       	cbi	0x18, 4	; 24
    1750:	00 00       	nop
    1752:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1754:	c4 98       	cbi	0x18, 4	; 24
    1756:	00 00       	nop
    1758:	c4 9a       	sbi	0x18, 4	; 24
    175a:	c4 98       	cbi	0x18, 4	; 24
    175c:	00 00       	nop
    175e:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1760:	c4 98       	cbi	0x18, 4	; 24
    1762:	00 00       	nop
    1764:	c4 9a       	sbi	0x18, 4	; 24
    1766:	c4 98       	cbi	0x18, 4	; 24
    1768:	00 00       	nop
    176a:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    176c:	c4 98       	cbi	0x18, 4	; 24
    176e:	00 00       	nop
    1770:	c4 9a       	sbi	0x18, 4	; 24
    1772:	c4 98       	cbi	0x18, 4	; 24
    1774:	00 00       	nop
    1776:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1778:	c4 98       	cbi	0x18, 4	; 24
    177a:	00 00       	nop
    177c:	c4 9a       	sbi	0x18, 4	; 24
    177e:	c4 98       	cbi	0x18, 4	; 24
    1780:	00 00       	nop
    1782:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1784:	c4 98       	cbi	0x18, 4	; 24
    1786:	00 00       	nop
    1788:	c4 9a       	sbi	0x18, 4	; 24
    178a:	c4 98       	cbi	0x18, 4	; 24
    178c:	00 00       	nop
    178e:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    1790:	c4 98       	cbi	0x18, 4	; 24
    1792:	00 00       	nop
    1794:	c4 9a       	sbi	0x18, 4	; 24
    1796:	c4 98       	cbi	0x18, 4	; 24
    1798:	00 00       	nop
    179a:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    179c:	c4 98       	cbi	0x18, 4	; 24
    179e:	00 00       	nop
    17a0:	c4 9a       	sbi	0x18, 4	; 24
    17a2:	c4 98       	cbi	0x18, 4	; 24
    17a4:	00 00       	nop
    17a6:	c4 9a       	sbi	0x18, 4	; 24
{
  unsigned long blocks;
  unsigned long i;
  LCD_HI_PORT = ch;
  blocks = pix / 16;
  for (i = 0; i < blocks; i++)
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	a1 1d       	adc	r26, r1
    17ac:	b1 1d       	adc	r27, r1
    17ae:	80 17       	cp	r24, r16
    17b0:	91 07       	cpc	r25, r17
    17b2:	a2 07       	cpc	r26, r18
    17b4:	b3 07       	cpc	r27, r19
    17b6:	09 f0       	breq	.+2      	; 0x17ba <_fast_fill_8+0xf2>
    17b8:	97 cf       	rjmp	.-210    	; 0x16e8 <_fast_fill_8+0x20>
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
    17ba:	db 01       	movw	r26, r22
    17bc:	ca 01       	movw	r24, r20
    17be:	8f 70       	andi	r24, 0x0F	; 15
    17c0:	99 27       	eor	r25, r25
    17c2:	aa 27       	eor	r26, r26
    17c4:	bb 27       	eor	r27, r27
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	a1 05       	cpc	r26, r1
    17ca:	b1 05       	cpc	r27, r1
    17cc:	61 f4       	brne	.+24     	; 0x17e6 <_fast_fill_8+0x11e>
    17ce:	16 c0       	rjmp	.+44     	; 0x17fc <_fast_fill_8+0x134>
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    {
      PULSE_WR_LOW(); PULSE_WR_LOW();
    17d0:	c4 98       	cbi	0x18, 4	; 24
    17d2:	00 00       	nop
    17d4:	c4 9a       	sbi	0x18, 4	; 24
    17d6:	c4 98       	cbi	0x18, 4	; 24
    17d8:	00 00       	nop
    17da:	c4 9a       	sbi	0x18, 4	; 24
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    17dc:	4f 5f       	subi	r20, 0xFF	; 255
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	6f 4f       	sbci	r22, 0xFF	; 255
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <_fast_fill_8+0x12a>
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
    PULSE_WR_LOW(); PULSE_WR_LOW();
  }
  if ((pix % 16) != 0)
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	ba 01       	movw	r22, r20
  {
    for (i = 0; i < (pix % 16) + 1; i++)
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	a1 1d       	adc	r26, r1
    17f0:	b1 1d       	adc	r27, r1
    17f2:	48 17       	cp	r20, r24
    17f4:	59 07       	cpc	r21, r25
    17f6:	6a 07       	cpc	r22, r26
    17f8:	7b 07       	cpc	r23, r27
    17fa:	50 f3       	brcs	.-44     	; 0x17d0 <_fast_fill_8+0x108>
    {
      PULSE_WR_LOW(); PULSE_WR_LOW();
    }
  }
}
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <LCD_ClrScreen>:

//очищаем экран
void LCD_ClrScreen(void)
{
    1802:	cf 92       	push	r12
    1804:	df 92       	push	r13
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 d0       	rcall	.+0      	; 0x1810 <LCD_ClrScreen+0xe>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <LCD_ClrScreen+0x10>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
  unsigned long int count_pxl;
  
  count_pxl = (unsigned long int)lcd_param.disp_x_size * (unsigned long int)lcd_param.disp_y_size;
    1816:	a0 91 b1 00 	lds	r26, 0x00B1
    181a:	b0 91 b2 00 	lds	r27, 0x00B2
    181e:	20 91 b3 00 	lds	r18, 0x00B3
    1822:	30 91 b4 00 	lds	r19, 0x00B4
    1826:	0e 94 9b 22 	call	0x4536	; 0x4536 <__umulhisi3>
    182a:	9b 01       	movw	r18, r22
    182c:	ac 01       	movw	r20, r24
  LCD_ClrXY();
    182e:	69 83       	std	Y+1, r22	; 0x01
    1830:	3a 83       	std	Y+2, r19	; 0x02
    1832:	4b 83       	std	Y+3, r20	; 0x03
    1834:	5c 83       	std	Y+4, r21	; 0x04
    1836:	0e 94 de 0a 	call	0x15bc	; 0x15bc <LCD_ClrXY>
  LCD_SET_RS();
    183a:	c3 9a       	sbi	0x18, 3	; 24
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
    183c:	80 91 ba 00 	lds	r24, 0x00BA
    1840:	29 81       	ldd	r18, Y+1	; 0x01
    1842:	3a 81       	ldd	r19, Y+2	; 0x02
    1844:	4b 81       	ldd	r20, Y+3	; 0x03
    1846:	5c 81       	ldd	r21, Y+4	; 0x04
    1848:	81 11       	cpse	r24, r1
    184a:	10 c0       	rjmp	.+32     	; 0x186c <LCD_ClrScreen+0x6a>
  {
    _fast_fill_16(0,0, count_pxl);
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
      for (i = 0; i < count_pxl; i++)
      {
        LCD_Write_Bus(0,0);
      }
  }
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
  count_pxl = (unsigned long int)lcd_param.disp_x_size * (unsigned long int)lcd_param.disp_y_size;
  LCD_ClrXY();
  LCD_SET_RS();
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
  {
    _fast_fill_16(0,0, count_pxl);
    1868:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <_fast_fill_16>
  }
  else if (lcd_param.transfer_mode == TRANSFER_MODE_8)
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	11 f5       	brne	.+68     	; 0x18b4 <LCD_ClrScreen+0xb2>
  {
    _fast_fill_8(0, count_pxl);
    1870:	ba 01       	movw	r22, r20
    1872:	a9 01       	movw	r20, r18
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
      for (i = 0; i < count_pxl; i++)
      {
        LCD_Write_Bus(0,0);
      }
  }
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	ff 90       	pop	r15
    1886:	ef 90       	pop	r14
    1888:	df 90       	pop	r13
    188a:	cf 90       	pop	r12
  {
    _fast_fill_16(0,0, count_pxl);
  }
  else if (lcd_param.transfer_mode == TRANSFER_MODE_8)
  {
    _fast_fill_8(0, count_pxl);
    188c:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_fast_fill_8>
  else
  {
      unsigned long int i;
      for (i = 0; i < count_pxl; i++)
      {
        LCD_Write_Bus(0,0);
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	29 83       	std	Y+1, r18	; 0x01
    1896:	3a 83       	std	Y+2, r19	; 0x02
    1898:	4b 83       	std	Y+3, r20	; 0x03
    189a:	5c 83       	std	Y+4, r21	; 0x04
    189c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <LCD_Write_Bus>
    _fast_fill_8(0, count_pxl);
  }
  else
  {
      unsigned long int i;
      for (i = 0; i < count_pxl; i++)
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	c8 1a       	sub	r12, r24
    18a4:	d8 0a       	sbc	r13, r24
    18a6:	e8 0a       	sbc	r14, r24
    18a8:	f8 0a       	sbc	r15, r24
    18aa:	29 81       	ldd	r18, Y+1	; 0x01
    18ac:	3a 81       	ldd	r19, Y+2	; 0x02
    18ae:	4b 81       	ldd	r20, Y+3	; 0x03
    18b0:	5c 81       	ldd	r21, Y+4	; 0x04
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <LCD_ClrScreen+0xb8>
  LCD_SET_RS();
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
  {
    _fast_fill_16(0,0, count_pxl);
  }
  else if (lcd_param.transfer_mode == TRANSFER_MODE_8)
    18b4:	c1 2c       	mov	r12, r1
    18b6:	d1 2c       	mov	r13, r1
    18b8:	76 01       	movw	r14, r12
    _fast_fill_8(0, count_pxl);
  }
  else
  {
      unsigned long int i;
      for (i = 0; i < count_pxl; i++)
    18ba:	c2 16       	cp	r12, r18
    18bc:	d3 06       	cpc	r13, r19
    18be:	e4 06       	cpc	r14, r20
    18c0:	f5 06       	cpc	r15, r21
    18c2:	31 f7       	brne	.-52     	; 0x1890 <LCD_ClrScreen+0x8e>
      {
        LCD_Write_Bus(0,0);
      }
  }
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	08 95       	ret

000018da <LCD_FillScreen>:
  LCD_FillScreen(color);
}

//заполн€ет весь экран цветом
void LCD_FillScreen(unsigned int color)
{
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	00 d0       	rcall	.+0      	; 0x18ec <LCD_FillScreen+0x12>
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <LCD_FillScreen+0x14>
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	7c 01       	movw	r14, r24
  unsigned long int count_pxl;
  unsigned char ch, cl;
  
  ch = (unsigned char)(color >> 8);
    18f4:	c1 2c       	mov	r12, r1
    18f6:	1f 2d       	mov	r17, r15
  cl = (unsigned char)(color & 0xFF);
    18f8:	08 2f       	mov	r16, r24
  count_pxl = (unsigned long int)lcd_param.disp_x_size * (unsigned long int)lcd_param.disp_y_size;
    18fa:	a0 91 b1 00 	lds	r26, 0x00B1
    18fe:	b0 91 b2 00 	lds	r27, 0x00B2
    1902:	20 91 b3 00 	lds	r18, 0x00B3
    1906:	30 91 b4 00 	lds	r19, 0x00B4
    190a:	0e 94 9b 22 	call	0x4536	; 0x4536 <__umulhisi3>
    190e:	9b 01       	movw	r18, r22
    1910:	ac 01       	movw	r20, r24
  LCD_ClrXY();
    1912:	69 83       	std	Y+1, r22	; 0x01
    1914:	3a 83       	std	Y+2, r19	; 0x02
    1916:	4b 83       	std	Y+3, r20	; 0x03
    1918:	5c 83       	std	Y+4, r21	; 0x04
    191a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <LCD_ClrXY>
  LCD_SET_RS();
    191e:	c3 9a       	sbi	0x18, 3	; 24
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
    1920:	80 91 ba 00 	lds	r24, 0x00BA
    1924:	29 81       	ldd	r18, Y+1	; 0x01
    1926:	3a 81       	ldd	r19, Y+2	; 0x02
    1928:	4b 81       	ldd	r20, Y+3	; 0x03
    192a:	5c 81       	ldd	r21, Y+4	; 0x04
    192c:	81 11       	cpse	r24, r1
    192e:	12 c0       	rjmp	.+36     	; 0x1954 <LCD_FillScreen+0x7a>
  {
    _fast_fill_16(ch, cl, count_pxl);
    1930:	b7 01       	movw	r22, r14
    1932:	77 27       	eor	r23, r23
    1934:	8f 2d       	mov	r24, r15
    1936:	9c 2d       	mov	r25, r12
      for (i = 0; i < count_pxl; i++)
        {
          LCD_Write_Bus(ch,cl);
        }
    }
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
  count_pxl = (unsigned long int)lcd_param.disp_x_size * (unsigned long int)lcd_param.disp_y_size;
  LCD_ClrXY();
  LCD_SET_RS();
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
  {
    _fast_fill_16(ch, cl, count_pxl);
    1950:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <_fast_fill_16>
  } 
  else 
    if ((lcd_param.transfer_mode == TRANSFER_MODE_8) && (ch == cl)) 
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	31 f5       	brne	.+76     	; 0x19a4 <LCD_FillScreen+0xca>
    1958:	fe 10       	cpse	r15, r14
    195a:	24 c0       	rjmp	.+72     	; 0x19a4 <LCD_FillScreen+0xca>
    {
      _fast_fill_8(ch, count_pxl);
    195c:	ba 01       	movw	r22, r20
    195e:	a9 01       	movw	r20, r18
    1960:	8f 2d       	mov	r24, r15
    1962:	9c 2d       	mov	r25, r12
      for (i = 0; i < count_pxl; i++)
        {
          LCD_Write_Bus(ch,cl);
        }
    }
}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    _fast_fill_16(ch, cl, count_pxl);
  } 
  else 
    if ((lcd_param.transfer_mode == TRANSFER_MODE_8) && (ch == cl)) 
    {
      _fast_fill_8(ch, count_pxl);
    197c:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_fast_fill_8>
    {
      unsigned long int i;
      
      for (i = 0; i < count_pxl; i++)
        {
          LCD_Write_Bus(ch,cl);
    1980:	60 2f       	mov	r22, r16
    1982:	81 2f       	mov	r24, r17
    1984:	29 83       	std	Y+1, r18	; 0x01
    1986:	3a 83       	std	Y+2, r19	; 0x02
    1988:	4b 83       	std	Y+3, r20	; 0x03
    198a:	5c 83       	std	Y+4, r21	; 0x04
    198c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <LCD_Write_Bus>
    } 
    else 
    {
      unsigned long int i;
      
      for (i = 0; i < count_pxl; i++)
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	c8 1a       	sub	r12, r24
    1994:	d8 0a       	sbc	r13, r24
    1996:	e8 0a       	sbc	r14, r24
    1998:	f8 0a       	sbc	r15, r24
    199a:	29 81       	ldd	r18, Y+1	; 0x01
    199c:	3a 81       	ldd	r19, Y+2	; 0x02
    199e:	4b 81       	ldd	r20, Y+3	; 0x03
    19a0:	5c 81       	ldd	r21, Y+4	; 0x04
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <LCD_FillScreen+0xd0>
  if (lcd_param.transfer_mode == TRANSFER_MODE_16)
  {
    _fast_fill_16(ch, cl, count_pxl);
  } 
  else 
    if ((lcd_param.transfer_mode == TRANSFER_MODE_8) && (ch == cl)) 
    19a4:	c1 2c       	mov	r12, r1
    19a6:	d1 2c       	mov	r13, r1
    19a8:	76 01       	movw	r14, r12
    } 
    else 
    {
      unsigned long int i;
      
      for (i = 0; i < count_pxl; i++)
    19aa:	c2 16       	cp	r12, r18
    19ac:	d3 06       	cpc	r13, r19
    19ae:	e4 06       	cpc	r14, r20
    19b0:	f5 06       	cpc	r15, r21
    19b2:	31 f7       	brne	.-52     	; 0x1980 <LCD_FillScreen+0xa6>
        {
          LCD_Write_Bus(ch,cl);
        }
    }
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	08 95       	ret

000019ce <LCD_DrawLineBresen>:
  return ret;
}

// рисование линии по алгоритму Ѕрезенхэма
void LCD_DrawLineBresen(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
{
    19ce:	2f 92       	push	r2
    19d0:	3f 92       	push	r3
    19d2:	4f 92       	push	r4
    19d4:	5f 92       	push	r5
    19d6:	6f 92       	push	r6
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	6c 01       	movw	r12, r24
    19f4:	4a 01       	movw	r8, r20
    19f6:	59 01       	movw	r10, r18
  int deltax, deltay, error, deltaerr, x, y, incx, incy;
  
  if (x1 == x2)
    19f8:	84 17       	cp	r24, r20
    19fa:	95 07       	cpc	r25, r21
    19fc:	a9 f4       	brne	.+42     	; 0x1a28 <LCD_DrawLineBresen+0x5a>
  {
    incy = y1 < y2 ? 1 : -1;
    19fe:	62 17       	cp	r22, r18
    1a00:	73 07       	cpc	r23, r19
    1a02:	18 f4       	brcc	.+6      	; 0x1a0a <LCD_DrawLineBresen+0x3c>
    1a04:	c1 e0       	ldi	r28, 0x01	; 1
    1a06:	d0 e0       	ldi	r29, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <LCD_DrawLineBresen+0x40>
    1a0a:	cf ef       	ldi	r28, 0xFF	; 255
    1a0c:	df ef       	ldi	r29, 0xFF	; 255
    for(unsigned int y = y1; y != y2; y += incy)
    1a0e:	3b 01       	movw	r6, r22
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <LCD_DrawLineBresen+0x52>
      LCD_DrawPixel(x1, y, color);
    1a12:	a8 01       	movw	r20, r16
    1a14:	b3 01       	movw	r22, r6
    1a16:	c6 01       	movw	r24, r12
    1a18:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
  ret = (retH << 8) | retL;
  return ret;
}

// рисование линии по алгоритму Ѕрезенхэма
void LCD_DrawLineBresen(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
    1a1c:	6c 0e       	add	r6, r28
    1a1e:	7d 1e       	adc	r7, r29
  int deltax, deltay, error, deltaerr, x, y, incx, incy;
  
  if (x1 == x2)
  {
    incy = y1 < y2 ? 1 : -1;
    for(unsigned int y = y1; y != y2; y += incy)
    1a20:	6a 14       	cp	r6, r10
    1a22:	7b 04       	cpc	r7, r11
    1a24:	b1 f7       	brne	.-20     	; 0x1a12 <LCD_DrawLineBresen+0x44>
    1a26:	5d c0       	rjmp	.+186    	; 0x1ae2 <LCD_DrawLineBresen+0x114>
      LCD_DrawPixel(x1, y, color);
    return;
  }
  
  incx = x1 < x2 ? 1 : -1;
    1a28:	84 17       	cp	r24, r20
    1a2a:	95 07       	cpc	r25, r21
    1a2c:	20 f4       	brcc	.+8      	; 0x1a36 <LCD_DrawLineBresen+0x68>
    1a2e:	22 24       	eor	r2, r2
    1a30:	23 94       	inc	r2
    1a32:	31 2c       	mov	r3, r1
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <LCD_DrawLineBresen+0x6e>
    1a36:	22 24       	eor	r2, r2
    1a38:	2a 94       	dec	r2
    1a3a:	32 2c       	mov	r3, r2
  incy = y1 < y2 ? 1 : -1;
    1a3c:	6a 15       	cp	r22, r10
    1a3e:	7b 05       	cpc	r23, r11
    1a40:	20 f4       	brcc	.+8      	; 0x1a4a <LCD_DrawLineBresen+0x7c>
    1a42:	44 24       	eor	r4, r4
    1a44:	43 94       	inc	r4
    1a46:	51 2c       	mov	r5, r1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <LCD_DrawLineBresen+0x82>
    1a4a:	44 24       	eor	r4, r4
    1a4c:	4a 94       	dec	r4
    1a4e:	54 2c       	mov	r5, r4
  deltax = abs(x2 - x1);
    1a50:	e4 01       	movw	r28, r8
    1a52:	cc 19       	sub	r28, r12
    1a54:	dd 09       	sbc	r29, r13
    1a56:	d7 ff       	sbrs	r29, 7
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <LCD_DrawLineBresen+0x92>
    1a5a:	d1 95       	neg	r29
    1a5c:	c1 95       	neg	r28
    1a5e:	d1 09       	sbc	r29, r1
  deltay = abs(y2 - y1);
    1a60:	75 01       	movw	r14, r10
    1a62:	e6 1a       	sub	r14, r22
    1a64:	f7 0a       	sbc	r15, r23
    1a66:	f7 fe       	sbrs	r15, 7
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <LCD_DrawLineBresen+0xa2>
    1a6a:	f1 94       	neg	r15
    1a6c:	e1 94       	neg	r14
    1a6e:	f1 08       	sbc	r15, r1
  error = 0;
  
  if (deltax > deltay)
    1a70:	ec 16       	cp	r14, r28
    1a72:	fd 06       	cpc	r15, r29
    1a74:	dc f4       	brge	.+54     	; 0x1aac <LCD_DrawLineBresen+0xde>
  {
    deltaerr = deltay;
    y = y1;
    1a76:	3b 01       	movw	r6, r22
  
  incx = x1 < x2 ? 1 : -1;
  incy = y1 < y2 ? 1 : -1;
  deltax = abs(x2 - x1);
  deltay = abs(y2 - y1);
  error = 0;
    1a78:	a1 2c       	mov	r10, r1
    1a7a:	b1 2c       	mov	r11, r1
  
  if (deltax > deltay)
  {
    deltaerr = deltay;
    y = y1;
    for (int xx = x1; xx != x2; xx += incx)
    1a7c:	13 c0       	rjmp	.+38     	; 0x1aa4 <LCD_DrawLineBresen+0xd6>
    {
      LCD_DrawPixel(xx, y, color);
    1a7e:	a8 01       	movw	r20, r16
    1a80:	b3 01       	movw	r22, r6
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      error = error + deltaerr;
    1a88:	ae 0c       	add	r10, r14
    1a8a:	bf 1c       	adc	r11, r15
      if (2 * error >= deltax)
    1a8c:	c5 01       	movw	r24, r10
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	8c 17       	cp	r24, r28
    1a94:	9d 07       	cpc	r25, r29
    1a96:	24 f0       	brlt	.+8      	; 0x1aa0 <LCD_DrawLineBresen+0xd2>
      {
        y += incy;
    1a98:	64 0c       	add	r6, r4
    1a9a:	75 1c       	adc	r7, r5
        error -= deltax;
    1a9c:	ac 1a       	sub	r10, r28
    1a9e:	bd 0a       	sbc	r11, r29
  
  if (deltax > deltay)
  {
    deltaerr = deltay;
    y = y1;
    for (int xx = x1; xx != x2; xx += incx)
    1aa0:	c2 0c       	add	r12, r2
    1aa2:	d3 1c       	adc	r13, r3
    1aa4:	c8 14       	cp	r12, r8
    1aa6:	d9 04       	cpc	r13, r9
    1aa8:	51 f7       	brne	.-44     	; 0x1a7e <LCD_DrawLineBresen+0xb0>
    1aaa:	1b c0       	rjmp	.+54     	; 0x1ae2 <LCD_DrawLineBresen+0x114>
    }
  }
  else
  {
    deltaerr = deltax;
    x = x1;
    1aac:	46 01       	movw	r8, r12
    for (int yy = y1; yy != y2; yy += incy)
    1aae:	3b 01       	movw	r6, r22
  
  incx = x1 < x2 ? 1 : -1;
  incy = y1 < y2 ? 1 : -1;
  deltax = abs(x2 - x1);
  deltay = abs(y2 - y1);
  error = 0;
    1ab0:	c1 2c       	mov	r12, r1
    1ab2:	d1 2c       	mov	r13, r1
  }
  else
  {
    deltaerr = deltax;
    x = x1;
    for (int yy = y1; yy != y2; yy += incy)
    1ab4:	13 c0       	rjmp	.+38     	; 0x1adc <LCD_DrawLineBresen+0x10e>
    {
      LCD_DrawPixel(x, yy, color);
    1ab6:	a8 01       	movw	r20, r16
    1ab8:	b3 01       	movw	r22, r6
    1aba:	c4 01       	movw	r24, r8
    1abc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      error = error + deltaerr;
    1ac0:	cc 0e       	add	r12, r28
    1ac2:	dd 1e       	adc	r13, r29
      if (2 * error >= deltay)
    1ac4:	c6 01       	movw	r24, r12
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	8e 15       	cp	r24, r14
    1acc:	9f 05       	cpc	r25, r15
    1ace:	24 f0       	brlt	.+8      	; 0x1ad8 <LCD_DrawLineBresen+0x10a>
      {
        x += incx;
    1ad0:	82 0c       	add	r8, r2
    1ad2:	93 1c       	adc	r9, r3
        error -= deltay;
    1ad4:	ce 18       	sub	r12, r14
    1ad6:	df 08       	sbc	r13, r15
  }
  else
  {
    deltaerr = deltax;
    x = x1;
    for (int yy = y1; yy != y2; yy += incy)
    1ad8:	64 0c       	add	r6, r4
    1ada:	75 1c       	adc	r7, r5
    1adc:	6a 14       	cp	r6, r10
    1ade:	7b 04       	cpc	r7, r11
    1ae0:	51 f7       	brne	.-44     	; 0x1ab6 <LCD_DrawLineBresen+0xe8>
        x += incx;
        error -= deltay;
      }
    }
  }
}
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	7f 90       	pop	r7
    1afc:	6f 90       	pop	r6
    1afe:	5f 90       	pop	r5
    1b00:	4f 90       	pop	r4
    1b02:	3f 90       	pop	r3
    1b04:	2f 90       	pop	r2
    1b06:	08 95       	ret

00001b08 <LCD_DrawLine>:

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
{
    1b08:	2f 92       	push	r2
    1b0a:	3f 92       	push	r3
    1b0c:	4f 92       	push	r4
    1b0e:	5f 92       	push	r5
    1b10:	6f 92       	push	r6
    1b12:	7f 92       	push	r7
    1b14:	8f 92       	push	r8
    1b16:	9f 92       	push	r9
    1b18:	af 92       	push	r10
    1b1a:	bf 92       	push	r11
    1b1c:	cf 92       	push	r12
    1b1e:	df 92       	push	r13
    1b20:	ef 92       	push	r14
    1b22:	ff 92       	push	r15
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	6a 97       	sbiw	r28, 0x1a	; 26
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	2b 01       	movw	r4, r22
    1b3e:	3c 01       	movw	r6, r24
    1b40:	2d 83       	std	Y+5, r18	; 0x05
    1b42:	3e 83       	std	Y+6, r19	; 0x06
    1b44:	4f 83       	std	Y+7, r20	; 0x07
    1b46:	58 87       	std	Y+8, r21	; 0x08
    1b48:	e9 82       	std	Y+1, r14	; 0x01
    1b4a:	fa 82       	std	Y+2, r15	; 0x02
    1b4c:	0b 83       	std	Y+3, r16	; 0x03
    1b4e:	1c 83       	std	Y+4, r17	; 0x04
    1b50:	14 01       	movw	r2, r8
  
  //const long int increment_x = 10;
  //LCD_ClrXY();
  prev_x = 999;
  prev_y = 999;
  if (x1 == x2)
    1b52:	6e 15       	cp	r22, r14
    1b54:	7f 05       	cpc	r23, r15
    1b56:	80 07       	cpc	r24, r16
    1b58:	91 07       	cpc	r25, r17
    1b5a:	a9 f5       	brne	.+106    	; 0x1bc6 <LCD_DrawLine+0xbe>
  {
    for(unsigned int i = (y1 < y2 ? y1 : y2); i <= (y1 < y2 ? y2 : y1); i++)
    1b5c:	9a 2d       	mov	r25, r10
    1b5e:	8b 2d       	mov	r24, r11
    1b60:	2a 15       	cp	r18, r10
    1b62:	3b 05       	cpc	r19, r11
    1b64:	4c 05       	cpc	r20, r12
    1b66:	5d 05       	cpc	r21, r13
    1b68:	14 f4       	brge	.+4      	; 0x1b6e <LCD_DrawLine+0x66>
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6e:	e9 2e       	mov	r14, r25
    1b70:	f8 2e       	mov	r15, r24
    1b72:	00 e0       	ldi	r16, 0x00	; 0
    1b74:	10 e0       	ldi	r17, 0x00	; 0
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <LCD_DrawLine+0x78>
      LCD_DrawPixel(x1, i, color);
    1b78:	a1 01       	movw	r20, r2
    1b7a:	c2 01       	movw	r24, r4
    1b7c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
  }
}

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
    1b80:	b8 01       	movw	r22, r16
    1b82:	6e 0d       	add	r22, r14
    1b84:	7f 1d       	adc	r23, r15
    1b86:	0f 5f       	subi	r16, 0xFF	; 255
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
  //LCD_ClrXY();
  prev_x = 999;
  prev_y = 999;
  if (x1 == x2)
  {
    for(unsigned int i = (y1 < y2 ? y1 : y2); i <= (y1 < y2 ? y2 : y1); i++)
    1b8a:	9b 01       	movw	r18, r22
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	29 83       	std	Y+1, r18	; 0x01
    1b92:	3a 83       	std	Y+2, r19	; 0x02
    1b94:	4b 83       	std	Y+3, r20	; 0x03
    1b96:	5c 83       	std	Y+4, r21	; 0x04
    1b98:	d6 01       	movw	r26, r12
    1b9a:	c5 01       	movw	r24, r10
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ba2:	58 85       	ldd	r21, Y+8	; 0x08
    1ba4:	a2 16       	cp	r10, r18
    1ba6:	b3 06       	cpc	r11, r19
    1ba8:	c4 06       	cpc	r12, r20
    1baa:	d5 06       	cpc	r13, r21
    1bac:	14 f4       	brge	.+4      	; 0x1bb2 <LCD_DrawLine+0xaa>
    1bae:	da 01       	movw	r26, r20
    1bb0:	c9 01       	movw	r24, r18
    1bb2:	29 81       	ldd	r18, Y+1	; 0x01
    1bb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bba:	82 17       	cp	r24, r18
    1bbc:	93 07       	cpc	r25, r19
    1bbe:	a4 07       	cpc	r26, r20
    1bc0:	b5 07       	cpc	r27, r21
    1bc2:	d4 f6       	brge	.-76     	; 0x1b78 <LCD_DrawLine+0x70>
    1bc4:	a0 c1       	rjmp	.+832    	; 0x1f06 <LCD_DrawLine+0x3fe>
      LCD_DrawPixel(x1, i, color);
  }
  else if (y1 == y2)
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	af 81       	ldd	r26, Y+7	; 0x07
    1bcc:	b8 85       	ldd	r27, Y+8	; 0x08
    1bce:	8a 15       	cp	r24, r10
    1bd0:	9b 05       	cpc	r25, r11
    1bd2:	ac 05       	cpc	r26, r12
    1bd4:	bd 05       	cpc	r27, r13
    1bd6:	a9 f5       	brne	.+106    	; 0x1c42 <LCD_DrawLine+0x13a>
  {
    for (unsigned int i = (x1 < x2 ? x1 : x2); i <= (x1 < x2 ? x2 : x1); i++)
    1bd8:	99 81       	ldd	r25, Y+1	; 0x01
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	c9 80       	ldd	r12, Y+1	; 0x01
    1bde:	da 80       	ldd	r13, Y+2	; 0x02
    1be0:	eb 80       	ldd	r14, Y+3	; 0x03
    1be2:	fc 80       	ldd	r15, Y+4	; 0x04
    1be4:	4c 14       	cp	r4, r12
    1be6:	5d 04       	cpc	r5, r13
    1be8:	6e 04       	cpc	r6, r14
    1bea:	7f 04       	cpc	r7, r15
    1bec:	14 f4       	brge	.+4      	; 0x1bf2 <LCD_DrawLine+0xea>
    1bee:	94 2d       	mov	r25, r4
    1bf0:	85 2d       	mov	r24, r5
    1bf2:	e9 2e       	mov	r14, r25
    1bf4:	f8 2e       	mov	r15, r24
    1bf6:	97 01       	movw	r18, r14
    1bf8:	00 e0       	ldi	r16, 0x00	; 0
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <LCD_DrawLine+0x108>
      LCD_DrawPixel(i, y1, color);
    1bfe:	a1 01       	movw	r20, r2
    1c00:	6d 81       	ldd	r22, Y+5	; 0x05
    1c02:	7e 81       	ldd	r23, Y+6	; 0x06
    1c04:	29 8f       	std	Y+25, r18	; 0x19
    1c06:	3a 8f       	std	Y+26, r19	; 0x1a
    1c08:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
    1c0c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1c0e:	29 8d       	ldd	r18, Y+25	; 0x19
  }
}

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
    1c10:	c8 01       	movw	r24, r16
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	0f 5f       	subi	r16, 0xFF	; 255
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    for(unsigned int i = (y1 < y2 ? y1 : y2); i <= (y1 < y2 ? y2 : y1); i++)
      LCD_DrawPixel(x1, i, color);
  }
  else if (y1 == y2)
  {
    for (unsigned int i = (x1 < x2 ? x1 : x2); i <= (x1 < x2 ? x2 : x1); i++)
    1c1a:	4c 01       	movw	r8, r24
    1c1c:	a1 2c       	mov	r10, r1
    1c1e:	b1 2c       	mov	r11, r1
    1c20:	49 81       	ldd	r20, Y+1	; 0x01
    1c22:	5a 81       	ldd	r21, Y+2	; 0x02
    1c24:	6b 81       	ldd	r22, Y+3	; 0x03
    1c26:	7c 81       	ldd	r23, Y+4	; 0x04
    1c28:	44 15       	cp	r20, r4
    1c2a:	55 05       	cpc	r21, r5
    1c2c:	66 05       	cpc	r22, r6
    1c2e:	77 05       	cpc	r23, r7
    1c30:	14 f4       	brge	.+4      	; 0x1c36 <LCD_DrawLine+0x12e>
    1c32:	b3 01       	movw	r22, r6
    1c34:	a2 01       	movw	r20, r4
    1c36:	48 15       	cp	r20, r8
    1c38:	59 05       	cpc	r21, r9
    1c3a:	6a 05       	cpc	r22, r10
    1c3c:	7b 05       	cpc	r23, r11
    1c3e:	fc f6       	brge	.-66     	; 0x1bfe <LCD_DrawLine+0xf6>
    1c40:	62 c1       	rjmp	.+708    	; 0x1f06 <LCD_DrawLine+0x3fe>
    1c42:	86 01       	movw	r16, r12
    1c44:	75 01       	movw	r14, r10
    1c46:	2d 81       	ldd	r18, Y+5	; 0x05
    1c48:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4a:	4f 81       	ldd	r20, Y+7	; 0x07
    1c4c:	58 85       	ldd	r21, Y+8	; 0x08
    1c4e:	e2 1a       	sub	r14, r18
    1c50:	f3 0a       	sbc	r15, r19
    1c52:	04 0b       	sbc	r16, r20
    1c54:	15 0b       	sbc	r17, r21
      LCD_DrawPixel(i, y1, color);
  }
  else if (x1 > x2)
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c5e:	84 15       	cp	r24, r4
    1c60:	95 05       	cpc	r25, r5
    1c62:	a6 05       	cpc	r26, r6
    1c64:	b7 05       	cpc	r27, r7
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <LCD_DrawLine+0x162>
    1c68:	b9 c0       	rjmp	.+370    	; 0x1ddc <LCD_DrawLine+0x2d4>
  {
    for (long int i = x2 * increment_x; i <= x1 * increment_x; i++)
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	ad 01       	movw	r20, r26
    1c6e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c70:	78 a9       	ldd	r23, Y+48	; 0x30
    1c72:	89 a9       	ldd	r24, Y+49	; 0x31
    1c74:	9a a9       	ldd	r25, Y+50	; 0x32
    1c76:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1c7a:	4b 01       	movw	r8, r22
    1c7c:	5c 01       	movw	r10, r24
    1c7e:	a3 01       	movw	r20, r6
    1c80:	92 01       	movw	r18, r4
    1c82:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c84:	78 a9       	ldd	r23, Y+48	; 0x30
    1c86:	89 a9       	ldd	r24, Y+49	; 0x31
    1c88:	9a a9       	ldd	r25, Y+50	; 0x32
    1c8a:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1c8e:	69 87       	std	Y+9, r22	; 0x09
    1c90:	7a 87       	std	Y+10, r23	; 0x0a
    1c92:	8b 87       	std	Y+11, r24	; 0x0b
    1c94:	9c 87       	std	Y+12, r25	; 0x0c
    {
      y = (((x1 * increment_x - i) * (y2 * increment_x - y1 * increment_x)) / (x1 * increment_x - x2 * increment_x) + y1 * increment_x) / increment_x;
    1c96:	a8 01       	movw	r20, r16
    1c98:	97 01       	movw	r18, r14
    1c9a:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c9c:	78 a9       	ldd	r23, Y+48	; 0x30
    1c9e:	89 a9       	ldd	r24, Y+49	; 0x31
    1ca0:	9a a9       	ldd	r25, Y+50	; 0x32
    1ca2:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1ca6:	6b 01       	movw	r12, r22
    1ca8:	7c 01       	movw	r14, r24
    1caa:	a3 01       	movw	r20, r6
    1cac:	92 01       	movw	r18, r4
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb6:	28 1b       	sub	r18, r24
    1cb8:	39 0b       	sbc	r19, r25
    1cba:	4a 0b       	sbc	r20, r26
    1cbc:	5b 0b       	sbc	r21, r27
    1cbe:	6f a5       	ldd	r22, Y+47	; 0x2f
    1cc0:	78 a9       	ldd	r23, Y+48	; 0x30
    1cc2:	89 a9       	ldd	r24, Y+49	; 0x31
    1cc4:	9a a9       	ldd	r25, Y+50	; 0x32
    1cc6:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1cca:	6d 87       	std	Y+13, r22	; 0x0d
    1ccc:	7e 87       	std	Y+14, r23	; 0x0e
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
    1cd0:	98 8b       	std	Y+16, r25	; 0x10
    1cd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd6:	4f 81       	ldd	r20, Y+7	; 0x07
    1cd8:	58 85       	ldd	r21, Y+8	; 0x08
    1cda:	6f a5       	ldd	r22, Y+47	; 0x2f
    1cdc:	78 a9       	ldd	r23, Y+48	; 0x30
    1cde:	89 a9       	ldd	r24, Y+49	; 0x31
    1ce0:	9a a9       	ldd	r25, Y+50	; 0x32
    1ce2:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	3c 01       	movw	r6, r24
  }
}

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
    1cea:	22 27       	eor	r18, r18
    1cec:	33 27       	eor	r19, r19
    1cee:	a9 01       	movw	r20, r18
    1cf0:	2c 19       	sub	r18, r12
    1cf2:	3d 09       	sbc	r19, r13
    1cf4:	4e 09       	sbc	r20, r14
    1cf6:	5f 09       	sbc	r21, r15
    1cf8:	29 8b       	std	Y+17, r18	; 0x11
    1cfa:	3a 8b       	std	Y+18, r19	; 0x12
    1cfc:	4b 8b       	std	Y+19, r20	; 0x13
    1cfe:	5c 8b       	std	Y+20, r21	; 0x14
    1d00:	29 85       	ldd	r18, Y+9	; 0x09
    1d02:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d04:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d06:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d08:	28 19       	sub	r18, r8
    1d0a:	39 09       	sbc	r19, r9
    1d0c:	4a 09       	sbc	r20, r10
    1d0e:	5b 09       	sbc	r21, r11
    1d10:	c7 01       	movw	r24, r14
    1d12:	b6 01       	movw	r22, r12
    1d14:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1d18:	6d 8b       	std	Y+21, r22	; 0x15
    1d1a:	7e 8b       	std	Y+22, r23	; 0x16
    1d1c:	8f 8b       	std	Y+23, r24	; 0x17
    1d1e:	98 8f       	std	Y+24, r25	; 0x18
    1d20:	c1 2c       	mov	r12, r1
    1d22:	d1 2c       	mov	r13, r1
    1d24:	76 01       	movw	r14, r12
  unsigned int prev_x, prev_y;
  
  //const long int increment_x = 10;
  //LCD_ClrXY();
  prev_x = 999;
  prev_y = 999;
    1d26:	47 ee       	ldi	r20, 0xE7	; 231
    1d28:	53 e0       	ldi	r21, 0x03	; 3
    1d2a:	5e 83       	std	Y+6, r21	; 0x06
    1d2c:	4d 83       	std	Y+5, r20	; 0x05
  unsigned int y;
  unsigned int prev_x, prev_y;
  
  //const long int increment_x = 10;
  //LCD_ClrXY();
  prev_x = 999;
    1d2e:	87 ee       	ldi	r24, 0xE7	; 231
    1d30:	93 e0       	ldi	r25, 0x03	; 3
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	47 c0       	rjmp	.+142    	; 0x1dc6 <LCD_DrawLine+0x2be>
  }
}

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	6c 0d       	add	r22, r12
    1d42:	7d 1d       	adc	r23, r13
    1d44:	8e 1d       	adc	r24, r14
    1d46:	9f 1d       	adc	r25, r15
  }
  else if (x1 > x2)
  {
    for (long int i = x2 * increment_x; i <= x1 * increment_x; i++)
    {
      y = (((x1 * increment_x - i) * (y2 * increment_x - y1 * increment_x)) / (x1 * increment_x - x2 * increment_x) + y1 * increment_x) / increment_x;
    1d48:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d4a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d4c:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d4e:	58 89       	ldd	r21, Y+16	; 0x10
    1d50:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1d54:	24 0d       	add	r18, r4
    1d56:	35 1d       	adc	r19, r5
    1d58:	46 1d       	adc	r20, r6
    1d5a:	57 1d       	adc	r21, r7
    1d5c:	ca 01       	movw	r24, r20
    1d5e:	b9 01       	movw	r22, r18
    1d60:	2f a5       	ldd	r18, Y+47	; 0x2f
    1d62:	38 a9       	ldd	r19, Y+48	; 0x30
    1d64:	49 a9       	ldd	r20, Y+49	; 0x31
    1d66:	5a a9       	ldd	r21, Y+50	; 0x32
    1d68:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1d6c:	89 01       	movw	r16, r18
      if ((prev_x != (unsigned int) (i / increment_x)) || (prev_y != y))
    1d6e:	c5 01       	movw	r24, r10
    1d70:	b4 01       	movw	r22, r8
    1d72:	2f a5       	ldd	r18, Y+47	; 0x2f
    1d74:	38 a9       	ldd	r19, Y+48	; 0x30
    1d76:	49 a9       	ldd	r20, Y+49	; 0x31
    1d78:	5a a9       	ldd	r21, Y+50	; 0x32
    1d7a:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1d7e:	a9 81       	ldd	r26, Y+1	; 0x01
    1d80:	ba 81       	ldd	r27, Y+2	; 0x02
    1d82:	a2 17       	cp	r26, r18
    1d84:	b3 07       	cpc	r27, r19
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <LCD_DrawLine+0x28a>
    1d88:	4d 81       	ldd	r20, Y+5	; 0x05
    1d8a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d8c:	40 17       	cp	r20, r16
    1d8e:	51 07       	cpc	r21, r17
    1d90:	69 f0       	breq	.+26     	; 0x1dac <LCD_DrawLine+0x2a4>
      {
        prev_x = (unsigned int) (i / increment_x);
        prev_y = y;
        LCD_DrawPixel(prev_x, prev_y, color);
    1d92:	a1 01       	movw	r20, r2
    1d94:	b8 01       	movw	r22, r16
    1d96:	c9 01       	movw	r24, r18
    1d98:	29 8f       	std	Y+25, r18	; 0x19
    1d9a:	3a 8f       	std	Y+26, r19	; 0x1a
    1d9c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
  }
  else if (x1 > x2)
  {
    for (long int i = x2 * increment_x; i <= x1 * increment_x; i++)
    {
      y = (((x1 * increment_x - i) * (y2 * increment_x - y1 * increment_x)) / (x1 * increment_x - x2 * increment_x) + y1 * increment_x) / increment_x;
    1da0:	1e 83       	std	Y+6, r17	; 0x06
    1da2:	0d 83       	std	Y+5, r16	; 0x05
      if ((prev_x != (unsigned int) (i / increment_x)) || (prev_y != y))
    1da4:	29 8d       	ldd	r18, Y+25	; 0x19
    1da6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1da8:	3a 83       	std	Y+2, r19	; 0x02
    1daa:	29 83       	std	Y+1, r18	; 0x01
    for (unsigned int i = (x1 < x2 ? x1 : x2); i <= (x1 < x2 ? x2 : x1); i++)
      LCD_DrawPixel(i, y1, color);
  }
  else if (x1 > x2)
  {
    for (long int i = x2 * increment_x; i <= x1 * increment_x; i++)
    1dac:	5f ef       	ldi	r21, 0xFF	; 255
    1dae:	85 1a       	sub	r8, r21
    1db0:	95 0a       	sbc	r9, r21
    1db2:	a5 0a       	sbc	r10, r21
    1db4:	b5 0a       	sbc	r11, r21
    1db6:	89 89       	ldd	r24, Y+17	; 0x11
    1db8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dba:	ab 89       	ldd	r26, Y+19	; 0x13
    1dbc:	bc 89       	ldd	r27, Y+20	; 0x14
    1dbe:	c8 0e       	add	r12, r24
    1dc0:	d9 1e       	adc	r13, r25
    1dc2:	ea 1e       	adc	r14, r26
    1dc4:	fb 1e       	adc	r15, r27
    1dc6:	29 85       	ldd	r18, Y+9	; 0x09
    1dc8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dca:	4b 85       	ldd	r20, Y+11	; 0x0b
    1dcc:	5c 85       	ldd	r21, Y+12	; 0x0c
    1dce:	28 15       	cp	r18, r8
    1dd0:	39 05       	cpc	r19, r9
    1dd2:	4a 05       	cpc	r20, r10
    1dd4:	5b 05       	cpc	r21, r11
    1dd6:	0c f0       	brlt	.+2      	; 0x1dda <LCD_DrawLine+0x2d2>
    1dd8:	af cf       	rjmp	.-162    	; 0x1d38 <LCD_DrawLine+0x230>
    1dda:	95 c0       	rjmp	.+298    	; 0x1f06 <LCD_DrawLine+0x3fe>
      }
    }
  }
  else
  {
    for (long int  i = x1 * increment_x; i <= x2 * increment_x; i++)
    1ddc:	a3 01       	movw	r20, r6
    1dde:	92 01       	movw	r18, r4
    1de0:	6f a5       	ldd	r22, Y+47	; 0x2f
    1de2:	78 a9       	ldd	r23, Y+48	; 0x30
    1de4:	89 a9       	ldd	r24, Y+49	; 0x31
    1de6:	9a a9       	ldd	r25, Y+50	; 0x32
    1de8:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1dec:	5b 01       	movw	r10, r22
    1dee:	6c 01       	movw	r12, r24
    1df0:	29 81       	ldd	r18, Y+1	; 0x01
    1df2:	3a 81       	ldd	r19, Y+2	; 0x02
    1df4:	4b 81       	ldd	r20, Y+3	; 0x03
    1df6:	5c 81       	ldd	r21, Y+4	; 0x04
    1df8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1dfa:	78 a9       	ldd	r23, Y+48	; 0x30
    1dfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1dfe:	9a a9       	ldd	r25, Y+50	; 0x32
    1e00:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1e04:	69 87       	std	Y+9, r22	; 0x09
    1e06:	7a 87       	std	Y+10, r23	; 0x0a
    1e08:	8b 87       	std	Y+11, r24	; 0x0b
    1e0a:	9c 87       	std	Y+12, r25	; 0x0c
    {
      y = (((i - x1 * increment_x) * (y2 * increment_x - y1 * increment_x)) / (x2 * increment_x - x1 * increment_x) + y1 * increment_x) / increment_x;
    1e0c:	24 19       	sub	r18, r4
    1e0e:	35 09       	sbc	r19, r5
    1e10:	46 09       	sbc	r20, r6
    1e12:	57 09       	sbc	r21, r7
    1e14:	6f a5       	ldd	r22, Y+47	; 0x2f
    1e16:	78 a9       	ldd	r23, Y+48	; 0x30
    1e18:	89 a9       	ldd	r24, Y+49	; 0x31
    1e1a:	9a a9       	ldd	r25, Y+50	; 0x32
    1e1c:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1e20:	69 83       	std	Y+1, r22	; 0x01
    1e22:	7a 83       	std	Y+2, r23	; 0x02
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e2e:	58 85       	ldd	r21, Y+8	; 0x08
    1e30:	6f a5       	ldd	r22, Y+47	; 0x2f
    1e32:	78 a9       	ldd	r23, Y+48	; 0x30
    1e34:	89 a9       	ldd	r24, Y+49	; 0x31
    1e36:	9a a9       	ldd	r25, Y+50	; 0x32
    1e38:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1e3c:	6d 83       	std	Y+5, r22	; 0x05
    1e3e:	7e 83       	std	Y+6, r23	; 0x06
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a8 01       	movw	r20, r16
    1e46:	97 01       	movw	r18, r14
    1e48:	6f a5       	ldd	r22, Y+47	; 0x2f
    1e4a:	78 a9       	ldd	r23, Y+48	; 0x30
    1e4c:	89 a9       	ldd	r24, Y+49	; 0x31
    1e4e:	9a a9       	ldd	r25, Y+50	; 0x32
    1e50:	0e 94 2d 22 	call	0x445a	; 0x445a <__mulsi3>
    1e54:	6d 87       	std	Y+13, r22	; 0x0d
    1e56:	7e 87       	std	Y+14, r23	; 0x0e
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
    1e5a:	98 8b       	std	Y+16, r25	; 0x10
  }
}

// рисует пр€мую по координатам [(x1, y1);(x2, y2)]
// y=((x-x1)*(y2-y1))/(x2-x1)+y1
void LCD_DrawLine(long int x1, long int y1, long int x2, long int y2, unsigned int color, long int increment_x)
    1e5c:	41 2c       	mov	r4, r1
    1e5e:	51 2c       	mov	r5, r1
    1e60:	32 01       	movw	r6, r4
  unsigned int prev_x, prev_y;
  
  //const long int increment_x = 10;
  //LCD_ClrXY();
  prev_x = 999;
  prev_y = 999;
    1e62:	17 ee       	ldi	r17, 0xE7	; 231
    1e64:	81 2e       	mov	r8, r17
    1e66:	13 e0       	ldi	r17, 0x03	; 3
    1e68:	91 2e       	mov	r9, r17
  unsigned int y;
  unsigned int prev_x, prev_y;
  
  //const long int increment_x = 10;
  //LCD_ClrXY();
  prev_x = 999;
    1e6a:	07 ee       	ldi	r16, 0xE7	; 231
    1e6c:	e0 2e       	mov	r14, r16
    1e6e:	03 e0       	ldi	r16, 0x03	; 3
    1e70:	f0 2e       	mov	r15, r16
    1e72:	3f c0       	rjmp	.+126    	; 0x1ef2 <LCD_DrawLine+0x3ea>
  }
  else
  {
    for (long int  i = x1 * increment_x; i <= x2 * increment_x; i++)
    {
      y = (((i - x1 * increment_x) * (y2 * increment_x - y1 * increment_x)) / (x2 * increment_x - x1 * increment_x) + y1 * increment_x) / increment_x;
    1e74:	c3 01       	movw	r24, r6
    1e76:	b2 01       	movw	r22, r4
    1e78:	29 81       	ldd	r18, Y+1	; 0x01
    1e7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e7c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e7e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e80:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	af 81       	ldd	r26, Y+7	; 0x07
    1e8a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e8c:	28 0f       	add	r18, r24
    1e8e:	39 1f       	adc	r19, r25
    1e90:	4a 1f       	adc	r20, r26
    1e92:	5b 1f       	adc	r21, r27
    1e94:	ca 01       	movw	r24, r20
    1e96:	b9 01       	movw	r22, r18
    1e98:	2f a5       	ldd	r18, Y+47	; 0x2f
    1e9a:	38 a9       	ldd	r19, Y+48	; 0x30
    1e9c:	49 a9       	ldd	r20, Y+49	; 0x31
    1e9e:	5a a9       	ldd	r21, Y+50	; 0x32
    1ea0:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1ea4:	89 01       	movw	r16, r18
      if ((prev_x != (unsigned int) (i / increment_x)) || (prev_y != y))
    1ea6:	c6 01       	movw	r24, r12
    1ea8:	b5 01       	movw	r22, r10
    1eaa:	2f a5       	ldd	r18, Y+47	; 0x2f
    1eac:	38 a9       	ldd	r19, Y+48	; 0x30
    1eae:	49 a9       	ldd	r20, Y+49	; 0x31
    1eb0:	5a a9       	ldd	r21, Y+50	; 0x32
    1eb2:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__divmodsi4>
    1eb6:	e2 16       	cp	r14, r18
    1eb8:	f3 06       	cpc	r15, r19
    1eba:	19 f4       	brne	.+6      	; 0x1ec2 <LCD_DrawLine+0x3ba>
    1ebc:	80 16       	cp	r8, r16
    1ebe:	91 06       	cpc	r9, r17
    1ec0:	59 f0       	breq	.+22     	; 0x1ed8 <LCD_DrawLine+0x3d0>
      {
        prev_x = (unsigned int) (i / increment_x);
        prev_y = y;
        LCD_DrawPixel(prev_x, prev_y, color);
    1ec2:	a1 01       	movw	r20, r2
    1ec4:	b8 01       	movw	r22, r16
    1ec6:	c9 01       	movw	r24, r18
    1ec8:	29 8f       	std	Y+25, r18	; 0x19
    1eca:	3a 8f       	std	Y+26, r19	; 0x1a
    1ecc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
  }
  else
  {
    for (long int  i = x1 * increment_x; i <= x2 * increment_x; i++)
    {
      y = (((i - x1 * increment_x) * (y2 * increment_x - y1 * increment_x)) / (x2 * increment_x - x1 * increment_x) + y1 * increment_x) / increment_x;
    1ed0:	48 01       	movw	r8, r16
      if ((prev_x != (unsigned int) (i / increment_x)) || (prev_y != y))
    1ed2:	29 8d       	ldd	r18, Y+25	; 0x19
    1ed4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1ed6:	79 01       	movw	r14, r18
      }
    }
  }
  else
  {
    for (long int  i = x1 * increment_x; i <= x2 * increment_x; i++)
    1ed8:	9f ef       	ldi	r25, 0xFF	; 255
    1eda:	a9 1a       	sub	r10, r25
    1edc:	b9 0a       	sbc	r11, r25
    1ede:	c9 0a       	sbc	r12, r25
    1ee0:	d9 0a       	sbc	r13, r25
    1ee2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ee4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ee6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ee8:	58 89       	ldd	r21, Y+16	; 0x10
    1eea:	42 0e       	add	r4, r18
    1eec:	53 1e       	adc	r5, r19
    1eee:	64 1e       	adc	r6, r20
    1ef0:	75 1e       	adc	r7, r21
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ef8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1efa:	8a 15       	cp	r24, r10
    1efc:	9b 05       	cpc	r25, r11
    1efe:	ac 05       	cpc	r26, r12
    1f00:	bd 05       	cpc	r27, r13
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <LCD_DrawLine+0x3fe>
    1f04:	b7 cf       	rjmp	.-146    	; 0x1e74 <LCD_DrawLine+0x36c>
        LCD_DrawPixel(prev_x, prev_y, color);
      }        
    }  
  }  
  
}
    1f06:	6a 96       	adiw	r28, 0x1a	; 26
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	9f 90       	pop	r9
    1f28:	8f 90       	pop	r8
    1f2a:	7f 90       	pop	r7
    1f2c:	6f 90       	pop	r6
    1f2e:	5f 90       	pop	r5
    1f30:	4f 90       	pop	r4
    1f32:	3f 90       	pop	r3
    1f34:	2f 90       	pop	r2
    1f36:	08 95       	ret

00001f38 <LCD_DrawArc>:
// x, y - центр окружности описывающей дугу
// r - радиус окружности
// b_аngle - начальный угол дуги в грудусах
// angle - общий угол дуги в гружусах
void LCD_DrawArc(int x, int y, int r, unsigned int b_angle, unsigned int angle, unsigned int color)
{
    1f38:	2f 92       	push	r2
    1f3a:	3f 92       	push	r3
    1f3c:	4f 92       	push	r4
    1f3e:	5f 92       	push	r5
    1f40:	6f 92       	push	r6
    1f42:	7f 92       	push	r7
    1f44:	8f 92       	push	r8
    1f46:	9f 92       	push	r9
    1f48:	af 92       	push	r10
    1f4a:	bf 92       	push	r11
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	ad 97       	sbiw	r28, 0x2d	; 45
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f6e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f70:	7a 87       	std	Y+10, r23	; 0x0a
    1f72:	69 87       	std	Y+9, r22	; 0x09
    1f74:	5f 8f       	std	Y+31, r21	; 0x1f
    1f76:	4e 8f       	std	Y+30, r20	; 0x1e
    1f78:	39 01       	movw	r6, r18
    1f7a:	1a 83       	std	Y+2, r17	; 0x02
    1f7c:	09 83       	std	Y+1, r16	; 0x01
    1f7e:	f9 8e       	std	Y+25, r15	; 0x19
    1f80:	e8 8e       	std	Y+24, r14	; 0x18
  unsigned int prev_x, prev_y;
  unsigned int end_angle;
  const float increment_x = 0.5;
  
  // определ€ем начальное значение проекции по оси X
  b_x = x + r * cos(b_angle * M_PI / 180);
    1f82:	bc 01       	movw	r22, r24
    1f84:	88 27       	eor	r24, r24
    1f86:	77 fd       	sbrc	r23, 7
    1f88:	80 95       	com	r24
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
    1f94:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1f96:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1f98:	b9 01       	movw	r22, r18
    1f9a:	88 27       	eor	r24, r24
    1f9c:	77 fd       	sbrc	r23, 7
    1f9e:	80 95       	com	r24
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    1fa6:	4b 01       	movw	r8, r22
    1fa8:	5c 01       	movw	r10, r24
    1faa:	b3 01       	movw	r22, r6
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    1fb4:	2b ed       	ldi	r18, 0xDB	; 219
    1fb6:	3f e0       	ldi	r19, 0x0F	; 15
    1fb8:	49 e4       	ldi	r20, 0x49	; 73
    1fba:	50 e4       	ldi	r21, 0x40	; 64
    1fbc:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	44 e3       	ldi	r20, 0x34	; 52
    1fc6:	53 e4       	ldi	r21, 0x43	; 67
    1fc8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divsf3>
    1fcc:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <cos>
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	c5 01       	movw	r24, r10
    1fd6:	b4 01       	movw	r22, r8
    1fd8:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    1fe8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    1fec:	8b 01       	movw	r16, r22
  
  // определ€ем конечное значение по оси x
  end_angle = b_angle + angle;
    1fee:	49 81       	ldd	r20, Y+1	; 0x01
    1ff0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ff2:	46 0d       	add	r20, r6
    1ff4:	57 1d       	adc	r21, r7
    1ff6:	5a 83       	std	Y+2, r21	; 0x02
    1ff8:	49 83       	std	Y+1, r20	; 0x01
  if (end_angle > 360)
    1ffa:	49 36       	cpi	r20, 0x69	; 105
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	58 07       	cpc	r21, r24
    2000:	20 f0       	brcs	.+8      	; 0x200a <LCD_DrawArc+0xd2>
    end_angle -= 360;
    2002:	48 56       	subi	r20, 0x68	; 104
    2004:	51 40       	sbci	r21, 0x01	; 1
    2006:	5a 83       	std	Y+2, r21	; 0x02
    2008:	49 83       	std	Y+1, r20	; 0x01
  e_x = x + r * cos(end_angle * M_PI / 180);
    200a:	a9 81       	ldd	r26, Y+1	; 0x01
    200c:	ba 81       	ldd	r27, Y+2	; 0x02
    200e:	bd 01       	movw	r22, r26
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    2018:	2b ed       	ldi	r18, 0xDB	; 219
    201a:	3f e0       	ldi	r19, 0x0F	; 15
    201c:	49 e4       	ldi	r20, 0x49	; 73
    201e:	50 e4       	ldi	r21, 0x40	; 64
    2020:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	44 e3       	ldi	r20, 0x34	; 52
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divsf3>
    2030:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <cos>
    2034:	9b 01       	movw	r18, r22
    2036:	ac 01       	movw	r20, r24
    2038:	c5 01       	movw	r24, r10
    203a:	b4 01       	movw	r22, r8
    203c:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    2040:	9b 01       	movw	r18, r22
    2042:	ac 01       	movw	r20, r24
    2044:	c7 01       	movw	r24, r14
    2046:	b6 01       	movw	r22, r12
    2048:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    204c:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    2050:	7a 8b       	std	Y+18, r23	; 0x12
    2052:	69 8b       	std	Y+17, r22	; 0x11
    2054:	b8 01       	movw	r22, r16
    2056:	88 27       	eor	r24, r24
    2058:	77 fd       	sbrc	r23, 7
    205a:	80 95       	com	r24
    205c:	98 2f       	mov	r25, r24
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
  if (b_angle <= 180)
  {
    if ((end_angle > 180) || (end_angle < b_angle))
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
  if (b_angle <= 180)
    2062:	b5 eb       	ldi	r27, 0xB5	; 181
    2064:	6b 16       	cp	r6, r27
    2066:	71 04       	cpc	r7, r1
    2068:	08 f0       	brcs	.+2      	; 0x206c <LCD_DrawArc+0x134>
    206a:	cb c2       	rjmp	.+1430   	; 0x2602 <LCD_DrawArc+0x6ca>
  {
    if ((end_angle > 180) || (end_angle < b_angle))
    206c:	e5 3b       	cpi	r30, 0xB5	; 181
    206e:	f1 05       	cpc	r31, r1
    2070:	20 f4       	brcc	.+8      	; 0x207a <LCD_DrawArc+0x142>
    2072:	e6 15       	cp	r30, r6
    2074:	f7 05       	cpc	r31, r7
    2076:	08 f0       	brcs	.+2      	; 0x207a <LCD_DrawArc+0x142>
    2078:	39 c2       	rjmp	.+1138   	; 0x24ec <LCD_DrawArc+0x5b4>
    {
      //1
      for (float i = b_x; i >= x - r; i -= increment_x)
    207a:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    207e:	56 2e       	mov	r5, r22
    2080:	47 2e       	mov	r4, r23
    2082:	3c 01       	movw	r6, r24
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
    2084:	37 ee       	ldi	r19, 0xE7	; 231
    2086:	23 2e       	mov	r2, r19
    2088:	33 e0       	ldi	r19, 0x03	; 3
    208a:	33 2e       	mov	r3, r19
  if (end_angle > 360)
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
    208c:	27 ee       	ldi	r18, 0xE7	; 231
    208e:	33 e0       	ldi	r19, 0x03	; 3
    2090:	3e 83       	std	Y+6, r19	; 0x06
    2092:	2d 83       	std	Y+5, r18	; 0x05
  if (b_angle <= 180)
  {
    if ((end_angle > 180) || (end_angle < b_angle))
    {
      //1
      for (float i = b_x; i >= x - r; i -= increment_x)
    2094:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2096:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2098:	4e 8d       	ldd	r20, Y+30	; 0x1e
    209a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    209c:	84 1b       	sub	r24, r20
    209e:	95 0b       	sbc	r25, r21
    20a0:	9c 01       	movw	r18, r24
    20a2:	44 27       	eor	r20, r20
    20a4:	37 fd       	sbrc	r19, 7
    20a6:	40 95       	com	r20
    20a8:	54 2f       	mov	r21, r20
    20aa:	28 a3       	std	Y+32, r18	; 0x20
    20ac:	39 a3       	std	Y+33, r19	; 0x21
    20ae:	4a a3       	std	Y+34, r20	; 0x22
    20b0:	5b a3       	std	Y+35, r21	; 0x23
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
    20b2:	89 85       	ldd	r24, Y+9	; 0x09
    20b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b6:	aa 27       	eor	r26, r26
    20b8:	97 fd       	sbrc	r25, 7
    20ba:	a0 95       	com	r26
    20bc:	ba 2f       	mov	r27, r26
    20be:	8c a3       	std	Y+36, r24	; 0x24
    20c0:	9d a3       	std	Y+37, r25	; 0x25
    20c2:	ae a3       	std	Y+38, r26	; 0x26
    20c4:	bf a3       	std	Y+39, r27	; 0x27
  if (b_angle <= 180)
  {
    if ((end_angle > 180) || (end_angle < b_angle))
    {
      //1
      for (float i = b_x; i >= x - r; i -= increment_x)
    20c6:	5d c0       	rjmp	.+186    	; 0x2182 <LCD_DrawArc+0x24a>
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
    20c8:	c5 01       	movw	r24, r10
    20ca:	b4 01       	movw	r22, r8
    20cc:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    20d0:	6d 87       	std	Y+13, r22	; 0x0d
    20d2:	7e 87       	std	Y+14, r23	; 0x0e
    20d4:	8f 87       	std	Y+15, r24	; 0x0f
    20d6:	98 8b       	std	Y+16, r25	; 0x10
    20d8:	a7 01       	movw	r20, r14
    20da:	96 01       	movw	r18, r12
    20dc:	d2 01       	movw	r26, r4
    20de:	6b 2f       	mov	r22, r27
    20e0:	74 2d       	mov	r23, r4
    20e2:	86 2d       	mov	r24, r6
    20e4:	97 2d       	mov	r25, r7
    20e6:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    20ea:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    20f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    20f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f8:	98 89       	ldd	r25, Y+16	; 0x10
    20fa:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    20fe:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	6c a1       	ldd	r22, Y+36	; 0x24
    2108:	7d a1       	ldd	r23, Y+37	; 0x25
    210a:	8e a1       	ldd	r24, Y+38	; 0x26
    210c:	9f a1       	ldd	r25, Y+39	; 0x27
    210e:	2a a7       	std	Y+42, r18	; 0x2a
    2110:	3b a7       	std	Y+43, r19	; 0x2b
    2112:	48 a7       	std	Y+40, r20	; 0x28
    2114:	59 a7       	std	Y+41, r21	; 0x29
    2116:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    211a:	2a a5       	ldd	r18, Y+42	; 0x2a
    211c:	3b a5       	ldd	r19, Y+43	; 0x2b
    211e:	48 a5       	ldd	r20, Y+40	; 0x28
    2120:	59 a5       	ldd	r21, Y+41	; 0x29
    2122:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2126:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    212a:	8b 01       	movw	r16, r22
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    212c:	a2 01       	movw	r20, r4
    212e:	65 2f       	mov	r22, r21
    2130:	74 2d       	mov	r23, r4
    2132:	86 2d       	mov	r24, r6
    2134:	97 2d       	mov	r25, r7
    2136:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    213a:	9b 01       	movw	r18, r22
    213c:	ad 81       	ldd	r26, Y+5	; 0x05
    213e:	be 81       	ldd	r27, Y+6	; 0x06
    2140:	a6 17       	cp	r26, r22
    2142:	b7 07       	cpc	r27, r23
    2144:	19 f4       	brne	.+6      	; 0x214c <LCD_DrawArc+0x214>
    2146:	20 16       	cp	r2, r16
    2148:	31 06       	cpc	r3, r17
    214a:	69 f0       	breq	.+26     	; 0x2166 <LCD_DrawArc+0x22e>
        {
          LCD_DrawPixel(i, y_new, color);
    214c:	18 01       	movw	r2, r16
    214e:	48 8d       	ldd	r20, Y+24	; 0x18
    2150:	59 8d       	ldd	r21, Y+25	; 0x19
    2152:	b8 01       	movw	r22, r16
    2154:	c9 01       	movw	r24, r18
    2156:	2a a7       	std	Y+42, r18	; 0x2a
    2158:	3b a7       	std	Y+43, r19	; 0x2b
    215a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
    {
      //1
      for (float i = b_x; i >= x - r; i -= increment_x)
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    215e:	2a a5       	ldd	r18, Y+42	; 0x2a
    2160:	3b a5       	ldd	r19, Y+43	; 0x2b
    2162:	3e 83       	std	Y+6, r19	; 0x06
    2164:	2d 83       	std	Y+5, r18	; 0x05
  if (b_angle <= 180)
  {
    if ((end_angle > 180) || (end_angle < b_angle))
    {
      //1
      for (float i = b_x; i >= x - r; i -= increment_x)
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	d2 01       	movw	r26, r4
    2170:	6b 2f       	mov	r22, r27
    2172:	74 2d       	mov	r23, r4
    2174:	86 2d       	mov	r24, r6
    2176:	97 2d       	mov	r25, r7
    2178:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    217c:	56 2e       	mov	r5, r22
    217e:	47 2e       	mov	r4, r23
    2180:	3c 01       	movw	r6, r24
    2182:	68 a1       	ldd	r22, Y+32	; 0x20
    2184:	79 a1       	ldd	r23, Y+33	; 0x21
    2186:	8a a1       	ldd	r24, Y+34	; 0x22
    2188:	9b a1       	ldd	r25, Y+35	; 0x23
    218a:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    218e:	8b 01       	movw	r16, r22
    2190:	8d a7       	std	Y+45, r24	; 0x2d
    2192:	9c a7       	std	Y+44, r25	; 0x2c
    2194:	6d 87       	std	Y+13, r22	; 0x0d
    2196:	1d 8b       	std	Y+21, r17	; 0x15
    2198:	8e 8b       	std	Y+22, r24	; 0x16
    219a:	9f 8b       	std	Y+23, r25	; 0x17
    219c:	76 2f       	mov	r23, r22
    219e:	98 2f       	mov	r25, r24
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	27 2f       	mov	r18, r23
    21a4:	31 2f       	mov	r19, r17
    21a6:	49 2f       	mov	r20, r25
    21a8:	58 2f       	mov	r21, r24
    21aa:	d2 01       	movw	r26, r4
    21ac:	6b 2f       	mov	r22, r27
    21ae:	74 2d       	mov	r23, r4
    21b0:	86 2d       	mov	r24, r6
    21b2:	97 2d       	mov	r25, r7
    21b4:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    21b8:	87 ff       	sbrs	r24, 7
    21ba:	86 cf       	rjmp	.-244    	; 0x20c8 <LCD_DrawArc+0x190>
          prev_x = i;
          prev_y = y_new;
        }
      }
      // если конец дуги в нижней части
      if ((end_angle > 180) && (end_angle <= 360))
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	85 5b       	subi	r24, 0xB5	; 181
    21c2:	91 09       	sbc	r25, r1
    21c4:	84 3b       	cpi	r24, 0xB4	; 180
    21c6:	91 05       	cpc	r25, r1
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <LCD_DrawArc+0x294>
    21ca:	dd c0       	rjmp	.+442    	; 0x2386 <LCD_DrawArc+0x44e>
    21cc:	bd a5       	ldd	r27, Y+45	; 0x2d
    21ce:	bd 87       	std	Y+13, r27	; 0x0d
    21d0:	ec a5       	ldd	r30, Y+44	; 0x2c
    21d2:	e9 83       	std	Y+1, r30	; 0x01
      {
        for (float i = x - r; i <= e_x; i += increment_x)
    21d4:	29 89       	ldd	r18, Y+17	; 0x11
    21d6:	3a 89       	ldd	r19, Y+18	; 0x12
    21d8:	44 27       	eor	r20, r20
    21da:	37 fd       	sbrc	r19, 7
    21dc:	40 95       	com	r20
    21de:	54 2f       	mov	r21, r20
    21e0:	29 8b       	std	Y+17, r18	; 0x11
    21e2:	3a 8b       	std	Y+18, r19	; 0x12
    21e4:	4b 8b       	std	Y+19, r20	; 0x13
    21e6:	5c 8b       	std	Y+20, r21	; 0x14
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	aa 27       	eor	r26, r26
    21ee:	97 fd       	sbrc	r25, 7
    21f0:	a0 95       	com	r26
    21f2:	ba 2f       	mov	r27, r26
    21f4:	89 87       	std	Y+9, r24	; 0x09
    21f6:	9a 87       	std	Y+10, r25	; 0x0a
    21f8:	ab 87       	std	Y+11, r26	; 0x0b
    21fa:	bc 87       	std	Y+12, r27	; 0x0c
    21fc:	54 c0       	rjmp	.+168    	; 0x22a6 <LCD_DrawArc+0x36e>
    21fe:	c5 01       	movw	r24, r10
    2200:	b4 01       	movw	r22, r8
    2202:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2206:	2b 01       	movw	r4, r22
    2208:	3c 01       	movw	r6, r24
    220a:	a7 01       	movw	r20, r14
    220c:	96 01       	movw	r18, r12
    220e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	60 2f       	mov	r22, r16
    2214:	71 2f       	mov	r23, r17
    2216:	8f 2f       	mov	r24, r31
    2218:	9e 2f       	mov	r25, r30
    221a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    221e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	c3 01       	movw	r24, r6
    2228:	b2 01       	movw	r22, r4
    222a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    222e:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2232:	2b 01       	movw	r4, r22
    2234:	3c 01       	movw	r6, r24
    2236:	69 85       	ldd	r22, Y+9	; 0x09
    2238:	7a 85       	ldd	r23, Y+10	; 0x0a
    223a:	8b 85       	ldd	r24, Y+11	; 0x0b
    223c:	9c 85       	ldd	r25, Y+12	; 0x0c
    223e:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2242:	9b 01       	movw	r18, r22
    2244:	ac 01       	movw	r20, r24
    2246:	c3 01       	movw	r24, r6
    2248:	b2 01       	movw	r22, r4
    224a:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    224e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    2252:	2b 01       	movw	r4, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2254:	3d 85       	ldd	r19, Y+13	; 0x0d
    2256:	29 81       	ldd	r18, Y+1	; 0x01
    2258:	60 2f       	mov	r22, r16
    225a:	71 2f       	mov	r23, r17
    225c:	83 2f       	mov	r24, r19
    225e:	92 2f       	mov	r25, r18
    2260:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    2264:	3b 01       	movw	r6, r22
    2266:	ad 81       	ldd	r26, Y+5	; 0x05
    2268:	be 81       	ldd	r27, Y+6	; 0x06
    226a:	a6 17       	cp	r26, r22
    226c:	b7 07       	cpc	r27, r23
    226e:	19 f4       	brne	.+6      	; 0x2276 <LCD_DrawArc+0x33e>
    2270:	24 14       	cp	r2, r4
    2272:	35 04       	cpc	r3, r5
    2274:	49 f0       	breq	.+18     	; 0x2288 <LCD_DrawArc+0x350>
          {
            LCD_DrawPixel(i, y_new, color);
    2276:	12 01       	movw	r2, r4
    2278:	48 8d       	ldd	r20, Y+24	; 0x18
    227a:	59 8d       	ldd	r21, Y+25	; 0x19
    227c:	b2 01       	movw	r22, r4
    227e:	c3 01       	movw	r24, r6
    2280:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      if ((end_angle > 180) && (end_angle <= 360))
      {
        for (float i = x - r; i <= e_x; i += increment_x)
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2284:	7e 82       	std	Y+6, r7	; 0x06
    2286:	6d 82       	std	Y+5, r6	; 0x05
        }
      }
      // если конец дуги в нижней части
      if ((end_angle > 180) && (end_angle <= 360))
      {
        for (float i = x - r; i <= e_x; i += increment_x)
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	fd 85       	ldd	r31, Y+13	; 0x0d
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	60 2f       	mov	r22, r16
    2296:	71 2f       	mov	r23, r17
    2298:	8f 2f       	mov	r24, r31
    229a:	9e 2f       	mov	r25, r30
    229c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    22a0:	8b 01       	movw	r16, r22
    22a2:	8d 87       	std	Y+13, r24	; 0x0d
    22a4:	99 83       	std	Y+1, r25	; 0x01
    22a6:	69 89       	ldd	r22, Y+17	; 0x11
    22a8:	7a 89       	ldd	r23, Y+18	; 0x12
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    22b2:	9b 01       	movw	r18, r22
    22b4:	ac 01       	movw	r20, r24
    22b6:	fd 85       	ldd	r31, Y+13	; 0x0d
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	60 2f       	mov	r22, r16
    22bc:	71 2f       	mov	r23, r17
    22be:	8f 2f       	mov	r24, r31
    22c0:	9e 2f       	mov	r25, r30
    22c2:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__cmpsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	0c f0       	brlt	.+2      	; 0x22cc <LCD_DrawArc+0x394>
    22ca:	99 cf       	rjmp	.-206    	; 0x21fe <LCD_DrawArc+0x2c6>
    22cc:	68 c4       	rjmp	.+2256   	; 0x2b9e <LCD_DrawArc+0xc66>
      }
      else // если конец дуги в верхней части
      {
        for (float i = x - r; i <= x + r; i += increment_x)
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
    22ce:	c5 01       	movw	r24, r10
    22d0:	b4 01       	movw	r22, r8
    22d2:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    22d6:	2b 01       	movw	r4, r22
    22d8:	3c 01       	movw	r6, r24
    22da:	a7 01       	movw	r20, r14
    22dc:	96 01       	movw	r18, r12
    22de:	bd 85       	ldd	r27, Y+13	; 0x0d
    22e0:	ad 89       	ldd	r26, Y+21	; 0x15
    22e2:	ee 89       	ldd	r30, Y+22	; 0x16
    22e4:	1f 89       	ldd	r17, Y+23	; 0x17
    22e6:	6b 2f       	mov	r22, r27
    22e8:	7a 2f       	mov	r23, r26
    22ea:	8e 2f       	mov	r24, r30
    22ec:	91 2f       	mov	r25, r17
    22ee:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    22f2:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    22f6:	9b 01       	movw	r18, r22
    22f8:	ac 01       	movw	r20, r24
    22fa:	c3 01       	movw	r24, r6
    22fc:	b2 01       	movw	r22, r4
    22fe:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2302:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2306:	2b 01       	movw	r4, r22
    2308:	3c 01       	movw	r6, r24
    230a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    230c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    230e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2310:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2312:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2316:	9b 01       	movw	r18, r22
    2318:	ac 01       	movw	r20, r24
    231a:	c3 01       	movw	r24, r6
    231c:	b2 01       	movw	r22, r4
    231e:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    2322:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    2326:	8b 01       	movw	r16, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2328:	5d 85       	ldd	r21, Y+13	; 0x0d
    232a:	4d 89       	ldd	r20, Y+21	; 0x15
    232c:	3e 89       	ldd	r19, Y+22	; 0x16
    232e:	2f 89       	ldd	r18, Y+23	; 0x17
    2330:	65 2f       	mov	r22, r21
    2332:	74 2f       	mov	r23, r20
    2334:	83 2f       	mov	r24, r19
    2336:	92 2f       	mov	r25, r18
    2338:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    233c:	3b 01       	movw	r6, r22
    233e:	ed 81       	ldd	r30, Y+5	; 0x05
    2340:	fe 81       	ldd	r31, Y+6	; 0x06
    2342:	e6 17       	cp	r30, r22
    2344:	f7 07       	cpc	r31, r23
    2346:	19 f4       	brne	.+6      	; 0x234e <LCD_DrawArc+0x416>
    2348:	20 16       	cp	r2, r16
    234a:	31 06       	cpc	r3, r17
    234c:	49 f0       	breq	.+18     	; 0x2360 <LCD_DrawArc+0x428>
          {
            LCD_DrawPixel(i, y_new, color);
    234e:	18 01       	movw	r2, r16
    2350:	48 8d       	ldd	r20, Y+24	; 0x18
    2352:	59 8d       	ldd	r21, Y+25	; 0x19
    2354:	b8 01       	movw	r22, r16
    2356:	c3 01       	movw	r24, r6
    2358:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      else // если конец дуги в верхней части
      {
        for (float i = x - r; i <= x + r; i += increment_x)
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    235c:	7e 82       	std	Y+6, r7	; 0x06
    235e:	6d 82       	std	Y+5, r6	; 0x05
          }
        }
      }
      else // если конец дуги в верхней части
      {
        for (float i = x - r; i <= x + r; i += increment_x)
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	bd 85       	ldd	r27, Y+13	; 0x0d
    236a:	ad 89       	ldd	r26, Y+21	; 0x15
    236c:	ee 89       	ldd	r30, Y+22	; 0x16
    236e:	1f 89       	ldd	r17, Y+23	; 0x17
    2370:	6b 2f       	mov	r22, r27
    2372:	7a 2f       	mov	r23, r26
    2374:	8e 2f       	mov	r24, r30
    2376:	91 2f       	mov	r25, r17
    2378:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    237c:	6d 87       	std	Y+13, r22	; 0x0d
    237e:	7d 8b       	std	Y+21, r23	; 0x15
    2380:	8e 8b       	std	Y+22, r24	; 0x16
    2382:	9f 8b       	std	Y+23, r25	; 0x17
    2384:	19 c0       	rjmp	.+50     	; 0x23b8 <LCD_DrawArc+0x480>
    2386:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2388:	9b 8d       	ldd	r25, Y+27	; 0x1b
    238a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    238c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    238e:	82 0f       	add	r24, r18
    2390:	93 1f       	adc	r25, r19
    2392:	9c 01       	movw	r18, r24
    2394:	44 27       	eor	r20, r20
    2396:	37 fd       	sbrc	r19, 7
    2398:	40 95       	com	r20
    239a:	54 2f       	mov	r21, r20
    239c:	29 83       	std	Y+1, r18	; 0x01
    239e:	3a 83       	std	Y+2, r19	; 0x02
    23a0:	4b 83       	std	Y+3, r20	; 0x03
    23a2:	5c 83       	std	Y+4, r21	; 0x04
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	aa 27       	eor	r26, r26
    23aa:	97 fd       	sbrc	r25, 7
    23ac:	a0 95       	com	r26
    23ae:	ba 2f       	mov	r27, r26
    23b0:	8a 8f       	std	Y+26, r24	; 0x1a
    23b2:	9b 8f       	std	Y+27, r25	; 0x1b
    23b4:	ac 8f       	std	Y+28, r26	; 0x1c
    23b6:	bd 8f       	std	Y+29, r27	; 0x1d
          }
        }
      }
      else // если конец дуги в верхней части
      {
        for (float i = x - r; i <= x + r; i += increment_x)
    23b8:	69 81       	ldd	r22, Y+1	; 0x01
    23ba:	7a 81       	ldd	r23, Y+2	; 0x02
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    23c4:	2b 01       	movw	r4, r22
    23c6:	3c 01       	movw	r6, r24
    23c8:	76 2f       	mov	r23, r22
    23ca:	27 2f       	mov	r18, r23
    23cc:	35 2d       	mov	r19, r5
    23ce:	46 2d       	mov	r20, r6
    23d0:	57 2d       	mov	r21, r7
    23d2:	bd 85       	ldd	r27, Y+13	; 0x0d
    23d4:	ad 89       	ldd	r26, Y+21	; 0x15
    23d6:	ee 89       	ldd	r30, Y+22	; 0x16
    23d8:	1f 89       	ldd	r17, Y+23	; 0x17
    23da:	6b 2f       	mov	r22, r27
    23dc:	7a 2f       	mov	r23, r26
    23de:	8e 2f       	mov	r24, r30
    23e0:	91 2f       	mov	r25, r17
    23e2:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__cmpsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	0c f0       	brlt	.+2      	; 0x23ec <LCD_DrawArc+0x4b4>
    23ea:	71 cf       	rjmp	.-286    	; 0x22ce <LCD_DrawArc+0x396>
    23ec:	5a c0       	rjmp	.+180    	; 0x24a2 <LCD_DrawArc+0x56a>
            prev_y = y_new;
          }
        }
        for (float i = x + r; i >= e_x; i -= increment_x)
        {
          y_new = -sqrt(square(r) - square(i - x)) + y;
    23ee:	c5 01       	movw	r24, r10
    23f0:	b4 01       	movw	r22, r8
    23f2:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    23f6:	69 83       	std	Y+1, r22	; 0x01
    23f8:	7a 83       	std	Y+2, r23	; 0x02
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	a7 01       	movw	r20, r14
    2400:	96 01       	movw	r18, r12
    2402:	64 2d       	mov	r22, r4
    2404:	75 2d       	mov	r23, r5
    2406:	86 2d       	mov	r24, r6
    2408:	97 2d       	mov	r25, r7
    240a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    240e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2412:	9b 01       	movw	r18, r22
    2414:	ac 01       	movw	r20, r24
    2416:	69 81       	ldd	r22, Y+1	; 0x01
    2418:	7a 81       	ldd	r23, Y+2	; 0x02
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2422:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2426:	9b 01       	movw	r18, r22
    2428:	ac 01       	movw	r20, r24
    242a:	69 85       	ldd	r22, Y+9	; 0x09
    242c:	7a 85       	ldd	r23, Y+10	; 0x0a
    242e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2430:	9c 85       	ldd	r25, Y+12	; 0x0c
    2432:	2a a7       	std	Y+42, r18	; 0x2a
    2434:	3b a7       	std	Y+43, r19	; 0x2b
    2436:	48 a7       	std	Y+40, r20	; 0x28
    2438:	59 a7       	std	Y+41, r21	; 0x29
    243a:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    243e:	2a a5       	ldd	r18, Y+42	; 0x2a
    2440:	3b a5       	ldd	r19, Y+43	; 0x2b
    2442:	48 a5       	ldd	r20, Y+40	; 0x28
    2444:	59 a5       	ldd	r21, Y+41	; 0x29
    2446:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    244a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    244e:	8b 01       	movw	r16, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2450:	64 2d       	mov	r22, r4
    2452:	75 2d       	mov	r23, r5
    2454:	86 2d       	mov	r24, r6
    2456:	97 2d       	mov	r25, r7
    2458:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    245c:	9b 01       	movw	r18, r22
    245e:	ad 81       	ldd	r26, Y+5	; 0x05
    2460:	be 81       	ldd	r27, Y+6	; 0x06
    2462:	a6 17       	cp	r26, r22
    2464:	b7 07       	cpc	r27, r23
    2466:	19 f4       	brne	.+6      	; 0x246e <LCD_DrawArc+0x536>
    2468:	20 16       	cp	r2, r16
    246a:	31 06       	cpc	r3, r17
    246c:	69 f0       	breq	.+26     	; 0x2488 <LCD_DrawArc+0x550>
          {
            LCD_DrawPixel(i, y_new, color);
    246e:	18 01       	movw	r2, r16
    2470:	48 8d       	ldd	r20, Y+24	; 0x18
    2472:	59 8d       	ldd	r21, Y+25	; 0x19
    2474:	b8 01       	movw	r22, r16
    2476:	c9 01       	movw	r24, r18
    2478:	2a a7       	std	Y+42, r18	; 0x2a
    247a:	3b a7       	std	Y+43, r19	; 0x2b
    247c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
          }
        }
        for (float i = x + r; i >= e_x; i -= increment_x)
        {
          y_new = -sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2480:	2a a5       	ldd	r18, Y+42	; 0x2a
    2482:	3b a5       	ldd	r19, Y+43	; 0x2b
    2484:	3e 83       	std	Y+6, r19	; 0x06
    2486:	2d 83       	std	Y+5, r18	; 0x05
            LCD_DrawPixel(i, y_new, color);
            prev_x = i;
            prev_y = y_new;
          }
        }
        for (float i = x + r; i >= e_x; i -= increment_x)
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	64 2d       	mov	r22, r4
    2492:	75 2d       	mov	r23, r5
    2494:	86 2d       	mov	r24, r6
    2496:	97 2d       	mov	r25, r7
    2498:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    249c:	2b 01       	movw	r4, r22
    249e:	3c 01       	movw	r6, r24
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <LCD_DrawArc+0x592>
    24a2:	29 89       	ldd	r18, Y+17	; 0x11
    24a4:	3a 89       	ldd	r19, Y+18	; 0x12
    24a6:	44 27       	eor	r20, r20
    24a8:	37 fd       	sbrc	r19, 7
    24aa:	40 95       	com	r20
    24ac:	54 2f       	mov	r21, r20
    24ae:	29 8b       	std	Y+17, r18	; 0x11
    24b0:	3a 8b       	std	Y+18, r19	; 0x12
    24b2:	4b 8b       	std	Y+19, r20	; 0x13
    24b4:	5c 8b       	std	Y+20, r21	; 0x14
        {
          y_new = -sqrt(square(r) - square(i - x)) + y;
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	aa 27       	eor	r26, r26
    24bc:	97 fd       	sbrc	r25, 7
    24be:	a0 95       	com	r26
    24c0:	ba 2f       	mov	r27, r26
    24c2:	89 87       	std	Y+9, r24	; 0x09
    24c4:	9a 87       	std	Y+10, r25	; 0x0a
    24c6:	ab 87       	std	Y+11, r26	; 0x0b
    24c8:	bc 87       	std	Y+12, r27	; 0x0c
            LCD_DrawPixel(i, y_new, color);
            prev_x = i;
            prev_y = y_new;
          }
        }
        for (float i = x + r; i >= e_x; i -= increment_x)
    24ca:	69 89       	ldd	r22, Y+17	; 0x11
    24cc:	7a 89       	ldd	r23, Y+18	; 0x12
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    24d6:	9b 01       	movw	r18, r22
    24d8:	ac 01       	movw	r20, r24
    24da:	64 2d       	mov	r22, r4
    24dc:	75 2d       	mov	r23, r5
    24de:	86 2d       	mov	r24, r6
    24e0:	97 2d       	mov	r25, r7
    24e2:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    24e6:	87 ff       	sbrs	r24, 7
    24e8:	82 cf       	rjmp	.-252    	; 0x23ee <LCD_DrawArc+0x4b6>
    24ea:	59 c3       	rjmp	.+1714   	; 0x2b9e <LCD_DrawArc+0xc66>
        }
      }
    }
    else
    {
      for (float i = b_x; i >= e_x; i -= increment_x)
    24ec:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    24f0:	2b 01       	movw	r4, r22
    24f2:	3c 01       	movw	r6, r24
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
    24f4:	27 ee       	ldi	r18, 0xE7	; 231
    24f6:	22 2e       	mov	r2, r18
    24f8:	23 e0       	ldi	r18, 0x03	; 3
    24fa:	32 2e       	mov	r3, r18
  if (end_angle > 360)
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
    24fc:	a7 ee       	ldi	r26, 0xE7	; 231
    24fe:	b3 e0       	ldi	r27, 0x03	; 3
    2500:	ba 83       	std	Y+2, r27	; 0x02
    2502:	a9 83       	std	Y+1, r26	; 0x01
        }
      }
    }
    else
    {
      for (float i = b_x; i >= e_x; i -= increment_x)
    2504:	29 89       	ldd	r18, Y+17	; 0x11
    2506:	3a 89       	ldd	r19, Y+18	; 0x12
    2508:	44 27       	eor	r20, r20
    250a:	37 fd       	sbrc	r19, 7
    250c:	40 95       	com	r20
    250e:	54 2f       	mov	r21, r20
    2510:	29 8b       	std	Y+17, r18	; 0x11
    2512:	3a 8b       	std	Y+18, r19	; 0x12
    2514:	4b 8b       	std	Y+19, r20	; 0x13
    2516:	5c 8b       	std	Y+20, r21	; 0x14
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	aa 27       	eor	r26, r26
    251e:	97 fd       	sbrc	r25, 7
    2520:	a0 95       	com	r26
    2522:	ba 2f       	mov	r27, r26
    2524:	89 87       	std	Y+9, r24	; 0x09
    2526:	9a 87       	std	Y+10, r25	; 0x0a
    2528:	ab 87       	std	Y+11, r26	; 0x0b
    252a:	bc 87       	std	Y+12, r27	; 0x0c
        }
      }
    }
    else
    {
      for (float i = b_x; i >= e_x; i -= increment_x)
    252c:	59 c0       	rjmp	.+178    	; 0x25e0 <LCD_DrawArc+0x6a8>
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
    252e:	c5 01       	movw	r24, r10
    2530:	b4 01       	movw	r22, r8
    2532:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2536:	6d 83       	std	Y+5, r22	; 0x05
    2538:	7e 83       	std	Y+6, r23	; 0x06
    253a:	8f 83       	std	Y+7, r24	; 0x07
    253c:	98 87       	std	Y+8, r25	; 0x08
    253e:	a7 01       	movw	r20, r14
    2540:	96 01       	movw	r18, r12
    2542:	64 2d       	mov	r22, r4
    2544:	75 2d       	mov	r23, r5
    2546:	86 2d       	mov	r24, r6
    2548:	97 2d       	mov	r25, r7
    254a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    254e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2552:	9b 01       	movw	r18, r22
    2554:	ac 01       	movw	r20, r24
    2556:	6d 81       	ldd	r22, Y+5	; 0x05
    2558:	7e 81       	ldd	r23, Y+6	; 0x06
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2562:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2566:	9b 01       	movw	r18, r22
    2568:	ac 01       	movw	r20, r24
    256a:	69 85       	ldd	r22, Y+9	; 0x09
    256c:	7a 85       	ldd	r23, Y+10	; 0x0a
    256e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2570:	9c 85       	ldd	r25, Y+12	; 0x0c
    2572:	2a a7       	std	Y+42, r18	; 0x2a
    2574:	3b a7       	std	Y+43, r19	; 0x2b
    2576:	48 a7       	std	Y+40, r20	; 0x28
    2578:	59 a7       	std	Y+41, r21	; 0x29
    257a:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    257e:	2a a5       	ldd	r18, Y+42	; 0x2a
    2580:	3b a5       	ldd	r19, Y+43	; 0x2b
    2582:	48 a5       	ldd	r20, Y+40	; 0x28
    2584:	59 a5       	ldd	r21, Y+41	; 0x29
    2586:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    258a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    258e:	8b 01       	movw	r16, r22
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2590:	64 2d       	mov	r22, r4
    2592:	75 2d       	mov	r23, r5
    2594:	86 2d       	mov	r24, r6
    2596:	97 2d       	mov	r25, r7
    2598:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    259c:	9b 01       	movw	r18, r22
    259e:	a9 81       	ldd	r26, Y+1	; 0x01
    25a0:	ba 81       	ldd	r27, Y+2	; 0x02
    25a2:	a6 17       	cp	r26, r22
    25a4:	b7 07       	cpc	r27, r23
    25a6:	19 f4       	brne	.+6      	; 0x25ae <LCD_DrawArc+0x676>
    25a8:	20 16       	cp	r2, r16
    25aa:	31 06       	cpc	r3, r17
    25ac:	69 f0       	breq	.+26     	; 0x25c8 <LCD_DrawArc+0x690>
        {
          LCD_DrawPixel(i, y_new, color);
    25ae:	18 01       	movw	r2, r16
    25b0:	48 8d       	ldd	r20, Y+24	; 0x18
    25b2:	59 8d       	ldd	r21, Y+25	; 0x19
    25b4:	b8 01       	movw	r22, r16
    25b6:	c9 01       	movw	r24, r18
    25b8:	2a a7       	std	Y+42, r18	; 0x2a
    25ba:	3b a7       	std	Y+43, r19	; 0x2b
    25bc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
    else
    {
      for (float i = b_x; i >= e_x; i -= increment_x)
      {
        y_new = -sqrt(square(r) - square(i - x)) + y;
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    25c0:	2a a5       	ldd	r18, Y+42	; 0x2a
    25c2:	3b a5       	ldd	r19, Y+43	; 0x2b
    25c4:	3a 83       	std	Y+2, r19	; 0x02
    25c6:	29 83       	std	Y+1, r18	; 0x01
        }
      }
    }
    else
    {
      for (float i = b_x; i >= e_x; i -= increment_x)
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	64 2d       	mov	r22, r4
    25d2:	75 2d       	mov	r23, r5
    25d4:	86 2d       	mov	r24, r6
    25d6:	97 2d       	mov	r25, r7
    25d8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    25dc:	2b 01       	movw	r4, r22
    25de:	3c 01       	movw	r6, r24
    25e0:	69 89       	ldd	r22, Y+17	; 0x11
    25e2:	7a 89       	ldd	r23, Y+18	; 0x12
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	64 2d       	mov	r22, r4
    25f2:	75 2d       	mov	r23, r5
    25f4:	86 2d       	mov	r24, r6
    25f6:	97 2d       	mov	r25, r7
    25f8:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    25fc:	87 ff       	sbrs	r24, 7
    25fe:	97 cf       	rjmp	.-210    	; 0x252e <LCD_DrawArc+0x5f6>
    2600:	ce c2       	rjmp	.+1436   	; 0x2b9e <LCD_DrawArc+0xc66>
      }
    }
  }
  else
  {
    if (end_angle >= b_angle)
    2602:	e6 15       	cp	r30, r6
    2604:	f7 05       	cpc	r31, r7
    2606:	08 f4       	brcc	.+2      	; 0x260a <LCD_DrawArc+0x6d2>
    2608:	8c c0       	rjmp	.+280    	; 0x2722 <LCD_DrawArc+0x7ea>
    {
      //1
      for (float i = b_x; i <= e_x; i += increment_x)
    260a:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    260e:	2b 01       	movw	r4, r22
    2610:	3c 01       	movw	r6, r24
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
    2612:	97 ee       	ldi	r25, 0xE7	; 231
    2614:	29 2e       	mov	r2, r25
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	39 2e       	mov	r3, r25
  if (end_angle > 360)
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
    261a:	27 ee       	ldi	r18, 0xE7	; 231
    261c:	33 e0       	ldi	r19, 0x03	; 3
    261e:	3a 83       	std	Y+2, r19	; 0x02
    2620:	29 83       	std	Y+1, r18	; 0x01
  else
  {
    if (end_angle >= b_angle)
    {
      //1
      for (float i = b_x; i <= e_x; i += increment_x)
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	9a 89       	ldd	r25, Y+18	; 0x12
    2626:	aa 27       	eor	r26, r26
    2628:	97 fd       	sbrc	r25, 7
    262a:	a0 95       	com	r26
    262c:	ba 2f       	mov	r27, r26
    262e:	89 8b       	std	Y+17, r24	; 0x11
    2630:	9a 8b       	std	Y+18, r25	; 0x12
    2632:	ab 8b       	std	Y+19, r26	; 0x13
    2634:	bc 8b       	std	Y+20, r27	; 0x14
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
    2636:	29 85       	ldd	r18, Y+9	; 0x09
    2638:	3a 85       	ldd	r19, Y+10	; 0x0a
    263a:	44 27       	eor	r20, r20
    263c:	37 fd       	sbrc	r19, 7
    263e:	40 95       	com	r20
    2640:	54 2f       	mov	r21, r20
    2642:	29 87       	std	Y+9, r18	; 0x09
    2644:	3a 87       	std	Y+10, r19	; 0x0a
    2646:	4b 87       	std	Y+11, r20	; 0x0b
    2648:	5c 87       	std	Y+12, r21	; 0x0c
  else
  {
    if (end_angle >= b_angle)
    {
      //1
      for (float i = b_x; i <= e_x; i += increment_x)
    264a:	59 c0       	rjmp	.+178    	; 0x26fe <LCD_DrawArc+0x7c6>
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
    264c:	c5 01       	movw	r24, r10
    264e:	b4 01       	movw	r22, r8
    2650:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2654:	6d 83       	std	Y+5, r22	; 0x05
    2656:	7e 83       	std	Y+6, r23	; 0x06
    2658:	8f 83       	std	Y+7, r24	; 0x07
    265a:	98 87       	std	Y+8, r25	; 0x08
    265c:	a7 01       	movw	r20, r14
    265e:	96 01       	movw	r18, r12
    2660:	64 2d       	mov	r22, r4
    2662:	75 2d       	mov	r23, r5
    2664:	86 2d       	mov	r24, r6
    2666:	97 2d       	mov	r25, r7
    2668:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    266c:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2670:	9b 01       	movw	r18, r22
    2672:	ac 01       	movw	r20, r24
    2674:	6d 81       	ldd	r22, Y+5	; 0x05
    2676:	7e 81       	ldd	r23, Y+6	; 0x06
    2678:	8f 81       	ldd	r24, Y+7	; 0x07
    267a:	98 85       	ldd	r25, Y+8	; 0x08
    267c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2680:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2684:	6d 83       	std	Y+5, r22	; 0x05
    2686:	7e 83       	std	Y+6, r23	; 0x06
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	69 85       	ldd	r22, Y+9	; 0x09
    268e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2690:	8b 85       	ldd	r24, Y+11	; 0x0b
    2692:	9c 85       	ldd	r25, Y+12	; 0x0c
    2694:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2698:	9b 01       	movw	r18, r22
    269a:	ac 01       	movw	r20, r24
    269c:	6d 81       	ldd	r22, Y+5	; 0x05
    269e:	7e 81       	ldd	r23, Y+6	; 0x06
    26a0:	8f 81       	ldd	r24, Y+7	; 0x07
    26a2:	98 85       	ldd	r25, Y+8	; 0x08
    26a4:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    26a8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    26ac:	8b 01       	movw	r16, r22
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    26ae:	64 2d       	mov	r22, r4
    26b0:	75 2d       	mov	r23, r5
    26b2:	86 2d       	mov	r24, r6
    26b4:	97 2d       	mov	r25, r7
    26b6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    26ba:	9b 01       	movw	r18, r22
    26bc:	49 81       	ldd	r20, Y+1	; 0x01
    26be:	5a 81       	ldd	r21, Y+2	; 0x02
    26c0:	46 17       	cp	r20, r22
    26c2:	57 07       	cpc	r21, r23
    26c4:	19 f4       	brne	.+6      	; 0x26cc <LCD_DrawArc+0x794>
    26c6:	20 16       	cp	r2, r16
    26c8:	31 06       	cpc	r3, r17
    26ca:	69 f0       	breq	.+26     	; 0x26e6 <LCD_DrawArc+0x7ae>
        {
          LCD_DrawPixel(i, y_new, color);
    26cc:	18 01       	movw	r2, r16
    26ce:	48 8d       	ldd	r20, Y+24	; 0x18
    26d0:	59 8d       	ldd	r21, Y+25	; 0x19
    26d2:	b8 01       	movw	r22, r16
    26d4:	c9 01       	movw	r24, r18
    26d6:	2a a7       	std	Y+42, r18	; 0x2a
    26d8:	3b a7       	std	Y+43, r19	; 0x2b
    26da:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
    {
      //1
      for (float i = b_x; i <= e_x; i += increment_x)
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    26de:	2a a5       	ldd	r18, Y+42	; 0x2a
    26e0:	3b a5       	ldd	r19, Y+43	; 0x2b
    26e2:	3a 83       	std	Y+2, r19	; 0x02
    26e4:	29 83       	std	Y+1, r18	; 0x01
  else
  {
    if (end_angle >= b_angle)
    {
      //1
      for (float i = b_x; i <= e_x; i += increment_x)
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	64 2d       	mov	r22, r4
    26f0:	75 2d       	mov	r23, r5
    26f2:	86 2d       	mov	r24, r6
    26f4:	97 2d       	mov	r25, r7
    26f6:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    26fa:	2b 01       	movw	r4, r22
    26fc:	3c 01       	movw	r6, r24
    26fe:	69 89       	ldd	r22, Y+17	; 0x11
    2700:	7a 89       	ldd	r23, Y+18	; 0x12
    2702:	8b 89       	ldd	r24, Y+19	; 0x13
    2704:	9c 89       	ldd	r25, Y+20	; 0x14
    2706:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    270a:	9b 01       	movw	r18, r22
    270c:	ac 01       	movw	r20, r24
    270e:	64 2d       	mov	r22, r4
    2710:	75 2d       	mov	r23, r5
    2712:	86 2d       	mov	r24, r6
    2714:	97 2d       	mov	r25, r7
    2716:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__cmpsf2>
    271a:	18 16       	cp	r1, r24
    271c:	0c f0       	brlt	.+2      	; 0x2720 <LCD_DrawArc+0x7e8>
    271e:	96 cf       	rjmp	.-212    	; 0x264c <LCD_DrawArc+0x714>
    2720:	3e c2       	rjmp	.+1148   	; 0x2b9e <LCD_DrawArc+0xc66>
        }
      }
    }
    else
    {
      for (float i = b_x; i <= x + r; i += increment_x)
    2722:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2726:	56 2e       	mov	r5, r22
    2728:	47 2e       	mov	r4, r23
    272a:	3c 01       	movw	r6, r24
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
  prev_y = 999;
    272c:	87 ee       	ldi	r24, 0xE7	; 231
    272e:	28 2e       	mov	r2, r24
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	38 2e       	mov	r3, r24
  if (end_angle > 360)
    end_angle -= 360;
  e_x = x + r * cos(end_angle * M_PI / 180);
  
  // если начало в верхней части
  prev_x = 999;
    2734:	87 ee       	ldi	r24, 0xE7	; 231
    2736:	93 e0       	ldi	r25, 0x03	; 3
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
        }
      }
    }
    else
    {
      for (float i = b_x; i <= x + r; i += increment_x)
    273c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    273e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2740:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2742:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2744:	8a 0f       	add	r24, r26
    2746:	9b 1f       	adc	r25, r27
    2748:	9c 01       	movw	r18, r24
    274a:	44 27       	eor	r20, r20
    274c:	37 fd       	sbrc	r19, 7
    274e:	40 95       	com	r20
    2750:	54 2f       	mov	r21, r20
    2752:	28 a3       	std	Y+32, r18	; 0x20
    2754:	39 a3       	std	Y+33, r19	; 0x21
    2756:	4a a3       	std	Y+34, r20	; 0x22
    2758:	5b a3       	std	Y+35, r21	; 0x23
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	aa 27       	eor	r26, r26
    2760:	97 fd       	sbrc	r25, 7
    2762:	a0 95       	com	r26
    2764:	ba 2f       	mov	r27, r26
    2766:	8c a3       	std	Y+36, r24	; 0x24
    2768:	9d a3       	std	Y+37, r25	; 0x25
    276a:	ae a3       	std	Y+38, r26	; 0x26
    276c:	bf a3       	std	Y+39, r27	; 0x27
        }
      }
    }
    else
    {
      for (float i = b_x; i <= x + r; i += increment_x)
    276e:	5d c0       	rjmp	.+186    	; 0x282a <LCD_DrawArc+0x8f2>
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
    2770:	c5 01       	movw	r24, r10
    2772:	b4 01       	movw	r22, r8
    2774:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2778:	6d 87       	std	Y+13, r22	; 0x0d
    277a:	7e 87       	std	Y+14, r23	; 0x0e
    277c:	8f 87       	std	Y+15, r24	; 0x0f
    277e:	98 8b       	std	Y+16, r25	; 0x10
    2780:	a7 01       	movw	r20, r14
    2782:	96 01       	movw	r18, r12
    2784:	d2 01       	movw	r26, r4
    2786:	6b 2f       	mov	r22, r27
    2788:	74 2d       	mov	r23, r4
    278a:	86 2d       	mov	r24, r6
    278c:	97 2d       	mov	r25, r7
    278e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2792:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2796:	9b 01       	movw	r18, r22
    2798:	ac 01       	movw	r20, r24
    279a:	6d 85       	ldd	r22, Y+13	; 0x0d
    279c:	7e 85       	ldd	r23, Y+14	; 0x0e
    279e:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a0:	98 89       	ldd	r25, Y+16	; 0x10
    27a2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    27a6:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    27aa:	6d 87       	std	Y+13, r22	; 0x0d
    27ac:	7e 87       	std	Y+14, r23	; 0x0e
    27ae:	8f 87       	std	Y+15, r24	; 0x0f
    27b0:	98 8b       	std	Y+16, r25	; 0x10
    27b2:	6c a1       	ldd	r22, Y+36	; 0x24
    27b4:	7d a1       	ldd	r23, Y+37	; 0x25
    27b6:	8e a1       	ldd	r24, Y+38	; 0x26
    27b8:	9f a1       	ldd	r25, Y+39	; 0x27
    27ba:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    27be:	9b 01       	movw	r18, r22
    27c0:	ac 01       	movw	r20, r24
    27c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    27c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    27c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c8:	98 89       	ldd	r25, Y+16	; 0x10
    27ca:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    27ce:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    27d2:	8b 01       	movw	r16, r22
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    27d4:	a2 01       	movw	r20, r4
    27d6:	65 2f       	mov	r22, r21
    27d8:	74 2d       	mov	r23, r4
    27da:	86 2d       	mov	r24, r6
    27dc:	97 2d       	mov	r25, r7
    27de:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    27e2:	9b 01       	movw	r18, r22
    27e4:	ad 81       	ldd	r26, Y+5	; 0x05
    27e6:	be 81       	ldd	r27, Y+6	; 0x06
    27e8:	a6 17       	cp	r26, r22
    27ea:	b7 07       	cpc	r27, r23
    27ec:	19 f4       	brne	.+6      	; 0x27f4 <LCD_DrawArc+0x8bc>
    27ee:	20 16       	cp	r2, r16
    27f0:	31 06       	cpc	r3, r17
    27f2:	69 f0       	breq	.+26     	; 0x280e <LCD_DrawArc+0x8d6>
        {
          LCD_DrawPixel(i, y_new, color);
    27f4:	18 01       	movw	r2, r16
    27f6:	48 8d       	ldd	r20, Y+24	; 0x18
    27f8:	59 8d       	ldd	r21, Y+25	; 0x19
    27fa:	b8 01       	movw	r22, r16
    27fc:	c9 01       	movw	r24, r18
    27fe:	2a a7       	std	Y+42, r18	; 0x2a
    2800:	3b a7       	std	Y+43, r19	; 0x2b
    2802:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
    else
    {
      for (float i = b_x; i <= x + r; i += increment_x)
      {
        y_new = sqrt(square(r) - square(i - x)) + y;
        if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2806:	2a a5       	ldd	r18, Y+42	; 0x2a
    2808:	3b a5       	ldd	r19, Y+43	; 0x2b
    280a:	3e 83       	std	Y+6, r19	; 0x06
    280c:	2d 83       	std	Y+5, r18	; 0x05
        }
      }
    }
    else
    {
      for (float i = b_x; i <= x + r; i += increment_x)
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	5f e3       	ldi	r21, 0x3F	; 63
    2816:	d2 01       	movw	r26, r4
    2818:	6b 2f       	mov	r22, r27
    281a:	74 2d       	mov	r23, r4
    281c:	86 2d       	mov	r24, r6
    281e:	97 2d       	mov	r25, r7
    2820:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    2824:	56 2e       	mov	r5, r22
    2826:	47 2e       	mov	r4, r23
    2828:	3c 01       	movw	r6, r24
    282a:	68 a1       	ldd	r22, Y+32	; 0x20
    282c:	79 a1       	ldd	r23, Y+33	; 0x21
    282e:	8a a1       	ldd	r24, Y+34	; 0x22
    2830:	9b a1       	ldd	r25, Y+35	; 0x23
    2832:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2836:	8b 01       	movw	r16, r22
    2838:	8d a7       	std	Y+45, r24	; 0x2d
    283a:	9c a7       	std	Y+44, r25	; 0x2c
    283c:	6d 87       	std	Y+13, r22	; 0x0d
    283e:	1d 8b       	std	Y+21, r17	; 0x15
    2840:	8e 8b       	std	Y+22, r24	; 0x16
    2842:	9f 8b       	std	Y+23, r25	; 0x17
    2844:	76 2f       	mov	r23, r22
    2846:	98 2f       	mov	r25, r24
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	27 2f       	mov	r18, r23
    284c:	31 2f       	mov	r19, r17
    284e:	49 2f       	mov	r20, r25
    2850:	58 2f       	mov	r21, r24
    2852:	d2 01       	movw	r26, r4
    2854:	6b 2f       	mov	r22, r27
    2856:	74 2d       	mov	r23, r4
    2858:	86 2d       	mov	r24, r6
    285a:	97 2d       	mov	r25, r7
    285c:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__cmpsf2>
    2860:	18 16       	cp	r1, r24
    2862:	0c f0       	brlt	.+2      	; 0x2866 <LCD_DrawArc+0x92e>
    2864:	85 cf       	rjmp	.-246    	; 0x2770 <LCD_DrawArc+0x838>
          LCD_DrawPixel(i, y_new, color);
          prev_x = i;
          prev_y = y_new;
        }
      }
      if (end_angle <= 180)
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	fa 81       	ldd	r31, Y+2	; 0x02
    286a:	e5 3b       	cpi	r30, 0xB5	; 181
    286c:	f1 05       	cpc	r31, r1
    286e:	08 f0       	brcs	.+2      	; 0x2872 <LCD_DrawArc+0x93a>
    2870:	e4 c0       	rjmp	.+456    	; 0x2a3a <LCD_DrawArc+0xb02>
    2872:	fd a5       	ldd	r31, Y+45	; 0x2d
    2874:	fd 87       	std	Y+13, r31	; 0x0d
    2876:	2c a5       	ldd	r18, Y+44	; 0x2c
    2878:	29 83       	std	Y+1, r18	; 0x01
      {
        for (float i = x + r; i >= e_x; i -= increment_x)
    287a:	89 89       	ldd	r24, Y+17	; 0x11
    287c:	9a 89       	ldd	r25, Y+18	; 0x12
    287e:	aa 27       	eor	r26, r26
    2880:	97 fd       	sbrc	r25, 7
    2882:	a0 95       	com	r26
    2884:	ba 2f       	mov	r27, r26
    2886:	89 8b       	std	Y+17, r24	; 0x11
    2888:	9a 8b       	std	Y+18, r25	; 0x12
    288a:	ab 8b       	std	Y+19, r26	; 0x13
    288c:	bc 8b       	std	Y+20, r27	; 0x14
        {
          y_new = - sqrt(square(r) - square(i - x)) + y;
    288e:	29 85       	ldd	r18, Y+9	; 0x09
    2890:	3a 85       	ldd	r19, Y+10	; 0x0a
    2892:	44 27       	eor	r20, r20
    2894:	37 fd       	sbrc	r19, 7
    2896:	40 95       	com	r20
    2898:	54 2f       	mov	r21, r20
    289a:	29 87       	std	Y+9, r18	; 0x09
    289c:	3a 87       	std	Y+10, r19	; 0x0a
    289e:	4b 87       	std	Y+11, r20	; 0x0b
    28a0:	5c 87       	std	Y+12, r21	; 0x0c
    28a2:	58 c0       	rjmp	.+176    	; 0x2954 <LCD_DrawArc+0xa1c>
    28a4:	c5 01       	movw	r24, r10
    28a6:	b4 01       	movw	r22, r8
    28a8:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    28ac:	2b 01       	movw	r4, r22
    28ae:	3c 01       	movw	r6, r24
    28b0:	a7 01       	movw	r20, r14
    28b2:	96 01       	movw	r18, r12
    28b4:	fd 85       	ldd	r31, Y+13	; 0x0d
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	60 2f       	mov	r22, r16
    28ba:	71 2f       	mov	r23, r17
    28bc:	8f 2f       	mov	r24, r31
    28be:	9e 2f       	mov	r25, r30
    28c0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    28c4:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    28c8:	9b 01       	movw	r18, r22
    28ca:	ac 01       	movw	r20, r24
    28cc:	c3 01       	movw	r24, r6
    28ce:	b2 01       	movw	r22, r4
    28d0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    28d4:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    28d8:	9b 01       	movw	r18, r22
    28da:	ac 01       	movw	r20, r24
    28dc:	69 85       	ldd	r22, Y+9	; 0x09
    28de:	7a 85       	ldd	r23, Y+10	; 0x0a
    28e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e4:	2a a7       	std	Y+42, r18	; 0x2a
    28e6:	3b a7       	std	Y+43, r19	; 0x2b
    28e8:	48 a7       	std	Y+40, r20	; 0x28
    28ea:	59 a7       	std	Y+41, r21	; 0x29
    28ec:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    28f0:	2a a5       	ldd	r18, Y+42	; 0x2a
    28f2:	3b a5       	ldd	r19, Y+43	; 0x2b
    28f4:	48 a5       	ldd	r20, Y+40	; 0x28
    28f6:	59 a5       	ldd	r21, Y+41	; 0x29
    28f8:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    28fc:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    2900:	2b 01       	movw	r4, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2902:	3d 85       	ldd	r19, Y+13	; 0x0d
    2904:	29 81       	ldd	r18, Y+1	; 0x01
    2906:	60 2f       	mov	r22, r16
    2908:	71 2f       	mov	r23, r17
    290a:	83 2f       	mov	r24, r19
    290c:	92 2f       	mov	r25, r18
    290e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    2912:	3b 01       	movw	r6, r22
    2914:	4d 81       	ldd	r20, Y+5	; 0x05
    2916:	5e 81       	ldd	r21, Y+6	; 0x06
    2918:	46 17       	cp	r20, r22
    291a:	57 07       	cpc	r21, r23
    291c:	19 f4       	brne	.+6      	; 0x2924 <LCD_DrawArc+0x9ec>
    291e:	24 14       	cp	r2, r4
    2920:	35 04       	cpc	r3, r5
    2922:	49 f0       	breq	.+18     	; 0x2936 <LCD_DrawArc+0x9fe>
          {
            LCD_DrawPixel(i, y_new, color);
    2924:	12 01       	movw	r2, r4
    2926:	48 8d       	ldd	r20, Y+24	; 0x18
    2928:	59 8d       	ldd	r21, Y+25	; 0x19
    292a:	b2 01       	movw	r22, r4
    292c:	c3 01       	movw	r24, r6
    292e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      if (end_angle <= 180)
      {
        for (float i = x + r; i >= e_x; i -= increment_x)
        {
          y_new = - sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2932:	7e 82       	std	Y+6, r7	; 0x06
    2934:	6d 82       	std	Y+5, r6	; 0x05
          prev_y = y_new;
        }
      }
      if (end_angle <= 180)
      {
        for (float i = x + r; i >= e_x; i -= increment_x)
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	60 2f       	mov	r22, r16
    2944:	71 2f       	mov	r23, r17
    2946:	8f 2f       	mov	r24, r31
    2948:	9e 2f       	mov	r25, r30
    294a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    294e:	8b 01       	movw	r16, r22
    2950:	8d 87       	std	Y+13, r24	; 0x0d
    2952:	99 83       	std	Y+1, r25	; 0x01
    2954:	69 89       	ldd	r22, Y+17	; 0x11
    2956:	7a 89       	ldd	r23, Y+18	; 0x12
    2958:	8b 89       	ldd	r24, Y+19	; 0x13
    295a:	9c 89       	ldd	r25, Y+20	; 0x14
    295c:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	fd 85       	ldd	r31, Y+13	; 0x0d
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	60 2f       	mov	r22, r16
    296a:	71 2f       	mov	r23, r17
    296c:	8f 2f       	mov	r24, r31
    296e:	9e 2f       	mov	r25, r30
    2970:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    2974:	87 ff       	sbrs	r24, 7
    2976:	96 cf       	rjmp	.-212    	; 0x28a4 <LCD_DrawArc+0x96c>
    2978:	12 c1       	rjmp	.+548    	; 0x2b9e <LCD_DrawArc+0xc66>
      }
      else
      {
        for (float i = x + r; i >= x - r; i -= increment_x)
        {
          y_new = - sqrt(square(r) - square(i - x)) + y;
    297a:	c5 01       	movw	r24, r10
    297c:	b4 01       	movw	r22, r8
    297e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2982:	2b 01       	movw	r4, r22
    2984:	3c 01       	movw	r6, r24
    2986:	a7 01       	movw	r20, r14
    2988:	96 01       	movw	r18, r12
    298a:	bd 85       	ldd	r27, Y+13	; 0x0d
    298c:	ad 89       	ldd	r26, Y+21	; 0x15
    298e:	ee 89       	ldd	r30, Y+22	; 0x16
    2990:	1f 89       	ldd	r17, Y+23	; 0x17
    2992:	6b 2f       	mov	r22, r27
    2994:	7a 2f       	mov	r23, r26
    2996:	8e 2f       	mov	r24, r30
    2998:	91 2f       	mov	r25, r17
    299a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    299e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    29a2:	9b 01       	movw	r18, r22
    29a4:	ac 01       	movw	r20, r24
    29a6:	c3 01       	movw	r24, r6
    29a8:	b2 01       	movw	r22, r4
    29aa:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    29ae:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29be:	2a a7       	std	Y+42, r18	; 0x2a
    29c0:	3b a7       	std	Y+43, r19	; 0x2b
    29c2:	48 a7       	std	Y+40, r20	; 0x28
    29c4:	59 a7       	std	Y+41, r21	; 0x29
    29c6:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    29ca:	2a a5       	ldd	r18, Y+42	; 0x2a
    29cc:	3b a5       	ldd	r19, Y+43	; 0x2b
    29ce:	48 a5       	ldd	r20, Y+40	; 0x28
    29d0:	59 a5       	ldd	r21, Y+41	; 0x29
    29d2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    29d6:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    29da:	8b 01       	movw	r16, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    29dc:	5d 85       	ldd	r21, Y+13	; 0x0d
    29de:	4d 89       	ldd	r20, Y+21	; 0x15
    29e0:	3e 89       	ldd	r19, Y+22	; 0x16
    29e2:	2f 89       	ldd	r18, Y+23	; 0x17
    29e4:	65 2f       	mov	r22, r21
    29e6:	74 2f       	mov	r23, r20
    29e8:	83 2f       	mov	r24, r19
    29ea:	92 2f       	mov	r25, r18
    29ec:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    29f0:	3b 01       	movw	r6, r22
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	86 15       	cp	r24, r6
    29f8:	97 05       	cpc	r25, r7
    29fa:	19 f4       	brne	.+6      	; 0x2a02 <LCD_DrawArc+0xaca>
    29fc:	20 16       	cp	r2, r16
    29fe:	31 06       	cpc	r3, r17
    2a00:	49 f0       	breq	.+18     	; 0x2a14 <LCD_DrawArc+0xadc>
          {
            LCD_DrawPixel(i, y_new, color);
    2a02:	18 01       	movw	r2, r16
    2a04:	48 8d       	ldd	r20, Y+24	; 0x18
    2a06:	59 8d       	ldd	r21, Y+25	; 0x19
    2a08:	b8 01       	movw	r22, r16
    2a0a:	c3 01       	movw	r24, r6
    2a0c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
      else
      {
        for (float i = x + r; i >= x - r; i -= increment_x)
        {
          y_new = - sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2a10:	7e 82       	std	Y+6, r7	; 0x06
    2a12:	6d 82       	std	Y+5, r6	; 0x05
          }
        }
      }
      else
      {
        for (float i = x + r; i >= x - r; i -= increment_x)
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a1e:	ad 89       	ldd	r26, Y+21	; 0x15
    2a20:	ee 89       	ldd	r30, Y+22	; 0x16
    2a22:	1f 89       	ldd	r17, Y+23	; 0x17
    2a24:	6b 2f       	mov	r22, r27
    2a26:	7a 2f       	mov	r23, r26
    2a28:	8e 2f       	mov	r24, r30
    2a2a:	91 2f       	mov	r25, r17
    2a2c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2a30:	6d 87       	std	Y+13, r22	; 0x0d
    2a32:	7d 8b       	std	Y+21, r23	; 0x15
    2a34:	8e 8b       	std	Y+22, r24	; 0x16
    2a36:	9f 8b       	std	Y+23, r25	; 0x17
    2a38:	19 c0       	rjmp	.+50     	; 0x2a6c <LCD_DrawArc+0xb34>
    2a3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a3e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2a40:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2a42:	8a 1b       	sub	r24, r26
    2a44:	9b 0b       	sbc	r25, r27
    2a46:	9c 01       	movw	r18, r24
    2a48:	44 27       	eor	r20, r20
    2a4a:	37 fd       	sbrc	r19, 7
    2a4c:	40 95       	com	r20
    2a4e:	54 2f       	mov	r21, r20
    2a50:	29 83       	std	Y+1, r18	; 0x01
    2a52:	3a 83       	std	Y+2, r19	; 0x02
    2a54:	4b 83       	std	Y+3, r20	; 0x03
    2a56:	5c 83       	std	Y+4, r21	; 0x04
        {
          y_new = - sqrt(square(r) - square(i - x)) + y;
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	aa 27       	eor	r26, r26
    2a5e:	97 fd       	sbrc	r25, 7
    2a60:	a0 95       	com	r26
    2a62:	ba 2f       	mov	r27, r26
    2a64:	8a 8f       	std	Y+26, r24	; 0x1a
    2a66:	9b 8f       	std	Y+27, r25	; 0x1b
    2a68:	ac 8f       	std	Y+28, r26	; 0x1c
    2a6a:	bd 8f       	std	Y+29, r27	; 0x1d
          }
        }
      }
      else
      {
        for (float i = x + r; i >= x - r; i -= increment_x)
    2a6c:	69 81       	ldd	r22, Y+1	; 0x01
    2a6e:	7a 81       	ldd	r23, Y+2	; 0x02
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2a78:	2b 01       	movw	r4, r22
    2a7a:	3c 01       	movw	r6, r24
    2a7c:	76 2f       	mov	r23, r22
    2a7e:	27 2f       	mov	r18, r23
    2a80:	35 2d       	mov	r19, r5
    2a82:	46 2d       	mov	r20, r6
    2a84:	57 2d       	mov	r21, r7
    2a86:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a88:	ad 89       	ldd	r26, Y+21	; 0x15
    2a8a:	ee 89       	ldd	r30, Y+22	; 0x16
    2a8c:	1f 89       	ldd	r17, Y+23	; 0x17
    2a8e:	6b 2f       	mov	r22, r27
    2a90:	7a 2f       	mov	r23, r26
    2a92:	8e 2f       	mov	r24, r30
    2a94:	91 2f       	mov	r25, r17
    2a96:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    2a9a:	87 ff       	sbrs	r24, 7
    2a9c:	6e cf       	rjmp	.-292    	; 0x297a <LCD_DrawArc+0xa42>
    2a9e:	5a c0       	rjmp	.+180    	; 0x2b54 <LCD_DrawArc+0xc1c>
            prev_y = y_new;
          }
        }
        for (float i = x - r; i <= e_x; i += increment_x)
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
    2aa0:	c5 01       	movw	r24, r10
    2aa2:	b4 01       	movw	r22, r8
    2aa4:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2aa8:	69 83       	std	Y+1, r22	; 0x01
    2aaa:	7a 83       	std	Y+2, r23	; 0x02
    2aac:	8b 83       	std	Y+3, r24	; 0x03
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	a7 01       	movw	r20, r14
    2ab2:	96 01       	movw	r18, r12
    2ab4:	64 2d       	mov	r22, r4
    2ab6:	75 2d       	mov	r23, r5
    2ab8:	86 2d       	mov	r24, r6
    2aba:	97 2d       	mov	r25, r7
    2abc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2ac0:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    2ac4:	9b 01       	movw	r18, r22
    2ac6:	ac 01       	movw	r20, r24
    2ac8:	69 81       	ldd	r22, Y+1	; 0x01
    2aca:	7a 81       	ldd	r23, Y+2	; 0x02
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    2ad4:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    2ad8:	69 83       	std	Y+1, r22	; 0x01
    2ada:	7a 83       	std	Y+2, r23	; 0x02
    2adc:	8b 83       	std	Y+3, r24	; 0x03
    2ade:	9c 83       	std	Y+4, r25	; 0x04
    2ae0:	69 85       	ldd	r22, Y+9	; 0x09
    2ae2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ae8:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2aec:	9b 01       	movw	r18, r22
    2aee:	ac 01       	movw	r20, r24
    2af0:	69 81       	ldd	r22, Y+1	; 0x01
    2af2:	7a 81       	ldd	r23, Y+2	; 0x02
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    2afc:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__fixsfsi>
    2b00:	8b 01       	movw	r16, r22
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2b02:	64 2d       	mov	r22, r4
    2b04:	75 2d       	mov	r23, r5
    2b06:	86 2d       	mov	r24, r6
    2b08:	97 2d       	mov	r25, r7
    2b0a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    2b0e:	9b 01       	movw	r18, r22
    2b10:	ad 81       	ldd	r26, Y+5	; 0x05
    2b12:	be 81       	ldd	r27, Y+6	; 0x06
    2b14:	a6 17       	cp	r26, r22
    2b16:	b7 07       	cpc	r27, r23
    2b18:	19 f4       	brne	.+6      	; 0x2b20 <LCD_DrawArc+0xbe8>
    2b1a:	20 16       	cp	r2, r16
    2b1c:	31 06       	cpc	r3, r17
    2b1e:	69 f0       	breq	.+26     	; 0x2b3a <LCD_DrawArc+0xc02>
          {
            LCD_DrawPixel(i, y_new, color);
    2b20:	18 01       	movw	r2, r16
    2b22:	48 8d       	ldd	r20, Y+24	; 0x18
    2b24:	59 8d       	ldd	r21, Y+25	; 0x19
    2b26:	b8 01       	movw	r22, r16
    2b28:	c9 01       	movw	r24, r18
    2b2a:	2a a7       	std	Y+42, r18	; 0x2a
    2b2c:	3b a7       	std	Y+43, r19	; 0x2b
    2b2e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <LCD_DrawPixel>
          }
        }
        for (float i = x - r; i <= e_x; i += increment_x)
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
          if ((prev_x != (unsigned int)i) || (prev_y != (unsigned int)y_new))
    2b32:	2a a5       	ldd	r18, Y+42	; 0x2a
    2b34:	3b a5       	ldd	r19, Y+43	; 0x2b
    2b36:	3e 83       	std	Y+6, r19	; 0x06
    2b38:	2d 83       	std	Y+5, r18	; 0x05
            LCD_DrawPixel(i, y_new, color);
            prev_x = i;
            prev_y = y_new;
          }
        }
        for (float i = x - r; i <= e_x; i += increment_x)
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	64 2d       	mov	r22, r4
    2b44:	75 2d       	mov	r23, r5
    2b46:	86 2d       	mov	r24, r6
    2b48:	97 2d       	mov	r25, r7
    2b4a:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    2b4e:	2b 01       	movw	r4, r22
    2b50:	3c 01       	movw	r6, r24
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <LCD_DrawArc+0xc44>
    2b54:	29 89       	ldd	r18, Y+17	; 0x11
    2b56:	3a 89       	ldd	r19, Y+18	; 0x12
    2b58:	44 27       	eor	r20, r20
    2b5a:	37 fd       	sbrc	r19, 7
    2b5c:	40 95       	com	r20
    2b5e:	54 2f       	mov	r21, r20
    2b60:	29 8b       	std	Y+17, r18	; 0x11
    2b62:	3a 8b       	std	Y+18, r19	; 0x12
    2b64:	4b 8b       	std	Y+19, r20	; 0x13
    2b66:	5c 8b       	std	Y+20, r21	; 0x14
        {
          y_new = sqrt(square(r) - square(i - x)) + y;
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	aa 27       	eor	r26, r26
    2b6e:	97 fd       	sbrc	r25, 7
    2b70:	a0 95       	com	r26
    2b72:	ba 2f       	mov	r27, r26
    2b74:	89 87       	std	Y+9, r24	; 0x09
    2b76:	9a 87       	std	Y+10, r25	; 0x0a
    2b78:	ab 87       	std	Y+11, r26	; 0x0b
    2b7a:	bc 87       	std	Y+12, r27	; 0x0c
            LCD_DrawPixel(i, y_new, color);
            prev_x = i;
            prev_y = y_new;
          }
        }
        for (float i = x - r; i <= e_x; i += increment_x)
    2b7c:	69 89       	ldd	r22, Y+17	; 0x11
    2b7e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b80:	8b 89       	ldd	r24, Y+19	; 0x13
    2b82:	9c 89       	ldd	r25, Y+20	; 0x14
    2b84:	0e 94 1b 20 	call	0x4036	; 0x4036 <__floatsisf>
    2b88:	9b 01       	movw	r18, r22
    2b8a:	ac 01       	movw	r20, r24
    2b8c:	64 2d       	mov	r22, r4
    2b8e:	75 2d       	mov	r23, r5
    2b90:	86 2d       	mov	r24, r6
    2b92:	97 2d       	mov	r25, r7
    2b94:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__cmpsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <LCD_DrawArc+0xc66>
    2b9c:	81 cf       	rjmp	.-254    	; 0x2aa0 <LCD_DrawArc+0xb68>
          }
        }
      }
    }
  }
}
    2b9e:	ad 96       	adiw	r28, 0x2d	; 45
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	df 90       	pop	r13
    2bb8:	cf 90       	pop	r12
    2bba:	bf 90       	pop	r11
    2bbc:	af 90       	pop	r10
    2bbe:	9f 90       	pop	r9
    2bc0:	8f 90       	pop	r8
    2bc2:	7f 90       	pop	r7
    2bc4:	6f 90       	pop	r6
    2bc6:	5f 90       	pop	r5
    2bc8:	4f 90       	pop	r4
    2bca:	3f 90       	pop	r3
    2bcc:	2f 90       	pop	r2
    2bce:	08 95       	ret

00002bd0 <LCD_FillRectangle>:

// рисует закрашенный пр€моугольник
// x1, y1 - координаты левого верхнего угла
// x2, y2 - координаты правого нижнего угла
void LCD_FillRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
{
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	6c 01       	movw	r12, r24
    2bee:	5b 01       	movw	r10, r22
    2bf0:	94 2e       	mov	r9, r20
    2bf2:	85 2e       	mov	r8, r21
    2bf4:	72 2e       	mov	r7, r18
    2bf6:	63 2e       	mov	r6, r19
  LCD_SetWorkAreaXY(x1, y1, x2, y2);
    2bf8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <LCD_SetWorkAreaXY>
  for (unsigned int i = x1 < x2 ? x1 : x2; i <= ((x1 < x2) ? x2 : x1); i++)
    2bfc:	c9 2d       	mov	r28, r9
    2bfe:	d8 2d       	mov	r29, r8
    2c00:	cc 16       	cp	r12, r28
    2c02:	dd 06       	cpc	r13, r29
    2c04:	d0 f4       	brcc	.+52     	; 0x2c3a <LCD_FillRectangle+0x6a>
    2c06:	e6 01       	movw	r28, r12
    2c08:	18 c0       	rjmp	.+48     	; 0x2c3a <LCD_FillRectangle+0x6a>
    for (unsigned int j = y1 < y2 ? y1 : y2; j <= ((y1 < y2) ? y2 : y1); j++)
    2c0a:	e7 2c       	mov	r14, r7
    2c0c:	f6 2c       	mov	r15, r6
    2c0e:	ae 14       	cp	r10, r14
    2c10:	bf 04       	cpc	r11, r15
    2c12:	48 f4       	brcc	.+18     	; 0x2c26 <LCD_FillRectangle+0x56>
    2c14:	75 01       	movw	r14, r10
    2c16:	07 c0       	rjmp	.+14     	; 0x2c26 <LCD_FillRectangle+0x56>
    {
      LCD_Write_DATA(color >> 8, color);
    2c18:	60 2f       	mov	r22, r16
    2c1a:	81 2f       	mov	r24, r17
    2c1c:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_Write_DATA>
// x2, y2 - координаты правого нижнего угла
void LCD_FillRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
{
  LCD_SetWorkAreaXY(x1, y1, x2, y2);
  for (unsigned int i = x1 < x2 ? x1 : x2; i <= ((x1 < x2) ? x2 : x1); i++)
    for (unsigned int j = y1 < y2 ? y1 : y2; j <= ((y1 < y2) ? y2 : y1); j++)
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	e8 1a       	sub	r14, r24
    2c24:	f8 0a       	sbc	r15, r24
    2c26:	e7 2d       	mov	r30, r7
    2c28:	f6 2d       	mov	r31, r6
    2c2a:	ea 15       	cp	r30, r10
    2c2c:	fb 05       	cpc	r31, r11
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <LCD_FillRectangle+0x62>
    2c30:	f5 01       	movw	r30, r10
    2c32:	ee 15       	cp	r30, r14
    2c34:	ff 05       	cpc	r31, r15
    2c36:	80 f7       	brcc	.-32     	; 0x2c18 <LCD_FillRectangle+0x48>
// x1, y1 - координаты левого верхнего угла
// x2, y2 - координаты правого нижнего угла
void LCD_FillRectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int color)
{
  LCD_SetWorkAreaXY(x1, y1, x2, y2);
  for (unsigned int i = x1 < x2 ? x1 : x2; i <= ((x1 < x2) ? x2 : x1); i++)
    2c38:	21 96       	adiw	r28, 0x01	; 1
    2c3a:	e9 2d       	mov	r30, r9
    2c3c:	f8 2d       	mov	r31, r8
    2c3e:	ec 15       	cp	r30, r12
    2c40:	fd 05       	cpc	r31, r13
    2c42:	08 f4       	brcc	.+2      	; 0x2c46 <LCD_FillRectangle+0x76>
    2c44:	f6 01       	movw	r30, r12
    2c46:	ec 17       	cp	r30, r28
    2c48:	fd 07       	cpc	r31, r29
    2c4a:	f8 f6       	brcc	.-66     	; 0x2c0a <LCD_FillRectangle+0x3a>
    for (unsigned int j = y1 < y2 ? y1 : y2; j <= ((y1 < y2) ? y2 : y1); j++)
    {
      LCD_Write_DATA(color >> 8, color);
      //_delay_ms(200);
    }     
}
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	ff 90       	pop	r15
    2c56:	ef 90       	pop	r14
    2c58:	df 90       	pop	r13
    2c5a:	cf 90       	pop	r12
    2c5c:	bf 90       	pop	r11
    2c5e:	af 90       	pop	r10
    2c60:	9f 90       	pop	r9
    2c62:	8f 90       	pop	r8
    2c64:	7f 90       	pop	r7
    2c66:	6f 90       	pop	r6
    2c68:	08 95       	ret

00002c6a <LCD_SetFont>:

void LCD_SetFont(const unsigned char *font)
{
  cfont.font = font;
    2c6a:	90 93 bc 00 	sts	0x00BC, r25
    2c6e:	80 93 bb 00 	sts	0x00BB, r24
  cfont.x_size = pgm_read_byte(&cfont.font[0]);
    2c72:	fc 01       	movw	r30, r24
    2c74:	24 91       	lpm	r18, Z
    2c76:	ed eb       	ldi	r30, 0xBD	; 189
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	20 83       	st	Z, r18
    2c7c:	11 82       	std	Z+1, r1	; 0x01
  cfont.y_size = pgm_read_byte(&cfont.font[1]);
    2c7e:	fc 01       	movw	r30, r24
    2c80:	31 96       	adiw	r30, 0x01	; 1
    2c82:	e4 91       	lpm	r30, Z
    2c84:	af eb       	ldi	r26, 0xBF	; 191
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	ec 93       	st	X, r30
    2c8a:	11 96       	adiw	r26, 0x01	; 1
    2c8c:	1c 92       	st	X, r1
  cfont.offset = pgm_read_byte(&cfont.font[2]);
    2c8e:	fc 01       	movw	r30, r24
    2c90:	32 96       	adiw	r30, 0x02	; 2
    2c92:	e4 91       	lpm	r30, Z
    2c94:	e0 93 c1 00 	sts	0x00C1, r30
  cfont.numchars = pgm_read_byte(&cfont.font[3]);
    2c98:	fc 01       	movw	r30, r24
    2c9a:	33 96       	adiw	r30, 0x03	; 3
    2c9c:	84 91       	lpm	r24, Z
    2c9e:	80 93 c2 00 	sts	0x00C2, r24
    2ca2:	08 95       	ret

00002ca4 <LCD_DrawChar>:
}

// рисует символ ch в позиции (x, y)
void LCD_DrawChar(unsigned int x, unsigned int y, unsigned char ch)
{
    2ca4:	6f 92       	push	r6
    2ca6:	7f 92       	push	r7
    2ca8:	8f 92       	push	r8
    2caa:	9f 92       	push	r9
    2cac:	af 92       	push	r10
    2cae:	bf 92       	push	r11
    2cb0:	cf 92       	push	r12
    2cb2:	df 92       	push	r13
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	8c 01       	movw	r16, r24
    2cc2:	5b 01       	movw	r10, r22
    2cc4:	74 2e       	mov	r7, r20
  unsigned char sim;
  unsigned int pos;
  unsigned char tmp_x;
  
  tmp_x = ceil(cfont.x_size / 8);
    2cc6:	80 90 bd 00 	lds	r8, 0x00BD
    2cca:	90 90 be 00 	lds	r9, 0x00BE
    2cce:	b4 01       	movw	r22, r8
    2cd0:	e3 e0       	ldi	r30, 0x03	; 3
    2cd2:	76 95       	lsr	r23
    2cd4:	67 95       	ror	r22
    2cd6:	ea 95       	dec	r30
    2cd8:	e1 f7       	brne	.-8      	; 0x2cd2 <LCD_DrawChar+0x2e>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    2ce2:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <ceil>
    2ce6:	6b 01       	movw	r12, r22
    2ce8:	7c 01       	movw	r14, r24
  pos = (ch - cfont.offset) * (tmp_x * cfont.y_size) + 4;
    2cea:	60 90 c1 00 	lds	r6, 0x00C1
    2cee:	c0 91 bf 00 	lds	r28, 0x00BF
    2cf2:	d0 91 c0 00 	lds	r29, 0x00C0
  LCD_SetWorkAreaXY(x, y, x + cfont.x_size - 1, y + cfont.y_size - 1);
    2cf6:	9e 01       	movw	r18, r28
    2cf8:	21 50       	subi	r18, 0x01	; 1
    2cfa:	31 09       	sbc	r19, r1
    2cfc:	2a 0d       	add	r18, r10
    2cfe:	3b 1d       	adc	r19, r11
    2d00:	a4 01       	movw	r20, r8
    2d02:	41 50       	subi	r20, 0x01	; 1
    2d04:	51 09       	sbc	r21, r1
    2d06:	40 0f       	add	r20, r16
    2d08:	51 1f       	adc	r21, r17
    2d0a:	b5 01       	movw	r22, r10
    2d0c:	c8 01       	movw	r24, r16
    2d0e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <LCD_SetWorkAreaXY>
  if (lcd_param.orient == LANDSCAPE)
    2d12:	80 91 b0 00 	lds	r24, 0x00B0
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <LCD_DrawChar+0x78>
    2d1a:	50 c0       	rjmp	.+160    	; 0x2dbc <LCD_DrawChar+0x118>
{
  unsigned char sim;
  unsigned int pos;
  unsigned char tmp_x;
  
  tmp_x = ceil(cfont.x_size / 8);
    2d1c:	c7 01       	movw	r24, r14
    2d1e:	b6 01       	movw	r22, r12
    2d20:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
  pos = (ch - cfont.offset) * (tmp_x * cfont.y_size) + 4;
    2d24:	e6 2e       	mov	r14, r22
    2d26:	f1 2c       	mov	r15, r1
    2d28:	87 2d       	mov	r24, r7
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	86 19       	sub	r24, r6
    2d2e:	91 09       	sbc	r25, r1
    2d30:	8c 9f       	mul	r24, r28
    2d32:	90 01       	movw	r18, r0
    2d34:	8d 9f       	mul	r24, r29
    2d36:	30 0d       	add	r19, r0
    2d38:	9c 9f       	mul	r25, r28
    2d3a:	30 0d       	add	r19, r0
    2d3c:	11 24       	eor	r1, r1
    2d3e:	2e 9d       	mul	r18, r14
    2d40:	80 01       	movw	r16, r0
    2d42:	2f 9d       	mul	r18, r15
    2d44:	10 0d       	add	r17, r0
    2d46:	3e 9d       	mul	r19, r14
    2d48:	10 0d       	add	r17, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	0c 5f       	subi	r16, 0xFC	; 252
    2d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d50:	b1 2c       	mov	r11, r1
    2d52:	24 c0       	rjmp	.+72     	; 0x2d9c <LCD_DrawChar+0xf8>
  LCD_SetWorkAreaXY(x, y, x + cfont.x_size - 1, y + cfont.y_size - 1);
  if (lcd_param.orient == LANDSCAPE)
  {
    for (unsigned char i = 0; i < tmp_x * cfont.y_size; i++)
    {
      sim = pgm_read_byte(&cfont.font[pos + i]);
    2d54:	80 0f       	add	r24, r16
    2d56:	91 1f       	adc	r25, r17
    2d58:	e0 91 bb 00 	lds	r30, 0x00BB
    2d5c:	f0 91 bc 00 	lds	r31, 0x00BC
    2d60:	e8 0f       	add	r30, r24
    2d62:	f9 1f       	adc	r31, r25
    2d64:	e4 91       	lpm	r30, Z
    2d66:	c7 e0       	ldi	r28, 0x07	; 7
    2d68:	d0 e0       	ldi	r29, 0x00	; 0
      for (unsigned char j = 8 ; j > 0; j--)
      {
        if ((sim & (1 << (j - 1))) != 0)
    2d6a:	ce 2e       	mov	r12, r30
    2d6c:	d1 2c       	mov	r13, r1
    2d6e:	c6 01       	movw	r24, r12
    2d70:	0c 2e       	mov	r0, r28
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <LCD_DrawChar+0xd4>
    2d74:	95 95       	asr	r25
    2d76:	87 95       	ror	r24
    2d78:	0a 94       	dec	r0
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <LCD_DrawChar+0xd0>
    2d7c:	80 ff       	sbrs	r24, 0
    2d7e:	05 c0       	rjmp	.+10     	; 0x2d8a <LCD_DrawChar+0xe6>
        {
          LCD_Write_DATA(lcd_param.fnt_color_h, lcd_param.fnt_color_l);
    2d80:	60 91 b7 00 	lds	r22, 0x00B7
    2d84:	80 91 b6 00 	lds	r24, 0x00B6
    2d88:	04 c0       	rjmp	.+8      	; 0x2d92 <LCD_DrawChar+0xee>
        }
        else
        {
          LCD_Write_DATA(lcd_param.bg_color_h, lcd_param.bg_color_l);
    2d8a:	60 91 b9 00 	lds	r22, 0x00B9
    2d8e:	80 91 b8 00 	lds	r24, 0x00B8
    2d92:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_Write_DATA>
    2d96:	21 97       	sbiw	r28, 0x01	; 1
    2d98:	50 f7       	brcc	.-44     	; 0x2d6e <LCD_DrawChar+0xca>
  tmp_x = ceil(cfont.x_size / 8);
  pos = (ch - cfont.offset) * (tmp_x * cfont.y_size) + 4;
  LCD_SetWorkAreaXY(x, y, x + cfont.x_size - 1, y + cfont.y_size - 1);
  if (lcd_param.orient == LANDSCAPE)
  {
    for (unsigned char i = 0; i < tmp_x * cfont.y_size; i++)
    2d9a:	b3 94       	inc	r11
    2d9c:	8b 2d       	mov	r24, r11
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	40 91 bf 00 	lds	r20, 0x00BF
    2da4:	50 91 c0 00 	lds	r21, 0x00C0
    2da8:	e4 9e       	mul	r14, r20
    2daa:	90 01       	movw	r18, r0
    2dac:	e5 9e       	mul	r14, r21
    2dae:	30 0d       	add	r19, r0
    2db0:	f4 9e       	mul	r15, r20
    2db2:	30 0d       	add	r19, r0
    2db4:	11 24       	eor	r1, r1
    2db6:	82 17       	cp	r24, r18
    2db8:	93 07       	cpc	r25, r19
    2dba:	60 f2       	brcs	.-104    	; 0x2d54 <LCD_DrawChar+0xb0>
          LCD_Write_DATA(lcd_param.bg_color_h, lcd_param.bg_color_l);
        }
      }
    }
  }
}
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	9f 90       	pop	r9
    2dd2:	8f 90       	pop	r8
    2dd4:	7f 90       	pop	r7
    2dd6:	6f 90       	pop	r6
    2dd8:	08 95       	ret

00002dda <LCD_DrawText>:
  }
}*/

// вывод текста
void LCD_DrawText(unsigned int x, unsigned int y, unsigned char* text)
{
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	7b 01       	movw	r14, r22
    2de8:	8a 01       	movw	r16, r20
  unsigned int tek_x, tek_y;
  unsigned int tek_char = 0;
  
  tek_x = x;
    2dea:	ec 01       	movw	r28, r24
  tek_y = y;
  while(text[tek_char] != '\0')
    2dec:	0a c0       	rjmp	.+20     	; 0x2e02 <LCD_DrawText+0x28>
  {
    LCD_DrawChar(tek_x, tek_y, text[tek_char]);
    2dee:	b7 01       	movw	r22, r14
    2df0:	ce 01       	movw	r24, r28
    2df2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <LCD_DrawChar>
    tek_char++;
    tek_x += cfont.x_size;
    2df6:	80 91 bd 00 	lds	r24, 0x00BD
    2dfa:	90 91 be 00 	lds	r25, 0x00BE
    2dfe:	c8 0f       	add	r28, r24
    2e00:	d9 1f       	adc	r29, r25
  unsigned int tek_x, tek_y;
  unsigned int tek_char = 0;
  
  tek_x = x;
  tek_y = y;
  while(text[tek_char] != '\0')
    2e02:	f8 01       	movw	r30, r16
    2e04:	41 91       	ld	r20, Z+
    2e06:	8f 01       	movw	r16, r30
    2e08:	41 11       	cpse	r20, r1
    2e0a:	f1 cf       	rjmp	.-30     	; 0x2dee <LCD_DrawText+0x14>
  {
    LCD_DrawChar(tek_x, tek_y, text[tek_char]);
    tek_char++;
    tek_x += cfont.x_size;
  }
}
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	ff 90       	pop	r15
    2e16:	ef 90       	pop	r14
    2e18:	08 95       	ret

00002e1a <initTimer0>:
}

// настройка таймера 0 дл€ обновлени€ времени
void initTimer0()
{
  TIMSK |= (1 << OCIE0); // разрешаем прерывание по совпадению
    2e1a:	89 b7       	in	r24, 0x39	; 57
    2e1c:	82 60       	ori	r24, 0x02	; 2
    2e1e:	89 bf       	out	0x39, r24	; 57
  TCCR0 = (0 << WGM01) | (0 < WGM00) // нормальный режим работы таймера
    2e20:	85 e0       	ldi	r24, 0x05	; 5
    2e22:	83 bf       	out	0x33, r24	; 51
          | (0 < COM01) | (0 < COM00) // порт OC0 не активен
          | (1 << CS02) | (0 << CS01) | (1 << CS00); // деление частоты на 1024
  OCR0 = 195; // число дл€ сравнени€, т.е. будет прерывание когда счетчик таймера досчитает до 195
    2e24:	83 ec       	ldi	r24, 0xC3	; 195
    2e26:	8c bf       	out	0x3c, r24	; 60
              // счетчик таймера достигнет этого значени€ за 0.01 секунду
  TCNT0 = 0; // обнул€ем счетчик
    2e28:	12 be       	out	0x32, r1	; 50
    2e2a:	08 95       	ret

00002e2c <initADC>:
}

// настройка ј÷ѕ
void initADC()
{
  ADMUX = (0 << REFS1) | (0 << REFS0) // используем внешний источник опорного напр€жени€, который равен 4,69¬
    2e2c:	17 b8       	out	0x07, r1	; 7
          | (0 << ADLAR); // 2 старших бита в ADCH
  ADCSRA = (1 << ADEN) // включаем ј÷ѕ
    2e2e:	87 ec       	ldi	r24, 0xC7	; 199
    2e30:	86 b9       	out	0x06, r24	; 6
    2e32:	08 95       	ret

00002e34 <getADC>:
}

// возвращает напр€жение на канале ј÷ѕ
unsigned int getADC(unsigned char channel_settings)
{
  ADMUX = channel_settings;
    2e34:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADSC); // запускаем преобразование
    2e36:	36 9a       	sbi	0x06, 6	; 6
  
  while ((ADCSRA & (1 << ADIF)) == 0); // ждем окончани€ преобразовани€
    2e38:	34 9b       	sbis	0x06, 4	; 6
    2e3a:	fe cf       	rjmp	.-4      	; 0x2e38 <getADC+0x4>
  return ((unsigned long)ADCW * (unsigned long)ADC_DISCR) / 1000;
    2e3c:	24 b1       	in	r18, 0x04	; 4
    2e3e:	35 b1       	in	r19, 0x05	; 5
    2e40:	a9 ee       	ldi	r26, 0xE9	; 233
    2e42:	b1 e1       	ldi	r27, 0x11	; 17
    2e44:	0e 94 9b 22 	call	0x4536	; 0x4536 <__umulhisi3>
    2e48:	28 ee       	ldi	r18, 0xE8	; 232
    2e4a:	33 e0       	ldi	r19, 0x03	; 3
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	0e 94 5d 22 	call	0x44ba	; 0x44ba <__udivmodsi4>
}
    2e54:	c9 01       	movw	r24, r18
    2e56:	08 95       	ret

00002e58 <update_temperature>:

void update_temperature()
{
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <update_temperature+0x6>
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <update_temperature+0x8>
    2e60:	1f 92       	push	r1
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
  unsigned int adc_res;
  unsigned char temp[] = "12.4";
    2e66:	85 e0       	ldi	r24, 0x05	; 5
    2e68:	e2 e7       	ldi	r30, 0x72	; 114
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	de 01       	movw	r26, r28
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	01 90       	ld	r0, Z+
    2e72:	0d 92       	st	X+, r0
    2e74:	8a 95       	dec	r24
    2e76:	e1 f7       	brne	.-8      	; 0x2e70 <update_temperature+0x18>
  
  adc_res = abs(getADC(ADC_TEMP) - 2730);
    2e78:	84 e0       	ldi	r24, 0x04	; 4
    2e7a:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <getADC>
    2e7e:	9c 01       	movw	r18, r24
    2e80:	2a 5a       	subi	r18, 0xAA	; 170
    2e82:	3a 40       	sbci	r19, 0x0A	; 10
    2e84:	37 ff       	sbrs	r19, 7
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <update_temperature+0x36>
    2e88:	31 95       	neg	r19
    2e8a:	21 95       	neg	r18
    2e8c:	31 09       	sbc	r19, r1
  temp[0] = (adc_res / 100 > 9 ? adc_res / 1000 : adc_res / 100) + '0';
    2e8e:	28 3e       	cpi	r18, 0xE8	; 232
    2e90:	83 e0       	ldi	r24, 0x03	; 3
    2e92:	38 07       	cpc	r19, r24
    2e94:	20 f0       	brcs	.+8      	; 0x2e9e <update_temperature+0x46>
    2e96:	c9 01       	movw	r24, r18
    2e98:	68 ee       	ldi	r22, 0xE8	; 232
    2e9a:	73 e0       	ldi	r23, 0x03	; 3
    2e9c:	03 c0       	rjmp	.+6      	; 0x2ea4 <update_temperature+0x4c>
    2e9e:	c9 01       	movw	r24, r18
    2ea0:	64 e6       	ldi	r22, 0x64	; 100
    2ea2:	70 e0       	ldi	r23, 0x00	; 0
    2ea4:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2ea8:	60 5d       	subi	r22, 0xD0	; 208
    2eaa:	69 83       	std	Y+1, r22	; 0x01
  temp[1] = (adc_res / 10) % 10 + '0';
    2eac:	ea e0       	ldi	r30, 0x0A	; 10
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	bf 01       	movw	r22, r30
    2eb4:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2eb8:	28 2f       	mov	r18, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	bf 01       	movw	r22, r30
    2ebe:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2ec2:	80 5d       	subi	r24, 0xD0	; 208
    2ec4:	8a 83       	std	Y+2, r24	; 0x02
  temp[3] = adc_res % 10 + '0';
    2ec6:	20 5d       	subi	r18, 0xD0	; 208
    2ec8:	2c 83       	std	Y+4, r18	; 0x04
  LCD_SetFontColor_Word(VGA_LIME);
    2eca:	80 ee       	ldi	r24, 0xE0	; 224
    2ecc:	97 e0       	ldi	r25, 0x07	; 7
    2ece:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LCD_SetFontColor_Word>
  LCD_SetFont(BigFont);
    2ed2:	82 e7       	ldi	r24, 0x72	; 114
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_SetFont>
  LCD_DrawText(128, 100, temp);
    2eda:	ae 01       	movw	r20, r28
    2edc:	4f 5f       	subi	r20, 0xFF	; 255
    2ede:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee0:	64 e6       	ldi	r22, 0x64	; 100
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	80 e8       	ldi	r24, 0x80	; 128
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_DrawText>
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2efc:	1f 92       	push	r1
    2efe:	0f 92       	push	r0
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	0f 92       	push	r0
    2f04:	11 24       	eor	r1, r1
    2f06:	8f 93       	push	r24
    2f08:	9f 93       	push	r25
  // прерывание сра
  // необходимо 100 срабатываний прерывани€ чтобы прошла секунда
  if(count_interrupt_timer0++ == 100)
    2f0a:	80 91 a1 00 	lds	r24, 0x00A1
    2f0e:	98 2f       	mov	r25, r24
    2f10:	9f 5f       	subi	r25, 0xFF	; 255
    2f12:	90 93 a1 00 	sts	0x00A1, r25
    2f16:	84 36       	cpi	r24, 0x64	; 100
    2f18:	59 f4       	brne	.+22     	; 0x2f30 <__vector_10+0x34>
  {
    TCNT0 = 0;
    2f1a:	12 be       	out	0x32, r1	; 50
    count_interrupt_timer0 = 0;
    2f1c:	10 92 a1 00 	sts	0x00A1, r1
    updateTime = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	80 93 a2 00 	sts	0x00A2, r24
    temp_inter++;
    2f26:	80 91 a0 00 	lds	r24, 0x00A0
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	80 93 a0 00 	sts	0x00A0, r24
  }
}
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	0f 90       	pop	r0
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	0f 90       	pop	r0
    2f3a:	1f 90       	pop	r1
    2f3c:	18 95       	reti

00002f3e <drawValueZone>:

// отображает значение тока на индикаторе
// zone - номер индикатора
// ampers - протекающий ток в милиамперах
void drawValueZone(unsigned char zone_x, unsigned char zone_y, unsigned int ampers)
{
    2f3e:	2f 92       	push	r2
    2f40:	3f 92       	push	r3
    2f42:	4f 92       	push	r4
    2f44:	5f 92       	push	r5
    2f46:	6f 92       	push	r6
    2f48:	7f 92       	push	r7
    2f4a:	8f 92       	push	r8
    2f4c:	9f 92       	push	r9
    2f4e:	af 92       	push	r10
    2f50:	bf 92       	push	r11
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	1f 93       	push	r17
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	2d 97       	sbiw	r28, 0x0d	; 13
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	28 2e       	mov	r2, r24
    2f74:	16 2f       	mov	r17, r22
    2f76:	7a 01       	movw	r14, r20
  unsigned char string_value[] = "99.9";
    2f78:	95 e0       	ldi	r25, 0x05	; 5
    2f7a:	e7 e7       	ldi	r30, 0x77	; 119
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	de 01       	movw	r26, r28
    2f80:	11 96       	adiw	r26, 0x01	; 1
    2f82:	01 90       	ld	r0, Z+
    2f84:	0d 92       	st	X+, r0
    2f86:	9a 95       	dec	r25
    2f88:	e1 f7       	brne	.-8      	; 0x2f82 <drawValueZone+0x44>
  unsigned int x1, x2, y1, y2;
  double koef;
  
  string_value[0] = ampers / 10000 + '0';
    2f8a:	ca 01       	movw	r24, r20
    2f8c:	60 e1       	ldi	r22, 0x10	; 16
    2f8e:	77 e2       	ldi	r23, 0x27	; 39
    2f90:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2f94:	60 5d       	subi	r22, 0xD0	; 208
    2f96:	69 83       	std	Y+1, r22	; 0x01
  string_value[1] = (ampers / 1000) % 10 + '0';
    2f98:	c7 01       	movw	r24, r14
    2f9a:	68 ee       	ldi	r22, 0xE8	; 232
    2f9c:	73 e0       	ldi	r23, 0x03	; 3
    2f9e:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	2a e0       	ldi	r18, 0x0A	; 10
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	b9 01       	movw	r22, r18
    2faa:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2fae:	80 5d       	subi	r24, 0xD0	; 208
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
  string_value[2] = '.';
  string_value[3] = (ampers / 100) % 10 + '0';
    2fb2:	c7 01       	movw	r24, r14
    2fb4:	64 e6       	ldi	r22, 0x64	; 100
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	b9 01       	movw	r22, r18
    2fc0:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodhi4>
    2fc4:	80 5d       	subi	r24, 0xD0	; 208
    2fc6:	8c 83       	std	Y+4, r24	; 0x04
  
  // закрашиваем предыдущую линию-указатель
  LCD_DrawLineBresen(prev_xy[zone_x][zone_y][0] ,
    2fc8:	31 2c       	mov	r3, r1
    2fca:	81 2f       	mov	r24, r17
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9f 83       	std	Y+7, r25	; 0x07
    2fd0:	8e 83       	std	Y+6, r24	; 0x06
    2fd2:	22 0c       	add	r2, r2
    2fd4:	33 1c       	adc	r3, r3
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e2 0d       	add	r30, r2
    2fda:	f3 1d       	adc	r31, r3
    2fdc:	53 e0       	ldi	r21, 0x03	; 3
    2fde:	ee 0f       	add	r30, r30
    2fe0:	ff 1f       	adc	r31, r31
    2fe2:	5a 95       	dec	r21
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <drawValueZone+0xa0>
    2fe6:	e0 58       	subi	r30, 0x80	; 128
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	26 81       	ldd	r18, Z+6	; 0x06
    2fec:	37 81       	ldd	r19, Z+7	; 0x07
    2fee:	44 81       	ldd	r20, Z+4	; 0x04
    2ff0:	55 81       	ldd	r21, Z+5	; 0x05
    2ff2:	62 81       	ldd	r22, Z+2	; 0x02
    2ff4:	73 81       	ldd	r23, Z+3	; 0x03
    2ff6:	0f e1       	ldi	r16, 0x1F	; 31
    2ff8:	10 e0       	ldi	r17, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DrawLineBresen>
                     prev_xy[zone_x][zone_y][1] ,
                     prev_xy[zone_x][zone_y][2] ,
                     prev_xy[zone_x][zone_y][3] ,
                     BACKGROUND_COLOR);
  
  LCD_SetFontColor_Word(VGA_RED);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	98 ef       	ldi	r25, 0xF8	; 248
    3006:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LCD_SetFontColor_Word>
  LCD_SetFont(BigFont);
    300a:	82 e7       	ldi	r24, 0x72	; 114
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_SetFont>
  LCD_DrawText(b_x[zone_x] - 33, b_y[zone_y] - 18, string_value);
    3012:	ee 81       	ldd	r30, Y+6	; 0x06
    3014:	ff 81       	ldd	r31, Y+7	; 0x07
    3016:	ee 0f       	add	r30, r30
    3018:	ff 1f       	adc	r31, r31
    301a:	e0 5a       	subi	r30, 0xA0	; 160
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	62 51       	subi	r22, 0x12	; 18
    3024:	71 09       	sbc	r23, r1
    3026:	f1 01       	movw	r30, r2
    3028:	ec 59       	subi	r30, 0x9C	; 156
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	ae 01       	movw	r20, r28
    3032:	4f 5f       	subi	r20, 0xFF	; 255
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	81 97       	sbiw	r24, 0x21	; 33
    3038:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_DrawText>
  
  koef = ((double)ampers / 1000) / (double)MAX_VALUE_ZONE;
    303c:	b7 01       	movw	r22, r14
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a e7       	ldi	r20, 0x7A	; 122
    304c:	54 e4       	ldi	r21, 0x44	; 68
    304e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divsf3>
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 ea       	ldi	r20, 0xA0	; 160
    3058:	51 e4       	ldi	r21, 0x41	; 65
    305a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divsf3>
    305e:	4b 01       	movw	r8, r22
    3060:	5c 01       	movw	r10, r24
  if (koef > 1) 
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	79 2d       	mov	r23, r9
    306c:	9b 2d       	mov	r25, r11
    306e:	0e 94 44 21 	call	0x4288	; 0x4288 <__gesf2>
    3072:	18 16       	cp	r1, r24
    3074:	34 f4       	brge	.+12     	; 0x3082 <drawValueZone+0x144>
    koef = 1;
    3076:	81 2c       	mov	r8, r1
    3078:	91 2c       	mov	r9, r1
    307a:	20 e8       	ldi	r18, 0x80	; 128
    307c:	a2 2e       	mov	r10, r18
    307e:	3f e3       	ldi	r19, 0x3F	; 63
    3080:	b3 2e       	mov	r11, r19
  x1 = b_x[zone_x] + (RADIUS - 11) * cos((ARC_BEGIN + ARC_LENGTH - ARC_LENGTH * koef) * M_PI / 180) + 1;
    3082:	f1 01       	movw	r30, r2
    3084:	ec 59       	subi	r30, 0x9C	; 156
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	00 81       	ld	r16, Z
    308a:	11 81       	ldd	r17, Z+1	; 0x01
    308c:	b8 01       	movw	r22, r16
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3096:	6b 01       	movw	r12, r22
    3098:	7c 01       	movw	r14, r24
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	44 eb       	ldi	r20, 0xB4	; 180
    30a0:	52 e4       	ldi	r21, 0x42	; 66
    30a2:	68 2d       	mov	r22, r8
    30a4:	79 2d       	mov	r23, r9
    30a6:	8a 2d       	mov	r24, r10
    30a8:	9b 2d       	mov	r25, r11
    30aa:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    30ae:	9b 01       	movw	r18, r22
    30b0:	ac 01       	movw	r20, r24
    30b2:	60 e0       	ldi	r22, 0x00	; 0
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	87 e0       	ldi	r24, 0x07	; 7
    30b8:	93 e4       	ldi	r25, 0x43	; 67
    30ba:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    30be:	2b ed       	ldi	r18, 0xDB	; 219
    30c0:	3f e0       	ldi	r19, 0x0F	; 15
    30c2:	49 e4       	ldi	r20, 0x49	; 73
    30c4:	50 e4       	ldi	r21, 0x40	; 64
    30c6:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	44 e3       	ldi	r20, 0x34	; 52
    30d0:	53 e4       	ldi	r21, 0x43	; 67
    30d2:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divsf3>
    30d6:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <cos>
    30da:	2b 01       	movw	r4, r22
    30dc:	3c 01       	movw	r6, r24
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	42 eb       	ldi	r20, 0xB2	; 178
    30e4:	52 e4       	ldi	r21, 0x42	; 66
    30e6:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    30ea:	9b 01       	movw	r18, r22
    30ec:	ac 01       	movw	r20, r24
    30ee:	c7 01       	movw	r24, r14
    30f0:	b6 01       	movw	r22, r12
    30f2:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3102:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3106:	4b 01       	movw	r8, r22
    3108:	5c 01       	movw	r10, r24
    310a:	79 87       	std	Y+9, r23	; 0x09
    310c:	68 87       	std	Y+8, r22	; 0x08
  x2 = b_x[zone_x] + 36 * cos((ARC_BEGIN + ARC_LENGTH - ARC_LENGTH * koef) * M_PI / 180) + 1;
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e1       	ldi	r20, 0x10	; 16
    3114:	52 e4       	ldi	r21, 0x42	; 66
    3116:	c3 01       	movw	r24, r6
    3118:	b2 01       	movw	r22, r4
    311a:	0e 94 48 21 	call	0x4290	; 0x4290 <__mulsf3>
    311e:	9b 01       	movw	r18, r22
    3120:	ac 01       	movw	r20, r24
    3122:	c7 01       	movw	r24, r14
    3124:	b6 01       	movw	r22, r12
    3126:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3136:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    313a:	6b 01       	movw	r12, r22
    313c:	7c 01       	movw	r14, r24
    313e:	7d 87       	std	Y+13, r23	; 0x0d
    3140:	6c 87       	std	Y+12, r22	; 0x0c
  y1 = -sqrt((RADIUS - 11) * (RADIUS - 11) - (x1 - b_x[zone_x]) * (x1 - b_x[zone_x])) + b_y[zone_y];
    3142:	ee 81       	ldd	r30, Y+6	; 0x06
    3144:	ff 81       	ldd	r31, Y+7	; 0x07
    3146:	ee 0f       	add	r30, r30
    3148:	ff 1f       	adc	r31, r31
    314a:	e0 5a       	subi	r30, 0xA0	; 160
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	60 81       	ld	r22, Z
    3150:	71 81       	ldd	r23, Z+1	; 0x01
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    315a:	2b 01       	movw	r4, r22
    315c:	3c 01       	movw	r6, r24
    315e:	c4 01       	movw	r24, r8
    3160:	80 1b       	sub	r24, r16
    3162:	91 0b       	sbc	r25, r17
    3164:	88 9f       	mul	r24, r24
    3166:	90 01       	movw	r18, r0
    3168:	89 9f       	mul	r24, r25
    316a:	30 0d       	add	r19, r0
    316c:	30 0d       	add	r19, r0
    316e:	11 24       	eor	r1, r1
    3170:	61 ef       	ldi	r22, 0xF1	; 241
    3172:	7e e1       	ldi	r23, 0x1E	; 30
    3174:	62 1b       	sub	r22, r18
    3176:	73 0b       	sbc	r23, r19
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3180:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    3184:	9b 01       	movw	r18, r22
    3186:	ac 01       	movw	r20, r24
    3188:	c3 01       	movw	r24, r6
    318a:	b2 01       	movw	r22, r4
    318c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3190:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3194:	68 87       	std	Y+8, r22	; 0x08
    3196:	79 87       	std	Y+9, r23	; 0x09
    3198:	8a 87       	std	Y+10, r24	; 0x0a
    319a:	9b 87       	std	Y+11, r25	; 0x0b
  y2 = -sqrt(36 * 36 - (x2 - b_x[zone_x]) * (x2 - b_x[zone_x])) + b_y[zone_y];
    319c:	c6 01       	movw	r24, r12
    319e:	80 1b       	sub	r24, r16
    31a0:	91 0b       	sbc	r25, r17
    31a2:	88 9f       	mul	r24, r24
    31a4:	90 01       	movw	r18, r0
    31a6:	89 9f       	mul	r24, r25
    31a8:	30 0d       	add	r19, r0
    31aa:	30 0d       	add	r19, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	60 e1       	ldi	r22, 0x10	; 16
    31b0:	75 e0       	ldi	r23, 0x05	; 5
    31b2:	62 1b       	sub	r22, r18
    31b4:	73 0b       	sbc	r23, r19
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    31be:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    31c2:	9b 01       	movw	r18, r22
    31c4:	ac 01       	movw	r20, r24
    31c6:	c3 01       	movw	r24, r6
    31c8:	b2 01       	movw	r22, r4
    31ca:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    31ce:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    31d2:	2b 01       	movw	r4, r22
    31d4:	3c 01       	movw	r6, r24
  LCD_DrawLineBresen(x1,
    31d6:	00 e1       	ldi	r16, 0x10	; 16
    31d8:	10 e8       	ldi	r17, 0x80	; 128
    31da:	9b 01       	movw	r18, r22
    31dc:	a6 01       	movw	r20, r12
    31de:	68 85       	ldd	r22, Y+8	; 0x08
    31e0:	79 85       	ldd	r23, Y+9	; 0x09
    31e2:	c4 01       	movw	r24, r8
    31e4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <LCD_DrawLineBresen>
                     y1,
                     x2,
                     y2,
                     VGA_PURPLE);
  prev_xy[zone_x][zone_y][0] = x1;
    31e8:	ee 81       	ldd	r30, Y+6	; 0x06
    31ea:	ff 81       	ldd	r31, Y+7	; 0x07
    31ec:	e2 0d       	add	r30, r2
    31ee:	f3 1d       	adc	r31, r3
    31f0:	93 e0       	ldi	r25, 0x03	; 3
    31f2:	ee 0f       	add	r30, r30
    31f4:	ff 1f       	adc	r31, r31
    31f6:	9a 95       	dec	r25
    31f8:	e1 f7       	brne	.-8      	; 0x31f2 <drawValueZone+0x2b4>
    31fa:	e0 58       	subi	r30, 0x80	; 128
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	91 82       	std	Z+1, r9	; 0x01
    3200:	80 82       	st	Z, r8
  prev_xy[zone_x][zone_y][1] = y1;
    3202:	88 85       	ldd	r24, Y+8	; 0x08
    3204:	99 85       	ldd	r25, Y+9	; 0x09
    3206:	93 83       	std	Z+3, r25	; 0x03
    3208:	82 83       	std	Z+2, r24	; 0x02
  prev_xy[zone_x][zone_y][2] = x2;
    320a:	d5 82       	std	Z+5, r13	; 0x05
    320c:	c4 82       	std	Z+4, r12	; 0x04
  prev_xy[zone_x][zone_y][3] = y2;
    320e:	57 82       	std	Z+7, r5	; 0x07
    3210:	46 82       	std	Z+6, r4	; 0x06
}
    3212:	2d 96       	adiw	r28, 0x0d	; 13
    3214:	0f b6       	in	r0, 0x3f	; 63
    3216:	f8 94       	cli
    3218:	de bf       	out	0x3e, r29	; 62
    321a:	0f be       	out	0x3f, r0	; 63
    321c:	cd bf       	out	0x3d, r28	; 61
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	df 90       	pop	r13
    322c:	cf 90       	pop	r12
    322e:	bf 90       	pop	r11
    3230:	af 90       	pop	r10
    3232:	9f 90       	pop	r9
    3234:	8f 90       	pop	r8
    3236:	7f 90       	pop	r7
    3238:	6f 90       	pop	r6
    323a:	5f 90       	pop	r5
    323c:	4f 90       	pop	r4
    323e:	3f 90       	pop	r3
    3240:	2f 90       	pop	r2
    3242:	08 95       	ret

00003244 <update_time>:

unsigned int b_x[] = {80, 240}; // координаты центров индикаторов по оси х
unsigned int b_y[] = {108, 216}; // координаты центров индикаторов по оси у

void update_time(unsigned char isFirst)
{
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	d8 2f       	mov	r29, r24
  unsigned char new_second, new_minute, new_hour;
  //unsigned char time_string[8];
  
  // если первый запуск
  new_second = l_get_second();
    324a:	0e 94 cf 08 	call	0x119e	; 0x119e <l_get_second>
    324e:	c8 2f       	mov	r28, r24
  time_string[6] = new_second / 10 + '0';
    3250:	6a e0       	ldi	r22, 0x0A	; 10
    3252:	0e 94 3d 22 	call	0x447a	; 0x447a <__udivmodqi4>
    3256:	80 5d       	subi	r24, 0xD0	; 208
    3258:	80 93 6e 00 	sts	0x006E, r24
  time_string[7] = new_second % 10 + '0';
    325c:	90 5d       	subi	r25, 0xD0	; 208
    325e:	90 93 6f 00 	sts	0x006F, r25
  if ((isFirst) || (new_second == 0))
    3262:	d1 11       	cpse	r29, r1
    3264:	02 c0       	rjmp	.+4      	; 0x326a <update_time+0x26>
    3266:	c1 11       	cpse	r28, r1
    3268:	1b c0       	rjmp	.+54     	; 0x32a0 <update_time+0x5c>
  {
    new_minute = l_get_minute();
    326a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <l_get_minute>
    326e:	28 2f       	mov	r18, r24
    time_string[3] = new_minute / 10 + '0';
    3270:	6a e0       	ldi	r22, 0x0A	; 10
    3272:	0e 94 3d 22 	call	0x447a	; 0x447a <__udivmodqi4>
    3276:	80 5d       	subi	r24, 0xD0	; 208
    3278:	80 93 6b 00 	sts	0x006B, r24
    time_string[4] = new_minute % 10 + '0';
    327c:	90 5d       	subi	r25, 0xD0	; 208
    327e:	90 93 6c 00 	sts	0x006C, r25
    if ((isFirst) || (new_minute == 0))
    3282:	d1 11       	cpse	r29, r1
    3284:	02 c0       	rjmp	.+4      	; 0x328a <update_time+0x46>
    3286:	21 11       	cpse	r18, r1
    3288:	0b c0       	rjmp	.+22     	; 0x32a0 <update_time+0x5c>
    {
      new_hour = l_get_hour();
    328a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <l_get_hour>
      time_string[0] = new_hour / 10 + '0';
    328e:	6a e0       	ldi	r22, 0x0A	; 10
    3290:	0e 94 3d 22 	call	0x447a	; 0x447a <__udivmodqi4>
    3294:	80 5d       	subi	r24, 0xD0	; 208
    3296:	80 93 68 00 	sts	0x0068, r24
      time_string[1] = new_hour % 10 + '0';
    329a:	90 5d       	subi	r25, 0xD0	; 208
    329c:	90 93 69 00 	sts	0x0069, r25
    }
  }
  
  LCD_SetFont(SmallFont);
    32a0:	86 e5       	ldi	r24, 0x56	; 86
    32a2:	9c e0       	ldi	r25, 0x0C	; 12
    32a4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_SetFont>
  LCD_SetFontColor_Word(VGA_BLACK);
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LCD_SetFontColor_Word>
  LCD_DrawText(256, 224, time_string);
    32b0:	48 e6       	ldi	r20, 0x68	; 104
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	60 ee       	ldi	r22, 0xE0	; 224
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_DrawText>
  updateTime = 0;
    32c0:	10 92 a2 00 	sts	0x00A2, r1
  
  
  drawValueZone(0, 0, new_second * 1000);
    32c4:	28 ee       	ldi	r18, 0xE8	; 232
    32c6:	33 e0       	ldi	r19, 0x03	; 3
    32c8:	c2 9f       	mul	r28, r18
    32ca:	a0 01       	movw	r20, r0
    32cc:	c3 9f       	mul	r28, r19
    32ce:	50 0d       	add	r21, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
}
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
  LCD_SetFontColor_Word(VGA_BLACK);
  LCD_DrawText(256, 224, time_string);
  updateTime = 0;
  
  
  drawValueZone(0, 0, new_second * 1000);
    32de:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <drawValueZone>

000032e2 <drawWorkArea>:
  prev_xy[zone_x][zone_y][3] = y2;
}

// рисует рабочую область
void drawWorkArea()
{
    32e2:	2f 92       	push	r2
    32e4:	3f 92       	push	r3
    32e6:	4f 92       	push	r4
    32e8:	5f 92       	push	r5
    32ea:	6f 92       	push	r6
    32ec:	7f 92       	push	r7
    32ee:	8f 92       	push	r8
    32f0:	9f 92       	push	r9
    32f2:	af 92       	push	r10
    32f4:	bf 92       	push	r11
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	68 97       	sbiw	r28, 0x18	; 24
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
  
  unsigned char x, y, i;
  unsigned int x1, x2, y1, y2;
  
  // инициализируем дисплей
  init_BUS(ILI9328, LANDSCAPE);                                                                             
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	82 e0       	ldi	r24, 0x02	; 2
    331a:	0e 94 07 09 	call	0x120e	; 0x120e <init_BUS>
  LCD_ClrScreen();
    331e:	0e 94 01 0c 	call	0x1802	; 0x1802 <LCD_ClrScreen>
  
  //------------------------------------
  LCD_FillScreen(BACKGROUND_COLOR);
    3322:	8f e1       	ldi	r24, 0x1F	; 31
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 6d 0c 	call	0x18da	; 0x18da <LCD_FillScreen>
  LCD_SetBackColor_Word(BACKGROUND_COLOR);
    332a:	8f e1       	ldi	r24, 0x1F	; 31
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_SetBackColor_Word>
  LCD_FillRectangle(0,220, 250, 240,VGA_GRAY); // прогресс бар
    3332:	00 e1       	ldi	r16, 0x10	; 16
    3334:	14 e8       	ldi	r17, 0x84	; 132
    3336:	20 ef       	ldi	r18, 0xF0	; 240
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a ef       	ldi	r20, 0xFA	; 250
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	6c ed       	ldi	r22, 0xDC	; 220
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  LCD_FillRectangle(0, 217, 320, 219, VGA_YELLOW); 
    334a:	00 ee       	ldi	r16, 0xE0	; 224
    334c:	1f ef       	ldi	r17, 0xFF	; 255
    334e:	2b ed       	ldi	r18, 0xDB	; 219
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e4       	ldi	r20, 0x40	; 64
    3354:	51 e0       	ldi	r21, 0x01	; 1
    3356:	69 ed       	ldi	r22, 0xD9	; 217
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  // раздел€ем рабочую область на 4 части
  LCD_FillRectangle(0, 107, 320, 109, VGA_YELLOW);
    3362:	2d e6       	ldi	r18, 0x6D	; 109
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e4       	ldi	r20, 0x40	; 64
    3368:	51 e0       	ldi	r21, 0x01	; 1
    336a:	6b e6       	ldi	r22, 0x6B	; 107
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  LCD_FillRectangle(159, 0, 161, 216, VGA_YELLOW);
    3376:	28 ed       	ldi	r18, 0xD8	; 216
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	41 ea       	ldi	r20, 0xA1	; 161
    337c:	50 e0       	ldi	r21, 0x00	; 0
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	8f e9       	ldi	r24, 0x9F	; 159
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  // вычерчиваем в центре место дл€ температуры
  LCD_FillRectangle(125, 97, 194, 118, VGA_YELLOW);
    338a:	26 e7       	ldi	r18, 0x76	; 118
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	42 ec       	ldi	r20, 0xC2	; 194
    3390:	50 e0       	ldi	r21, 0x00	; 0
    3392:	61 e6       	ldi	r22, 0x61	; 97
    3394:	70 e0       	ldi	r23, 0x00	; 0
    3396:	8d e7       	ldi	r24, 0x7D	; 125
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  // врем€
  //==================================
  LCD_FillRectangle(254, 220, 320, 240, BACKGROUND_COLOR);
    339e:	0f e1       	ldi	r16, 0x1F	; 31
    33a0:	10 e0       	ldi	r17, 0x00	; 0
    33a2:	20 ef       	ldi	r18, 0xF0	; 240
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e4       	ldi	r20, 0x40	; 64
    33a8:	51 e0       	ldi	r21, 0x01	; 1
    33aa:	6c ed       	ldi	r22, 0xDC	; 220
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	8e ef       	ldi	r24, 0xFE	; 254
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
  LCD_FillRectangle(251, 220, 253, 240, VGA_YELLOW);
    33b6:	00 ee       	ldi	r16, 0xE0	; 224
    33b8:	1f ef       	ldi	r17, 0xFF	; 255
    33ba:	20 ef       	ldi	r18, 0xF0	; 240
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4d ef       	ldi	r20, 0xFD	; 253
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	6c ed       	ldi	r22, 0xDC	; 220
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	8b ef       	ldi	r24, 0xFB	; 251
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <LCD_FillRectangle>
    33ce:	24 e6       	ldi	r18, 0x64	; 100
    33d0:	22 2e       	mov	r2, r18
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	32 2e       	mov	r3, r18
    33d6:	24 e0       	ldi	r18, 0x04	; 4
    33d8:	39 e2       	ldi	r19, 0x29	; 41
    33da:	3c 8b       	std	Y+20, r19	; 0x14
    33dc:	2b 8b       	std	Y+19, r18	; 0x13
  //==================================
  
  // рисуем индикаторы
  for(x = 0; x < count_work_area_x; x++)
    33de:	1c 86       	std	Y+12, r1	; 0x0c
    33e0:	c0 c3       	rjmp	.+1920   	; 0x3b62 <drawWorkArea+0x880>
    for(y = 0; y < count_work_area_y; y++)
    {
      LCD_DrawArc(b_x[x], b_y[y], RADIUS, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
    33e2:	e9 81       	ldd	r30, Y+1	; 0x01
    33e4:	fa 81       	ldd	r31, Y+2	; 0x02
    33e6:	60 81       	ld	r22, Z
    33e8:	71 81       	ldd	r23, Z+1	; 0x01
    33ea:	80 ee       	ldi	r24, 0xE0	; 224
    33ec:	e8 2e       	mov	r14, r24
    33ee:	87 e0       	ldi	r24, 0x07	; 7
    33f0:	f8 2e       	mov	r15, r24
    33f2:	0a e5       	ldi	r16, 0x5A	; 90
    33f4:	10 e0       	ldi	r17, 0x00	; 0
    33f6:	2d e2       	ldi	r18, 0x2D	; 45
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	44 e6       	ldi	r20, 0x64	; 100
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	f1 01       	movw	r30, r2
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 1, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
    3408:	e9 81       	ldd	r30, Y+1	; 0x01
    340a:	fa 81       	ldd	r31, Y+2	; 0x02
    340c:	60 81       	ld	r22, Z
    340e:	71 81       	ldd	r23, Z+1	; 0x01
    3410:	2d e2       	ldi	r18, 0x2D	; 45
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	43 e6       	ldi	r20, 0x63	; 99
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	f1 01       	movw	r30, r2
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 9, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
    3422:	e9 81       	ldd	r30, Y+1	; 0x01
    3424:	fa 81       	ldd	r31, Y+2	; 0x02
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	2d e2       	ldi	r18, 0x2D	; 45
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	4b e5       	ldi	r20, 0x5B	; 91
    3430:	50 e0       	ldi	r21, 0x00	; 0
    3432:	f1 01       	movw	r30, r2
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 10, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
    343c:	e9 81       	ldd	r30, Y+1	; 0x01
    343e:	fa 81       	ldd	r31, Y+2	; 0x02
    3440:	60 81       	ld	r22, Z
    3442:	71 81       	ldd	r23, Z+1	; 0x01
    3444:	2d e2       	ldi	r18, 0x2D	; 45
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	4a e5       	ldi	r20, 0x5A	; 90
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	f1 01       	movw	r30, r2
    344e:	80 81       	ld	r24, Z
    3450:	91 81       	ldd	r25, Z+1	; 0x01
    3452:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
    3456:	92 e6       	ldi	r25, 0x62	; 98
    3458:	c9 2e       	mov	r12, r25
    345a:	d1 2c       	mov	r13, r1
      
      for(char i = 2; i <= 8; i++)
      {
        LCD_DrawArc(b_x[x], b_y[y], (RADIUS - i), ARC_BEGIN, ARC_LENGTH_HIGH_ZONE, VGA_RED);
    345c:	e9 81       	ldd	r30, Y+1	; 0x01
    345e:	fa 81       	ldd	r31, Y+2	; 0x02
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	e1 2c       	mov	r14, r1
    3466:	18 ef       	ldi	r17, 0xF8	; 248
    3468:	f1 2e       	mov	r15, r17
    346a:	0f e0       	ldi	r16, 0x0F	; 15
    346c:	10 e0       	ldi	r17, 0x00	; 0
    346e:	2d e2       	ldi	r18, 0x2D	; 45
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	a6 01       	movw	r20, r12
    3474:	f1 01       	movw	r30, r2
    3476:	80 81       	ld	r24, Z
    3478:	91 81       	ldd	r25, Z+1	; 0x01
    347a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
        LCD_DrawArc(b_x[x], b_y[y], (RADIUS - i), ARC_BEGIN + ARC_LENGTH_HIGH_ZONE, ARC_LENGTH - ARC_LENGTH_HIGH_ZONE, VGA_LIME);
    347e:	e9 81       	ldd	r30, Y+1	; 0x01
    3480:	fa 81       	ldd	r31, Y+2	; 0x02
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	00 ee       	ldi	r16, 0xE0	; 224
    3488:	e0 2e       	mov	r14, r16
    348a:	07 e0       	ldi	r16, 0x07	; 7
    348c:	f0 2e       	mov	r15, r16
    348e:	0b e4       	ldi	r16, 0x4B	; 75
    3490:	10 e0       	ldi	r17, 0x00	; 0
    3492:	2c e3       	ldi	r18, 0x3C	; 60
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	a6 01       	movw	r20, r12
    3498:	f1 01       	movw	r30, r2
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LCD_DrawArc>
    34a2:	f1 e0       	ldi	r31, 0x01	; 1
    34a4:	cf 1a       	sub	r12, r31
    34a6:	d1 08       	sbc	r13, r1
      LCD_DrawArc(b_x[x], b_y[y], RADIUS, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 1, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 9, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
      LCD_DrawArc(b_x[x], b_y[y], RADIUS - 10, ARC_BEGIN, ARC_LENGTH, VGA_LIME);
      
      for(char i = 2; i <= 8; i++)
    34a8:	2b e5       	ldi	r18, 0x5B	; 91
    34aa:	c2 16       	cp	r12, r18
    34ac:	d1 04       	cpc	r13, r1
    34ae:	b1 f6       	brne	.-84     	; 0x345c <drawWorkArea+0x17a>
      {
        LCD_DrawArc(b_x[x], b_y[y], (RADIUS - i), ARC_BEGIN, ARC_LENGTH_HIGH_ZONE, VGA_RED);
        LCD_DrawArc(b_x[x], b_y[y], (RADIUS - i), ARC_BEGIN + ARC_LENGTH_HIGH_ZONE, ARC_LENGTH - ARC_LENGTH_HIGH_ZONE, VGA_LIME);
      }
      
      x1 = b_x[x] + (RADIUS - 10) * cos(ARC_BEGIN * M_PI / 180) + 1;
    34b0:	f1 01       	movw	r30, r2
    34b2:	60 80       	ld	r6, Z
    34b4:	71 80       	ldd	r7, Z+1	; 0x01
    34b6:	b3 01       	movw	r22, r6
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    34c0:	6b 01       	movw	r12, r22
    34c2:	7c 01       	movw	r14, r24
    34c4:	26 ef       	ldi	r18, 0xF6	; 246
    34c6:	3e e8       	ldi	r19, 0x8E	; 142
    34c8:	4e e7       	ldi	r20, 0x7E	; 126
    34ca:	52 e4       	ldi	r21, 0x42	; 66
    34cc:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	5f e3       	ldi	r21, 0x3F	; 63
    34d8:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    34dc:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    34e0:	8b 01       	movw	r16, r22
      x2 = b_x[x] + RADIUS * cos(ARC_BEGIN * M_PI / 180) + 1;
    34e2:	2e ed       	ldi	r18, 0xDE	; 222
    34e4:	3b e6       	ldi	r19, 0x6B	; 107
    34e6:	4d e8       	ldi	r20, 0x8D	; 141
    34e8:	52 e4       	ldi	r21, 0x42	; 66
    34ea:	c7 01       	movw	r24, r14
    34ec:	b6 01       	movw	r22, r12
    34ee:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    34fe:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3502:	2b 01       	movw	r4, r22
      y1 = -sqrt(square(RADIUS - 10) - square(x1 - b_x[x])) + b_y[y];
    3504:	e9 81       	ldd	r30, Y+1	; 0x01
    3506:	fa 81       	ldd	r31, Y+2	; 0x02
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3514:	6f 83       	std	Y+7, r22	; 0x07
    3516:	78 87       	std	Y+8, r23	; 0x08
    3518:	89 87       	std	Y+9, r24	; 0x09
    351a:	9a 87       	std	Y+10, r25	; 0x0a
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	84 eb       	ldi	r24, 0xB4	; 180
    3522:	92 e4       	ldi	r25, 0x42	; 66
    3524:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    3528:	6b 83       	std	Y+3, r22	; 0x03
    352a:	7c 83       	std	Y+4, r23	; 0x04
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	9e 83       	std	Y+6, r25	; 0x06
    3530:	b8 01       	movw	r22, r16
    3532:	66 19       	sub	r22, r6
    3534:	77 09       	sbc	r23, r7
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    353e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    3542:	9b 01       	movw	r18, r22
    3544:	ac 01       	movw	r20, r24
    3546:	6b 81       	ldd	r22, Y+3	; 0x03
    3548:	7c 81       	ldd	r23, Y+4	; 0x04
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3552:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    3556:	6d 8b       	std	Y+21, r22	; 0x15
    3558:	7e 8b       	std	Y+22, r23	; 0x16
    355a:	8f 8b       	std	Y+23, r24	; 0x17
    355c:	98 8f       	std	Y+24, r25	; 0x18
      y2 = -sqrt(square(RADIUS) - square(x2 - b_x[x])) + b_y[y];
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	88 ec       	ldi	r24, 0xC8	; 200
    3564:	92 e4       	ldi	r25, 0x42	; 66
    3566:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    356a:	6f 87       	std	Y+15, r22	; 0x0f
    356c:	78 8b       	std	Y+16, r23	; 0x10
    356e:	89 8b       	std	Y+17, r24	; 0x11
    3570:	9a 8b       	std	Y+18, r25	; 0x12
    3572:	b2 01       	movw	r22, r4
    3574:	66 19       	sub	r22, r6
    3576:	77 09       	sbc	r23, r7
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3580:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    3584:	9b 01       	movw	r18, r22
    3586:	ac 01       	movw	r20, r24
    3588:	6f 85       	ldd	r22, Y+15	; 0x0f
    358a:	78 89       	ldd	r23, Y+16	; 0x10
    358c:	89 89       	ldd	r24, Y+17	; 0x11
    358e:	9a 89       	ldd	r25, Y+18	; 0x12
    3590:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3594:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    3598:	9b 01       	movw	r18, r22
    359a:	ac 01       	movw	r20, r24
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    35a8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
      
      LCD_DrawLine(x1,
    35ac:	5b 01       	movw	r10, r22
    35ae:	c1 2c       	mov	r12, r1
    35b0:	d1 2c       	mov	r13, r1
    35b2:	61 2c       	mov	r6, r1
    35b4:	71 2c       	mov	r7, r1
        LCD_DrawArc(b_x[x], b_y[y], (RADIUS - i), ARC_BEGIN + ARC_LENGTH_HIGH_ZONE, ARC_LENGTH - ARC_LENGTH_HIGH_ZONE, VGA_LIME);
      }
      
      x1 = b_x[x] + (RADIUS - 10) * cos(ARC_BEGIN * M_PI / 180) + 1;
      x2 = b_x[x] + RADIUS * cos(ARC_BEGIN * M_PI / 180) + 1;
      y1 = -sqrt(square(RADIUS - 10) - square(x1 - b_x[x])) + b_y[y];
    35b6:	2d 89       	ldd	r18, Y+21	; 0x15
    35b8:	3e 89       	ldd	r19, Y+22	; 0x16
    35ba:	4f 89       	ldd	r20, Y+23	; 0x17
    35bc:	58 8d       	ldd	r21, Y+24	; 0x18
    35be:	6f 81       	ldd	r22, Y+7	; 0x07
    35c0:	78 85       	ldd	r23, Y+8	; 0x08
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    35ca:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
      y2 = -sqrt(square(RADIUS) - square(x2 - b_x[x])) + b_y[y];
      
      LCD_DrawLine(x1,
    35ce:	9b 01       	movw	r18, r22
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	b8 01       	movw	r22, r16
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	1f 92       	push	r1
    35dc:	1f 92       	push	r1
    35de:	1f 92       	push	r1
    35e0:	fa e0       	ldi	r31, 0x0A	; 10
    35e2:	ff 93       	push	r31
    35e4:	b0 ee       	ldi	r27, 0xE0	; 224
    35e6:	8b 2e       	mov	r8, r27
    35e8:	b7 e0       	ldi	r27, 0x07	; 7
    35ea:	9b 2e       	mov	r9, r27
    35ec:	83 01       	movw	r16, r6
    35ee:	72 01       	movw	r14, r4
    35f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
                  x2,
                  y2,
                  VGA_LIME,
                  10);
      
      x1 = b_x[x] + (RADIUS - 10) * cos((ARC_BEGIN + ARC_LENGTH_HIGH_ZONE) * M_PI / 180) + 1;
    35f4:	f1 01       	movw	r30, r2
    35f6:	60 80       	ld	r6, Z
    35f8:	71 80       	ldd	r7, Z+1	; 0x01
    35fa:	b3 01       	movw	r22, r6
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3604:	6b 01       	movw	r12, r22
    3606:	7c 01       	movw	r14, r24
    3608:	2f ef       	ldi	r18, 0xFF	; 255
    360a:	3f ef       	ldi	r19, 0xFF	; 255
    360c:	43 e3       	ldi	r20, 0x33	; 51
    360e:	52 e4       	ldi	r21, 0x42	; 66
    3610:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3620:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3624:	8b 01       	movw	r16, r22
      x2 = b_x[x] + RADIUS * cos((ARC_BEGIN + ARC_LENGTH_HIGH_ZONE) * M_PI / 180) + 1;
    3626:	2f ef       	ldi	r18, 0xFF	; 255
    3628:	3f ef       	ldi	r19, 0xFF	; 255
    362a:	47 e4       	ldi	r20, 0x47	; 71
    362c:	52 e4       	ldi	r21, 0x42	; 66
    362e:	c7 01       	movw	r24, r14
    3630:	b6 01       	movw	r22, r12
    3632:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__addsf3>
    3642:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3646:	2b 01       	movw	r4, r22
      y1 = -sqrt(square(RADIUS - 10) - square(x1 - b_x[x])) + b_y[y];
    3648:	e9 81       	ldd	r30, Y+1	; 0x01
    364a:	fa 81       	ldd	r31, Y+2	; 0x02
    364c:	60 81       	ld	r22, Z
    364e:	71 81       	ldd	r23, Z+1	; 0x01
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3658:	6f 83       	std	Y+7, r22	; 0x07
    365a:	78 87       	std	Y+8, r23	; 0x08
    365c:	89 87       	std	Y+9, r24	; 0x09
    365e:	9a 87       	std	Y+10, r25	; 0x0a
    3660:	b8 01       	movw	r22, r16
    3662:	66 19       	sub	r22, r6
    3664:	77 09       	sbc	r23, r7
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    366e:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	6b 81       	ldd	r22, Y+3	; 0x03
    3678:	7c 81       	ldd	r23, Y+4	; 0x04
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3682:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    3686:	6d 8b       	std	Y+21, r22	; 0x15
    3688:	7e 8b       	std	Y+22, r23	; 0x16
    368a:	8f 8b       	std	Y+23, r24	; 0x17
    368c:	98 8f       	std	Y+24, r25	; 0x18
      y2 = -sqrt(square(RADIUS) - square(x2 - b_x[x])) + b_y[y];
    368e:	b2 01       	movw	r22, r4
    3690:	66 19       	sub	r22, r6
    3692:	77 09       	sbc	r23, r7
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    369c:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    36a0:	9b 01       	movw	r18, r22
    36a2:	ac 01       	movw	r20, r24
    36a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    36a6:	78 89       	ldd	r23, Y+16	; 0x10
    36a8:	89 89       	ldd	r24, Y+17	; 0x11
    36aa:	9a 89       	ldd	r25, Y+18	; 0x12
    36ac:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    36b0:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    36b4:	9b 01       	movw	r18, r22
    36b6:	ac 01       	movw	r20, r24
    36b8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ba:	78 85       	ldd	r23, Y+8	; 0x08
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    36c4:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
      
      LCD_DrawLine(x1,
    36c8:	5b 01       	movw	r10, r22
    36ca:	c1 2c       	mov	r12, r1
    36cc:	d1 2c       	mov	r13, r1
    36ce:	61 2c       	mov	r6, r1
    36d0:	71 2c       	mov	r7, r1
                  VGA_LIME,
                  10);
      
      x1 = b_x[x] + (RADIUS - 10) * cos((ARC_BEGIN + ARC_LENGTH_HIGH_ZONE) * M_PI / 180) + 1;
      x2 = b_x[x] + RADIUS * cos((ARC_BEGIN + ARC_LENGTH_HIGH_ZONE) * M_PI / 180) + 1;
      y1 = -sqrt(square(RADIUS - 10) - square(x1 - b_x[x])) + b_y[y];
    36d2:	2d 89       	ldd	r18, Y+21	; 0x15
    36d4:	3e 89       	ldd	r19, Y+22	; 0x16
    36d6:	4f 89       	ldd	r20, Y+23	; 0x17
    36d8:	58 8d       	ldd	r21, Y+24	; 0x18
    36da:	6f 81       	ldd	r22, Y+7	; 0x07
    36dc:	78 85       	ldd	r23, Y+8	; 0x08
    36de:	89 85       	ldd	r24, Y+9	; 0x09
    36e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e2:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    36e6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
      y2 = -sqrt(square(RADIUS) - square(x2 - b_x[x])) + b_y[y];
      
      LCD_DrawLine(x1,
    36ea:	9b 01       	movw	r18, r22
    36ec:	40 e0       	ldi	r20, 0x00	; 0
    36ee:	50 e0       	ldi	r21, 0x00	; 0
    36f0:	b8 01       	movw	r22, r16
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	1f 92       	push	r1
    36f8:	1f 92       	push	r1
    36fa:	1f 92       	push	r1
    36fc:	fa e0       	ldi	r31, 0x0A	; 10
    36fe:	ff 93       	push	r31
    3700:	83 01       	movw	r16, r6
    3702:	72 01       	movw	r14, r4
    3704:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
                  y2,
                  VGA_LIME,
                  10);
      
      
      x1 = b_x[x] + (RADIUS - 10) * cos((ARC_BEGIN + ARC_LENGTH) * M_PI / 180) - 1;
    3708:	f1 01       	movw	r30, r2
    370a:	a0 80       	ld	r10, Z
    370c:	b1 80       	ldd	r11, Z+1	; 0x01
    370e:	b5 01       	movw	r22, r10
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3718:	6b 01       	movw	r12, r22
    371a:	7c 01       	movw	r14, r24
    371c:	26 ef       	ldi	r18, 0xF6	; 246
    371e:	3e e8       	ldi	r19, 0x8E	; 142
    3720:	4e e7       	ldi	r20, 0x7E	; 126
    3722:	52 e4       	ldi	r21, 0x42	; 66
    3724:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3734:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    3738:	78 87       	std	Y+8, r23	; 0x08
    373a:	6f 83       	std	Y+7, r22	; 0x07
      x2 = b_x[x] + RADIUS * cos((ARC_BEGIN + ARC_LENGTH) * M_PI / 180) - 1;
    373c:	2e ed       	ldi	r18, 0xDE	; 222
    373e:	3b e6       	ldi	r19, 0x6B	; 107
    3740:	4d e8       	ldi	r20, 0x8D	; 141
    3742:	52 e4       	ldi	r21, 0x42	; 66
    3744:	c7 01       	movw	r24, r14
    3746:	b6 01       	movw	r22, r12
    3748:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3758:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    375c:	2b 01       	movw	r4, r22
      y1 = -sqrt(square(RADIUS - 10) - square(b_x[x] - x1)) + b_y[y];
    375e:	e9 81       	ldd	r30, Y+1	; 0x01
    3760:	fa 81       	ldd	r31, Y+2	; 0x02
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    376e:	6b 01       	movw	r12, r22
    3770:	7c 01       	movw	r14, r24
    3772:	b5 01       	movw	r22, r10
    3774:	2f 81       	ldd	r18, Y+7	; 0x07
    3776:	38 85       	ldd	r19, Y+8	; 0x08
    3778:	62 1b       	sub	r22, r18
    377a:	73 0b       	sbc	r23, r19
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    3784:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    3788:	9b 01       	movw	r18, r22
    378a:	ac 01       	movw	r20, r24
    378c:	6b 81       	ldd	r22, Y+3	; 0x03
    378e:	7c 81       	ldd	r23, Y+4	; 0x04
    3790:	8d 81       	ldd	r24, Y+5	; 0x05
    3792:	9e 81       	ldd	r25, Y+6	; 0x06
    3794:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    3798:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    379c:	9b 01       	movw	r18, r22
    379e:	ac 01       	movw	r20, r24
    37a0:	c7 01       	movw	r24, r14
    37a2:	b6 01       	movw	r22, r12
    37a4:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    37a8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
    37ac:	3b 01       	movw	r6, r22
      y2 = -sqrt(square(RADIUS) - square(b_x[x] - x2)) + b_y[y];
    37ae:	b5 01       	movw	r22, r10
    37b0:	64 19       	sub	r22, r4
    37b2:	75 09       	sbc	r23, r5
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 19 20 	call	0x4032	; 0x4032 <__floatunsisf>
    37bc:	0e 94 ed 21 	call	0x43da	; 0x43da <square>
    37c0:	9b 01       	movw	r18, r22
    37c2:	ac 01       	movw	r20, r24
    37c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    37c6:	78 89       	ldd	r23, Y+16	; 0x10
    37c8:	89 89       	ldd	r24, Y+17	; 0x11
    37ca:	9a 89       	ldd	r25, Y+18	; 0x12
    37cc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    37d0:	0e 94 af 21 	call	0x435e	; 0x435e <sqrt>
    37d4:	9b 01       	movw	r18, r22
    37d6:	ac 01       	movw	r20, r24
    37d8:	c7 01       	movw	r24, r14
    37da:	b6 01       	movw	r22, r12
    37dc:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <__subsf3>
    37e0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__fixunssfsi>
      
      LCD_DrawLine(x1,
    37e4:	9b 01       	movw	r18, r22
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	2b 83       	std	Y+3, r18	; 0x03
    37ec:	3c 83       	std	Y+4, r19	; 0x04
    37ee:	4d 83       	std	Y+5, r20	; 0x05
    37f0:	5e 83       	std	Y+6, r21	; 0x06
    37f2:	72 01       	movw	r14, r4
    37f4:	00 e0       	ldi	r16, 0x00	; 0
    37f6:	10 e0       	ldi	r17, 0x00	; 0
    37f8:	93 01       	movw	r18, r6
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	ef 81       	ldd	r30, Y+7	; 0x07
    3800:	f8 85       	ldd	r31, Y+8	; 0x08
    3802:	bf 01       	movw	r22, r30
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	1f 92       	push	r1
    380a:	1f 92       	push	r1
    380c:	1f 92       	push	r1
    380e:	fa e0       	ldi	r31, 0x0A	; 10
    3810:	ff 93       	push	r31
    3812:	ab 80       	ldd	r10, Y+3	; 0x03
    3814:	bc 80       	ldd	r11, Y+4	; 0x04
    3816:	cd 80       	ldd	r12, Y+5	; 0x05
    3818:	de 80       	ldd	r13, Y+6	; 0x06
    381a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
                  VGA_LIME,
                  10);
      
      LCD_DrawLine(x1 + 1,
                  y1 - 1,
                  x2 + 1,
    381e:	72 01       	movw	r14, r4
    3820:	2f ef       	ldi	r18, 0xFF	; 255
    3822:	e2 1a       	sub	r14, r18
    3824:	f2 0a       	sbc	r15, r18
                  x2,
                  y2,
                  VGA_LIME,
                  10);
      
      LCD_DrawLine(x1 + 1,
    3826:	00 e0       	ldi	r16, 0x00	; 0
    3828:	10 e0       	ldi	r17, 0x00	; 0
                  y1 - 1,
    382a:	93 01       	movw	r18, r6
    382c:	21 50       	subi	r18, 0x01	; 1
    382e:	31 09       	sbc	r19, r1
                  x2,
                  y2,
                  VGA_LIME,
                  10);
      
      LCD_DrawLine(x1 + 1,
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	50 e0       	ldi	r21, 0x00	; 0
    3834:	6f 81       	ldd	r22, Y+7	; 0x07
    3836:	78 85       	ldd	r23, Y+8	; 0x08
    3838:	6f 5f       	subi	r22, 0xFF	; 255
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	1f 92       	push	r1
    3842:	1f 92       	push	r1
    3844:	1f 92       	push	r1
    3846:	ea e0       	ldi	r30, 0x0A	; 10
    3848:	ef 93       	push	r30
    384a:	ab 80       	ldd	r10, Y+3	; 0x03
    384c:	bc 80       	ldd	r11, Y+4	; 0x04
    384e:	cd 80       	ldd	r12, Y+5	; 0x05
    3850:	de 80       	ldd	r13, Y+6	; 0x06
    3852:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
                  x2 + 1,
                  y2,
                  VGA_LIME,
                  10);
      
      LCD_SetFontColor_Word(VGA_BLACK);
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LCD_SetFontColor_Word>
      LCD_SetFont(SmallFont);
    385e:	86 e5       	ldi	r24, 0x56	; 86
    3860:	9c e0       	ldi	r25, 0x0C	; 12
    3862:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <LCD_SetFont>
      LCD_DrawText(b_x[x] - 72, b_y[y] - 63, "0");
    3866:	e9 81       	ldd	r30, Y+1	; 0x01
    3868:	fa 81       	ldd	r31, Y+2	; 0x02
    386a:	60 81       	ld	r22, Z
    386c:	71 81       	ldd	r23, Z+1	; 0x01
    386e:	6f 53       	subi	r22, 0x3F	; 63
    3870:	71 09       	sbc	r23, r1
    3872:	f1 01       	movw	r30, r2
    3874:	80 81       	ld	r24, Z
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	4d e7       	ldi	r20, 0x7D	; 125
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	88 54       	subi	r24, 0x48	; 72
    387e:	91 09       	sbc	r25, r1
    3880:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_DrawText>
      LCD_DrawText(b_x[x] + 63, b_y[y] - 63, MAX_VALUE_ZONE_STR);
    3884:	e9 81       	ldd	r30, Y+1	; 0x01
    3886:	fa 81       	ldd	r31, Y+2	; 0x02
    3888:	60 81       	ld	r22, Z
    388a:	71 81       	ldd	r23, Z+1	; 0x01
    388c:	6f 53       	subi	r22, 0x3F	; 63
    388e:	71 09       	sbc	r23, r1
    3890:	f1 01       	movw	r30, r2
    3892:	80 81       	ld	r24, Z
    3894:	91 81       	ldd	r25, Z+1	; 0x01
    3896:	4c e7       	ldi	r20, 0x7C	; 124
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	cf 96       	adiw	r24, 0x3f	; 63
    389c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <LCD_DrawText>
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	61 2c       	mov	r6, r1
    38ac:	71 2c       	mov	r7, r1
      
      //подпись
      for(i = 0; i < faska; i++)
      {
        LCD_DrawLine(b_x[x] - 35 - i, b_y[y] - 22 + faska - i, b_x[x] - 35 - i, b_y[y], VGA_YELLOW, 1);
    38ae:	e9 81       	ldd	r30, Y+1	; 0x01
    38b0:	fa 81       	ldd	r31, Y+2	; 0x02
    38b2:	20 81       	ld	r18, Z
    38b4:	31 81       	ldd	r19, Z+1	; 0x01
    38b6:	f1 01       	movw	r30, r2
    38b8:	60 81       	ld	r22, Z
    38ba:	71 81       	ldd	r23, Z+1	; 0x01
    38bc:	63 52       	subi	r22, 0x23	; 35
    38be:	71 09       	sbc	r23, r1
    38c0:	66 19       	sub	r22, r6
    38c2:	77 09       	sbc	r23, r7
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	59 01       	movw	r10, r18
    38ca:	c1 2c       	mov	r12, r1
    38cc:	d1 2c       	mov	r13, r1
    38ce:	23 51       	subi	r18, 0x13	; 19
    38d0:	31 09       	sbc	r19, r1
    38d2:	26 19       	sub	r18, r6
    38d4:	37 09       	sbc	r19, r7
    38d6:	40 e0       	ldi	r20, 0x00	; 0
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	1f 92       	push	r1
    38dc:	1f 92       	push	r1
    38de:	1f 92       	push	r1
    38e0:	f1 e0       	ldi	r31, 0x01	; 1
    38e2:	ff 93       	push	r31
    38e4:	a0 ee       	ldi	r26, 0xE0	; 224
    38e6:	8a 2e       	mov	r8, r26
    38e8:	99 24       	eor	r9, r9
    38ea:	9a 94       	dec	r9
    38ec:	7b 01       	movw	r14, r22
    38ee:	8c 01       	movw	r16, r24
    38f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
        
        LCD_DrawLine(b_x[x] - 35 - i, b_y[y] - 22 + faska - i, b_x[x] - 35 + faska - i, b_y[y] - 22 - i, VGA_YELLOW, 1);
    38f4:	e9 81       	ldd	r30, Y+1	; 0x01
    38f6:	fa 81       	ldd	r31, Y+2	; 0x02
    38f8:	40 81       	ld	r20, Z
    38fa:	51 81       	ldd	r21, Z+1	; 0x01
    38fc:	46 19       	sub	r20, r6
    38fe:	57 09       	sbc	r21, r7
    3900:	f1 01       	movw	r30, r2
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	86 19       	sub	r24, r6
    3908:	97 09       	sbc	r25, r7
    390a:	5a 01       	movw	r10, r20
    390c:	f6 e1       	ldi	r31, 0x16	; 22
    390e:	af 1a       	sub	r10, r31
    3910:	b1 08       	sbc	r11, r1
    3912:	c1 2c       	mov	r12, r1
    3914:	d1 2c       	mov	r13, r1
    3916:	7c 01       	movw	r14, r24
    3918:	20 e2       	ldi	r18, 0x20	; 32
    391a:	e2 1a       	sub	r14, r18
    391c:	f1 08       	sbc	r15, r1
    391e:	00 e0       	ldi	r16, 0x00	; 0
    3920:	10 e0       	ldi	r17, 0x00	; 0
    3922:	9a 01       	movw	r18, r20
    3924:	23 51       	subi	r18, 0x13	; 19
    3926:	31 09       	sbc	r19, r1
    3928:	40 e0       	ldi	r20, 0x00	; 0
    392a:	50 e0       	ldi	r21, 0x00	; 0
    392c:	bc 01       	movw	r22, r24
    392e:	63 52       	subi	r22, 0x23	; 35
    3930:	71 09       	sbc	r23, r1
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	1f 92       	push	r1
    3938:	1f 92       	push	r1
    393a:	1f 92       	push	r1
    393c:	e1 e0       	ldi	r30, 0x01	; 1
    393e:	ef 93       	push	r30
    3940:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
        
        if (i < faska - 1)
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	32 e0       	ldi	r19, 0x02	; 2
    3950:	63 16       	cp	r6, r19
    3952:	71 04       	cpc	r7, r1
    3954:	61 f1       	breq	.+88     	; 0x39ae <drawWorkArea+0x6cc>
          LCD_DrawLine(b_x[x] - 36 - i, b_y[y] - 22 + faska - i, b_x[x] - 36 + faska - i, b_y[y] - 22 - i, VGA_YELLOW, 1);
    3956:	e9 81       	ldd	r30, Y+1	; 0x01
    3958:	fa 81       	ldd	r31, Y+2	; 0x02
    395a:	40 81       	ld	r20, Z
    395c:	51 81       	ldd	r21, Z+1	; 0x01
    395e:	46 19       	sub	r20, r6
    3960:	57 09       	sbc	r21, r7
    3962:	f1 01       	movw	r30, r2
    3964:	80 81       	ld	r24, Z
    3966:	91 81       	ldd	r25, Z+1	; 0x01
    3968:	86 19       	sub	r24, r6
    396a:	97 09       	sbc	r25, r7
    396c:	5a 01       	movw	r10, r20
    396e:	f6 e1       	ldi	r31, 0x16	; 22
    3970:	af 1a       	sub	r10, r31
    3972:	b1 08       	sbc	r11, r1
    3974:	c1 2c       	mov	r12, r1
    3976:	d1 2c       	mov	r13, r1
    3978:	7c 01       	movw	r14, r24
    397a:	21 e2       	ldi	r18, 0x21	; 33
    397c:	e2 1a       	sub	r14, r18
    397e:	f1 08       	sbc	r15, r1
    3980:	00 e0       	ldi	r16, 0x00	; 0
    3982:	10 e0       	ldi	r17, 0x00	; 0
    3984:	9a 01       	movw	r18, r20
    3986:	23 51       	subi	r18, 0x13	; 19
    3988:	31 09       	sbc	r19, r1
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	bc 01       	movw	r22, r24
    3990:	64 52       	subi	r22, 0x24	; 36
    3992:	71 09       	sbc	r23, r1
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	1f 92       	push	r1
    399a:	1f 92       	push	r1
    399c:	1f 92       	push	r1
    399e:	e1 e0       	ldi	r30, 0x01	; 1
    39a0:	ef 93       	push	r30
    39a2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
        
        LCD_DrawLine(b_x[x] + 32 + i, b_y[y] - 22 + faska - i, b_x[x] + 32 + i, b_y[y], VGA_YELLOW, 1);
    39ae:	e9 81       	ldd	r30, Y+1	; 0x01
    39b0:	fa 81       	ldd	r31, Y+2	; 0x02
    39b2:	20 81       	ld	r18, Z
    39b4:	31 81       	ldd	r19, Z+1	; 0x01
    39b6:	f1 01       	movw	r30, r2
    39b8:	60 81       	ld	r22, Z
    39ba:	71 81       	ldd	r23, Z+1	; 0x01
    39bc:	60 5e       	subi	r22, 0xE0	; 224
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	66 0d       	add	r22, r6
    39c2:	77 1d       	adc	r23, r7
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	59 01       	movw	r10, r18
    39ca:	c1 2c       	mov	r12, r1
    39cc:	d1 2c       	mov	r13, r1
    39ce:	23 51       	subi	r18, 0x13	; 19
    39d0:	31 09       	sbc	r19, r1
    39d2:	26 19       	sub	r18, r6
    39d4:	37 09       	sbc	r19, r7
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	1f 92       	push	r1
    39dc:	1f 92       	push	r1
    39de:	1f 92       	push	r1
    39e0:	f1 e0       	ldi	r31, 0x01	; 1
    39e2:	ff 93       	push	r31
    39e4:	f0 ee       	ldi	r31, 0xE0	; 224
    39e6:	8f 2e       	mov	r8, r31
    39e8:	99 24       	eor	r9, r9
    39ea:	9a 94       	dec	r9
    39ec:	7b 01       	movw	r14, r22
    39ee:	8c 01       	movw	r16, r24
    39f0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
        
        LCD_DrawLine(b_x[x] + 32 + i, b_y[y] - 22 + faska - i, b_x[x] + 32 - faska + i, b_y[y] - 22 - i, VGA_YELLOW, 1);
    39f4:	e9 81       	ldd	r30, Y+1	; 0x01
    39f6:	fa 81       	ldd	r31, Y+2	; 0x02
    39f8:	40 81       	ld	r20, Z
    39fa:	51 81       	ldd	r21, Z+1	; 0x01
    39fc:	46 19       	sub	r20, r6
    39fe:	57 09       	sbc	r21, r7
    3a00:	f1 01       	movw	r30, r2
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	86 0d       	add	r24, r6
    3a08:	97 1d       	adc	r25, r7
    3a0a:	5a 01       	movw	r10, r20
    3a0c:	f6 e1       	ldi	r31, 0x16	; 22
    3a0e:	af 1a       	sub	r10, r31
    3a10:	b1 08       	sbc	r11, r1
    3a12:	c1 2c       	mov	r12, r1
    3a14:	d1 2c       	mov	r13, r1
    3a16:	7c 01       	movw	r14, r24
    3a18:	2d e1       	ldi	r18, 0x1D	; 29
    3a1a:	e2 0e       	add	r14, r18
    3a1c:	f1 1c       	adc	r15, r1
    3a1e:	00 e0       	ldi	r16, 0x00	; 0
    3a20:	10 e0       	ldi	r17, 0x00	; 0
    3a22:	9a 01       	movw	r18, r20
    3a24:	23 51       	subi	r18, 0x13	; 19
    3a26:	31 09       	sbc	r19, r1
    3a28:	40 e0       	ldi	r20, 0x00	; 0
    3a2a:	50 e0       	ldi	r21, 0x00	; 0
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	60 5e       	subi	r22, 0xE0	; 224
    3a30:	7f 4f       	sbci	r23, 0xFF	; 255
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	1f 92       	push	r1
    3a38:	1f 92       	push	r1
    3a3a:	1f 92       	push	r1
    3a3c:	e1 e0       	ldi	r30, 0x01	; 1
    3a3e:	ef 93       	push	r30
    3a40:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
        
        if (i < faska - 1)
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	32 e0       	ldi	r19, 0x02	; 2
    3a50:	63 16       	cp	r6, r19
    3a52:	71 04       	cpc	r7, r1
    3a54:	61 f1       	breq	.+88     	; 0x3aae <drawWorkArea+0x7cc>
          LCD_DrawLine(b_x[x] + 32 + i, b_y[y] - 23 + faska - i, b_x[x] + 32 - faska + i, b_y[y] - 23 - i, VGA_YELLOW, 1);
    3a56:	e9 81       	ldd	r30, Y+1	; 0x01
    3a58:	fa 81       	ldd	r31, Y+2	; 0x02
    3a5a:	40 81       	ld	r20, Z
    3a5c:	51 81       	ldd	r21, Z+1	; 0x01
    3a5e:	46 19       	sub	r20, r6
    3a60:	57 09       	sbc	r21, r7
    3a62:	f1 01       	movw	r30, r2
    3a64:	80 81       	ld	r24, Z
    3a66:	91 81       	ldd	r25, Z+1	; 0x01
    3a68:	86 0d       	add	r24, r6
    3a6a:	97 1d       	adc	r25, r7
    3a6c:	5a 01       	movw	r10, r20
    3a6e:	f7 e1       	ldi	r31, 0x17	; 23
    3a70:	af 1a       	sub	r10, r31
    3a72:	b1 08       	sbc	r11, r1
    3a74:	c1 2c       	mov	r12, r1
    3a76:	d1 2c       	mov	r13, r1
    3a78:	7c 01       	movw	r14, r24
    3a7a:	2d e1       	ldi	r18, 0x1D	; 29
    3a7c:	e2 0e       	add	r14, r18
    3a7e:	f1 1c       	adc	r15, r1
    3a80:	00 e0       	ldi	r16, 0x00	; 0
    3a82:	10 e0       	ldi	r17, 0x00	; 0
    3a84:	9a 01       	movw	r18, r20
    3a86:	24 51       	subi	r18, 0x14	; 20
    3a88:	31 09       	sbc	r19, r1
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	50 e0       	ldi	r21, 0x00	; 0
    3a8e:	bc 01       	movw	r22, r24
    3a90:	60 5e       	subi	r22, 0xE0	; 224
    3a92:	7f 4f       	sbci	r23, 0xFF	; 255
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	1f 92       	push	r1
    3a9a:	1f 92       	push	r1
    3a9c:	1f 92       	push	r1
    3a9e:	e1 e0       	ldi	r30, 0x01	; 1
    3aa0:	ef 93       	push	r30
    3aa2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
        
        LCD_DrawLine(b_x[x] - 35 + faska - i, b_y[y] - 22 - i, b_x[x] + 32 - faska + i, b_y[y] - 22 - i, VGA_YELLOW, 1);
    3aae:	f1 01       	movw	r30, r2
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab8:	20 81       	ld	r18, Z
    3aba:	31 81       	ldd	r19, Z+1	; 0x01
    3abc:	26 51       	subi	r18, 0x16	; 22
    3abe:	31 09       	sbc	r19, r1
    3ac0:	26 19       	sub	r18, r6
    3ac2:	37 09       	sbc	r19, r7
    3ac4:	40 e0       	ldi	r20, 0x00	; 0
    3ac6:	50 e0       	ldi	r21, 0x00	; 0
    3ac8:	7b 01       	movw	r14, r22
    3aca:	fd e1       	ldi	r31, 0x1D	; 29
    3acc:	ef 0e       	add	r14, r31
    3ace:	f1 1c       	adc	r15, r1
    3ad0:	e6 0c       	add	r14, r6
    3ad2:	f7 1c       	adc	r15, r7
    3ad4:	00 e0       	ldi	r16, 0x00	; 0
    3ad6:	10 e0       	ldi	r17, 0x00	; 0
    3ad8:	60 52       	subi	r22, 0x20	; 32
    3ada:	71 09       	sbc	r23, r1
    3adc:	66 19       	sub	r22, r6
    3ade:	77 09       	sbc	r23, r7
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	1f 92       	push	r1
    3ae6:	1f 92       	push	r1
    3ae8:	1f 92       	push	r1
    3aea:	e1 e0       	ldi	r30, 0x01	; 1
    3aec:	ef 93       	push	r30
    3aee:	e0 ee       	ldi	r30, 0xE0	; 224
    3af0:	8e 2e       	mov	r8, r30
    3af2:	99 24       	eor	r9, r9
    3af4:	9a 94       	dec	r9
    3af6:	59 01       	movw	r10, r18
    3af8:	6a 01       	movw	r12, r20
    3afa:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_DrawLine>
    3afe:	ff ef       	ldi	r31, 0xFF	; 255
    3b00:	6f 1a       	sub	r6, r31
    3b02:	7f 0a       	sbc	r7, r31
      LCD_SetFont(SmallFont);
      LCD_DrawText(b_x[x] - 72, b_y[y] - 63, "0");
      LCD_DrawText(b_x[x] + 63, b_y[y] - 63, MAX_VALUE_ZONE_STR);
      
      //подпись
      for(i = 0; i < faska; i++)
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	23 e0       	ldi	r18, 0x03	; 3
    3b0e:	62 16       	cp	r6, r18
    3b10:	71 04       	cpc	r7, r1
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <drawWorkArea+0x834>
    3b14:	cc ce       	rjmp	.-616    	; 0x38ae <drawWorkArea+0x5cc>
          LCD_DrawLine(b_x[x] + 32 + i, b_y[y] - 23 + faska - i, b_x[x] + 32 - faska + i, b_y[y] - 23 - i, VGA_YELLOW, 1);
        
        LCD_DrawLine(b_x[x] - 35 + faska - i, b_y[y] - 22 - i, b_x[x] + 32 - faska + i, b_y[y] - 22 - i, VGA_YELLOW, 1);
      }
      
      drawValueZone(x, y, (x + 1) * 7000 + (y + 1) * 3500);
    3b16:	4d 85       	ldd	r20, Y+13	; 0x0d
    3b18:	5e 85       	ldd	r21, Y+14	; 0x0e
    3b1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b1e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <drawValueZone>
  LCD_FillRectangle(251, 220, 253, 240, VGA_YELLOW);
  //==================================
  
  // рисуем индикаторы
  for(x = 0; x < count_work_area_x; x++)
    for(y = 0; y < count_work_area_y; y++)
    3b22:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b24:	3f 5f       	subi	r19, 0xFF	; 255
    3b26:	3b 87       	std	Y+11, r19	; 0x0b
    3b28:	49 81       	ldd	r20, Y+1	; 0x01
    3b2a:	5a 81       	ldd	r21, Y+2	; 0x02
    3b2c:	4e 5f       	subi	r20, 0xFE	; 254
    3b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b30:	5a 83       	std	Y+2, r21	; 0x02
    3b32:	49 83       	std	Y+1, r20	; 0x01
    3b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b38:	84 55       	subi	r24, 0x54	; 84
    3b3a:	92 4f       	sbci	r25, 0xF2	; 242
    3b3c:	9e 87       	std	Y+14, r25	; 0x0e
    3b3e:	8d 87       	std	Y+13, r24	; 0x0d
    3b40:	32 30       	cpi	r19, 0x02	; 2
    3b42:	09 f0       	breq	.+2      	; 0x3b46 <drawWorkArea+0x864>
    3b44:	4e cc       	rjmp	.-1892   	; 0x33e2 <drawWorkArea+0x100>
  LCD_FillRectangle(254, 220, 320, 240, BACKGROUND_COLOR);
  LCD_FillRectangle(251, 220, 253, 240, VGA_YELLOW);
  //==================================
  
  // рисуем индикаторы
  for(x = 0; x < count_work_area_x; x++)
    3b46:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b48:	9f 5f       	subi	r25, 0xFF	; 255
    3b4a:	9c 87       	std	Y+12, r25	; 0x0c
    3b4c:	e2 e0       	ldi	r30, 0x02	; 2
    3b4e:	2e 0e       	add	r2, r30
    3b50:	31 1c       	adc	r3, r1
    3b52:	2b 89       	ldd	r18, Y+19	; 0x13
    3b54:	3c 89       	ldd	r19, Y+20	; 0x14
    3b56:	28 5a       	subi	r18, 0xA8	; 168
    3b58:	34 4e       	sbci	r19, 0xE4	; 228
    3b5a:	3c 8b       	std	Y+20, r19	; 0x14
    3b5c:	2b 8b       	std	Y+19, r18	; 0x13
    3b5e:	92 30       	cpi	r25, 0x02	; 2
    3b60:	51 f0       	breq	.+20     	; 0x3b76 <drawWorkArea+0x894>
    3b62:	40 e6       	ldi	r20, 0x60	; 96
    3b64:	50 e0       	ldi	r21, 0x00	; 0
    3b66:	5a 83       	std	Y+2, r21	; 0x02
    3b68:	49 83       	std	Y+1, r20	; 0x01
  prev_xy[zone_x][zone_y][3] = y2;
}

// рисует рабочую область
void drawWorkArea()
{
    3b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6e:	9e 87       	std	Y+14, r25	; 0x0e
    3b70:	8d 87       	std	Y+13, r24	; 0x0d
    3b72:	1b 86       	std	Y+11, r1	; 0x0b
    3b74:	36 cc       	rjmp	.-1940   	; 0x33e2 <drawWorkArea+0x100>
      
      drawValueZone(x, y, (x + 1) * 7000 + (y + 1) * 3500);
    }
  // первый квадрат
  //==================================================================
}
    3b76:	68 96       	adiw	r28, 0x18	; 24
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	df 90       	pop	r13
    3b90:	cf 90       	pop	r12
    3b92:	bf 90       	pop	r11
    3b94:	af 90       	pop	r10
    3b96:	9f 90       	pop	r9
    3b98:	8f 90       	pop	r8
    3b9a:	7f 90       	pop	r7
    3b9c:	6f 90       	pop	r6
    3b9e:	5f 90       	pop	r5
    3ba0:	4f 90       	pop	r4
    3ba2:	3f 90       	pop	r3
    3ba4:	2f 90       	pop	r2
    3ba6:	08 95       	ret

00003ba8 <main>:
  //        ||||- ADC4 - датчик температуры
  //        |||||- RD
  //        ||||||-
  //        |||||||-
  //        ||||||||-
  PORTA = 0b00000000;
    3ba8:	1b ba       	out	0x1b, r1	; 27
  DDRA =  0b00001000;
    3baa:	88 e0       	ldi	r24, 0x08	; 8
    3bac:	8a bb       	out	0x1a, r24	; 26
  //        ||||- WR
  //        |||||- RS
  //        ||||||- внешнее прерывание INT2
  //        |||||||- SDA
  //        ||||||||- SCL
  PORTB = 0b00000000;
    3bae:	18 ba       	out	0x18, r1	; 24
  DDRB =  0b00011001;
    3bb0:	89 e1       	ldi	r24, 0x19	; 25
    3bb2:	87 bb       	out	0x17, r24	; 23
  //        ||||-
  //        |||||-
  //        ||||||-
  //        |||||||- REST
  //        ||||||||- 
  PORTC = 0b00000000;
    3bb4:	15 ba       	out	0x15, r1	; 21
  DDRC =  0b00000010;
    3bb6:	82 e0       	ldi	r24, 0x02	; 2
    3bb8:	84 bb       	out	0x14, r24	; 20
  //        ||||- DB12
  //        |||||- DB11
  //        ||||||- DB10
  //        |||||||- DB09
  //        ||||||||- DB08
  PORTD = 0b00000000;
    3bba:	12 ba       	out	0x12, r1	; 18
  DDRD =  0b11111111;
    3bbc:	8f ef       	ldi	r24, 0xFF	; 255
    3bbe:	81 bb       	out	0x11, r24	; 17
  
  // готовим экран
  drawWorkArea();
    3bc0:	0e 94 71 19 	call	0x32e2	; 0x32e2 <drawWorkArea>
  
  //l_set_time(20, 23, 00);
  
  update_time(1);
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	0e 94 22 19 	call	0x3244	; 0x3244 <update_time>
  
  initTimer0();
    3bca:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <initTimer0>
  initADC();
    3bce:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <initADC>
  
  update_temperature();
    3bd2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <update_temperature>
  
  // разрешаем прерывани€
  sei();
    3bd6:	78 94       	sei
  
  while(1)
  {
    if(updateTime)
    3bd8:	80 91 a2 00 	lds	r24, 0x00A2
    3bdc:	88 23       	and	r24, r24
    3bde:	19 f0       	breq	.+6      	; 0x3be6 <main+0x3e>
    {
      update_time(0);
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	0e 94 22 19 	call	0x3244	; 0x3244 <update_time>
    }
    if (temp_inter == TEMPERATURE_INTERVAL)
    3be6:	80 91 a0 00 	lds	r24, 0x00A0
    3bea:	81 30       	cpi	r24, 0x01	; 1
    3bec:	a9 f7       	brne	.-22     	; 0x3bd8 <main+0x30>
    {
      temp_inter = 0;
    3bee:	10 92 a0 00 	sts	0x00A0, r1
      update_temperature();
    3bf2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <update_temperature>
    3bf6:	f0 cf       	rjmp	.-32     	; 0x3bd8 <main+0x30>

00003bf8 <__vector_19>:

/**************************************
*********ќбработчик прерываний*********
***************************************/
ISR(TWI_vect)
{
    3bf8:	1f 92       	push	r1
    3bfa:	0f 92       	push	r0
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	0f 92       	push	r0
    3c00:	11 24       	eor	r1, r1
    3c02:	2f 93       	push	r18
    3c04:	3f 93       	push	r19
    3c06:	8f 93       	push	r24
    3c08:	9f 93       	push	r25
    3c0a:	ef 93       	push	r30
    3c0c:	ff 93       	push	r31
  unsigned char stat;
  
  stat = TWSR & 0xF8;
    3c0e:	81 b1       	in	r24, 0x01	; 1
    3c10:	88 7f       	andi	r24, 0xF8	; 248

  switch(stat)
    3c12:	88 32       	cpi	r24, 0x28	; 40
    3c14:	99 f0       	breq	.+38     	; 0x3c3c <__vector_19+0x44>
    3c16:	40 f4       	brcc	.+16     	; 0x3c28 <__vector_19+0x30>
    3c18:	80 31       	cpi	r24, 0x10	; 16
    3c1a:	71 f0       	breq	.+28     	; 0x3c38 <__vector_19+0x40>
    3c1c:	88 31       	cpi	r24, 0x18	; 24
    3c1e:	71 f0       	breq	.+28     	; 0x3c3c <__vector_19+0x44>
    3c20:	88 30       	cpi	r24, 0x08	; 8
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <__vector_19+0x2e>
    3c24:	47 c0       	rjmp	.+142    	; 0x3cb4 <__vector_19+0xbc>
    3c26:	08 c0       	rjmp	.+16     	; 0x3c38 <__vector_19+0x40>
    3c28:	80 35       	cpi	r24, 0x50	; 80
    3c2a:	f9 f0       	breq	.+62     	; 0x3c6a <__vector_19+0x72>
    3c2c:	88 35       	cpi	r24, 0x58	; 88
    3c2e:	b1 f1       	breq	.+108    	; 0x3c9c <__vector_19+0xa4>
    3c30:	80 34       	cpi	r24, 0x40	; 64
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <__vector_19+0x3e>
    3c34:	3f c0       	rjmp	.+126    	; 0x3cb4 <__vector_19+0xbc>
    3c36:	24 c0       	rjmp	.+72     	; 0x3c80 <__vector_19+0x88>
  {
    case TWI_START:  // состо€ние —“ј–“ сформировано
    case TWI_REP_START: // состо€ние ѕќ¬“ќ–Ќџ… —“ј–“ сформировано
      tekByte = 0;
    3c38:	10 92 c3 00 	sts	0x00C3, r1
      // нету break, т.к сразу переходим к передаче массива байт
    case TWI_SLA_W_ACK:      // отправили адрес с битом записи и получили ACK
    case TWI_SEND_BYTE_ACK:  // послали байт и получили подтверждение
      if (tekByte < twiMsgSize) // если еще не все отправили
    3c3c:	80 91 c3 00 	lds	r24, 0x00C3
    3c40:	90 91 a3 00 	lds	r25, 0x00A3
    3c44:	89 17       	cp	r24, r25
    3c46:	60 f4       	brcc	.+24     	; 0x3c60 <__vector_19+0x68>
      {
        TWDR = twiBuf[tekByte];  // загружаем очередной байт
    3c48:	e8 2f       	mov	r30, r24
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	ec 55       	subi	r30, 0x5C	; 92
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	90 81       	ld	r25, Z
    3c52:	93 b9       	out	0x03, r25	; 3
        TWCR = (1 << TWEN) | // разрешаем работу TWI модулю
    3c54:	95 e8       	ldi	r25, 0x85	; 133
    3c56:	96 bf       	out	0x36, r25	; 54
               (1 << TWIE) | // разрешаем прерывани€
               (1 << TWINT);  // сбрасываем текущее прерывание
        tekByte++;
    3c58:	8f 5f       	subi	r24, 0xFF	; 255
    3c5a:	80 93 c3 00 	sts	0x00C3, r24
    3c5e:	2e c0       	rjmp	.+92     	; 0x3cbc <__vector_19+0xc4>
      }
      else
      {
        twiState = TWI_SUCCESS;
    3c60:	8f ef       	ldi	r24, 0xFF	; 255
    3c62:	80 93 71 00 	sts	0x0071, r24
        TWCR = (1 << TWEN) | // разрешаем работу TWI модул€
    3c66:	84 e9       	ldi	r24, 0x94	; 148
    3c68:	28 c0       	rjmp	.+80     	; 0x3cba <__vector_19+0xc2>
               (0 << TWIE); // запрещаем прерывани€
      }
      break;

    case TWI_RECEIVE_BYTE_ACK: // байт прин€т и передано ACK
      twiBuf[tekByte] = TWDR;
    3c6a:	80 91 c3 00 	lds	r24, 0x00C3
    3c6e:	e8 2f       	mov	r30, r24
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	93 b1       	in	r25, 0x03	; 3
    3c74:	ec 55       	subi	r30, 0x5C	; 92
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	90 83       	st	Z, r25
      tekByte++;
    3c7a:	8f 5f       	subi	r24, 0xFF	; 255
    3c7c:	80 93 c3 00 	sts	0x00C3, r24
    // нету break, т.к. после получени€ бита нужно сказать как обработать следующи бит
    // теже действи€ нужно произвести после получени€ ј—  после команды SLA+R
    case TWI_SLA_R_ACK:  // послали адрес с битом на чтение и получили ACK
      if (tekByte < twiMsgSize - 1) // если получен не предпоследний бит
    3c80:	80 91 a3 00 	lds	r24, 0x00A3
    3c84:	20 91 c3 00 	lds	r18, 0x00C3
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	28 17       	cp	r18, r24
    3c90:	39 07       	cpc	r19, r25
    3c92:	14 f4       	brge	.+4      	; 0x3c98 <__vector_19+0xa0>
      {
        TWCR = (1 << TWEN) | // разрешаем работу TWI модул€
    3c94:	85 ec       	ldi	r24, 0xC5	; 197
    3c96:	11 c0       	rjmp	.+34     	; 0x3cba <__vector_19+0xc2>
               (1 << TWINT) | // сбрасыаем текущее прерывание
               (1 << TWEA);  // разрешаем подтверждать следующий прин€тый байт
      }
      else // а если получен предпоследний бит то при получении следующего подтверждение не делаем
      {
        TWCR = (1 << TWEN) | // разрешаем работу TWI модул€
    3c98:	85 e8       	ldi	r24, 0x85	; 133
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <__vector_19+0xc2>
               (1 << TWINT); // сбрасыаем текущее прерывание
      }
      break;
    
    case TWI_RECEIVE_BYTE_NACK: // байт прин€т и передано NACK
      twiBuf[tekByte] = TWDR;
    3c9c:	e0 91 c3 00 	lds	r30, 0x00C3
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	83 b1       	in	r24, 0x03	; 3
    3ca4:	ec 55       	subi	r30, 0x5C	; 92
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	80 83       	st	Z, r24
      twiState = TWI_SUCCESS;
    3caa:	8f ef       	ldi	r24, 0xFF	; 255
    3cac:	80 93 71 00 	sts	0x0071, r24
      TWCR = (1 << TWEN) | // разрешаем работу TWI модул€
    3cb0:	84 e1       	ldi	r24, 0x14	; 20
    3cb2:	03 c0       	rjmp	.+6      	; 0x3cba <__vector_19+0xc2>
    case TWI_FAIL:
    case TWI_SLA_W_NACK:
    case TWI_SEND_BYTE_NACK:
    case TWI_SLA_R_NACK:
    default:
      twiState = stat;
    3cb4:	80 93 71 00 	sts	0x0071, r24
      TWCR = (1 << TWEN) | 
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	86 bf       	out	0x36, r24	; 54
             (0 << TWEA) |
             (0 << TWSTA) | 
             (0 << TWSTO) |
             (0 << TWWC);
  }
    3cbc:	ff 91       	pop	r31
    3cbe:	ef 91       	pop	r30
    3cc0:	9f 91       	pop	r25
    3cc2:	8f 91       	pop	r24
    3cc4:	3f 91       	pop	r19
    3cc6:	2f 91       	pop	r18
    3cc8:	0f 90       	pop	r0
    3cca:	0f be       	out	0x3f, r0	; 63
    3ccc:	0f 90       	pop	r0
    3cce:	1f 90       	pop	r1
    3cd0:	18 95       	reti

00003cd2 <i2start>:
#include "I2C.h"


void i2start(void)
{
  DDR_I2C  |=  _BV(SDA);
    3cd2:	b9 9a       	sbi	0x17, 1	; 23
  PORT_I2C |=  _BV(SDA); _delay_us(pause);
    3cd4:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cd6:	81 e2       	ldi	r24, 0x21	; 33
    3cd8:	8a 95       	dec	r24
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <i2start+0x6>
    3cdc:	00 00       	nop
  PORT_I2C |=  _BV(SCL); _delay_us(pause);
    3cde:	c0 9a       	sbi	0x18, 0	; 24
    3ce0:	81 e2       	ldi	r24, 0x21	; 33
    3ce2:	8a 95       	dec	r24
    3ce4:	f1 f7       	brne	.-4      	; 0x3ce2 <i2start+0x10>
    3ce6:	00 00       	nop
  PORT_I2C &= ~_BV(SDA); _delay_us(pause);
    3ce8:	c1 98       	cbi	0x18, 1	; 24
    3cea:	81 e2       	ldi	r24, 0x21	; 33
    3cec:	8a 95       	dec	r24
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <i2start+0x1a>
    3cf0:	00 00       	nop
  PORT_I2C &= ~_BV(SCL); _delay_us(pause);
    3cf2:	c0 98       	cbi	0x18, 0	; 24
    3cf4:	81 e2       	ldi	r24, 0x21	; 33
    3cf6:	8a 95       	dec	r24
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <i2start+0x24>
    3cfa:	00 00       	nop
  DDR_I2C  &= ~_BV(SDA);
    3cfc:	b9 98       	cbi	0x17, 1	; 23
    3cfe:	08 95       	ret

00003d00 <i2write>:

void i2write(unsigned char byt)
{
  unsigned char k;
  
  DDR_I2C |= _BV(SDA);
    3d00:	b9 9a       	sbi	0x17, 1	; 23
    3d02:	27 e0       	ldi	r18, 0x07	; 7
    3d04:	30 e0       	ldi	r19, 0x00	; 0
  for (k = 0; k < 8; k++)
  {
    if(0x01 & (byt >> (7 - k))) PORT_I2C |= _BV(SDA);
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	ac 01       	movw	r20, r24
    3d0a:	02 2e       	mov	r0, r18
    3d0c:	02 c0       	rjmp	.+4      	; 0x3d12 <i2write+0x12>
    3d0e:	55 95       	asr	r21
    3d10:	47 95       	ror	r20
    3d12:	0a 94       	dec	r0
    3d14:	e2 f7       	brpl	.-8      	; 0x3d0e <i2write+0xe>
    3d16:	40 ff       	sbrs	r20, 0
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <i2write+0x1e>
    3d1a:	c1 9a       	sbi	0x18, 1	; 24
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <i2write+0x20>
    else PORT_I2C &= ~_BV(SDA);
    3d1e:	c1 98       	cbi	0x18, 1	; 24
    3d20:	41 e2       	ldi	r20, 0x21	; 33
    3d22:	4a 95       	dec	r20
    3d24:	f1 f7       	brne	.-4      	; 0x3d22 <i2write+0x22>
    3d26:	00 00       	nop
    _delay_us(pause);
    PORT_I2C |=  _BV(SCL); _delay_us(pause);
    3d28:	c0 9a       	sbi	0x18, 0	; 24
    3d2a:	41 e2       	ldi	r20, 0x21	; 33
    3d2c:	4a 95       	dec	r20
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <i2write+0x2c>
    3d30:	00 00       	nop
    PORT_I2C &= ~ _BV(SCL); _delay_us(pause);
    3d32:	c0 98       	cbi	0x18, 0	; 24
    3d34:	41 e2       	ldi	r20, 0x21	; 33
    3d36:	4a 95       	dec	r20
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <i2write+0x36>
    3d3a:	00 00       	nop
    3d3c:	21 50       	subi	r18, 0x01	; 1
    3d3e:	31 09       	sbc	r19, r1
    3d40:	18 f7       	brcc	.-58     	; 0x3d08 <i2write+0x8>
  }
  DDR_I2C &= ~_BV(SDA);
    3d42:	b9 98       	cbi	0x17, 1	; 23
    3d44:	08 95       	ret

00003d46 <i2stop>:
}

void i2stop(void)
{
  DDR_I2C |= _BV(SDA);
    3d46:	b9 9a       	sbi	0x17, 1	; 23
  PORT_I2C &= ~_BV(SDA); _delay_us(pause);
    3d48:	c1 98       	cbi	0x18, 1	; 24
    3d4a:	81 e2       	ldi	r24, 0x21	; 33
    3d4c:	8a 95       	dec	r24
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <i2stop+0x6>
    3d50:	00 00       	nop
  PORT_I2C |=  _BV(SCL); _delay_us(pause);
    3d52:	c0 9a       	sbi	0x18, 0	; 24
    3d54:	81 e2       	ldi	r24, 0x21	; 33
    3d56:	8a 95       	dec	r24
    3d58:	f1 f7       	brne	.-4      	; 0x3d56 <i2stop+0x10>
    3d5a:	00 00       	nop
  PORT_I2C |= _BV(SDA); _delay_us(pause);
    3d5c:	c1 9a       	sbi	0x18, 1	; 24
    3d5e:	81 e2       	ldi	r24, 0x21	; 33
    3d60:	8a 95       	dec	r24
    3d62:	f1 f7       	brne	.-4      	; 0x3d60 <i2stop+0x1a>
    3d64:	00 00       	nop
  DDR_I2C &= ~_BV(SDA);
    3d66:	b9 98       	cbi	0x17, 1	; 23
    3d68:	08 95       	ret

00003d6a <i2ack>:

unsigned char i2ack(void)
{
  unsigned char check, y;
  
  DDR_I2C |= _BV(SDA);
    3d6a:	b9 9a       	sbi	0x17, 1	; 23
  PORT_I2C |= _BV(SDA); _delay_us(pause);
    3d6c:	c1 9a       	sbi	0x18, 1	; 24
    3d6e:	81 e2       	ldi	r24, 0x21	; 33
    3d70:	8a 95       	dec	r24
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <i2ack+0x6>
    3d74:	00 00       	nop
  DDR_I2C &= ~_BV(SDA);
    3d76:	b9 98       	cbi	0x17, 1	; 23
  PORT_I2C |= _BV(SCL);
    3d78:	c0 9a       	sbi	0x18, 0	; 24
    3d7a:	83 e0       	ldi	r24, 0x03	; 3
    3d7c:	91 e2       	ldi	r25, 0x21	; 33
    3d7e:	9a 95       	dec	r25
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <i2ack+0x14>
    3d82:	00 00       	nop
  for (y = 3; y > 0; y--)
  {
    _delay_us(pause);
    if(bit_is_clear(PIN_I2C, SDA)) break;//if ((check = SDA) == 0) break;
    3d84:	b1 9b       	sbis	0x16, 1	; 22
    3d86:	02 c0       	rjmp	.+4      	; 0x3d8c <i2ack+0x22>
    3d88:	81 50       	subi	r24, 0x01	; 1
  
  DDR_I2C |= _BV(SDA);
  PORT_I2C |= _BV(SDA); _delay_us(pause);
  DDR_I2C &= ~_BV(SDA);
  PORT_I2C |= _BV(SCL);
  for (y = 3; y > 0; y--)
    3d8a:	c1 f7       	brne	.-16     	; 0x3d7c <i2ack+0x12>
  {
    _delay_us(pause);
    if(bit_is_clear(PIN_I2C, SDA)) break;//if ((check = SDA) == 0) break;
  }
  check = PIN_I2C & (1<<SDA);
    3d8c:	86 b3       	in	r24, 0x16	; 22
  PORT_I2C &= ~ _BV(SCL); _delay_us(pause);
    3d8e:	c0 98       	cbi	0x18, 0	; 24
    3d90:	91 e2       	ldi	r25, 0x21	; 33
    3d92:	9a 95       	dec	r25
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <i2ack+0x28>
    3d96:	00 00       	nop
  return (check);
}
    3d98:	82 70       	andi	r24, 0x02	; 2
    3d9a:	08 95       	ret

00003d9c <i2nack>:

void i2nack(void)
{
  unsigned char y;
  
  DDR_I2C |= _BV(SDA);
    3d9c:	b9 9a       	sbi	0x17, 1	; 23
  PORT_I2C |= _BV(SDA); _delay_us(pause);
    3d9e:	c1 9a       	sbi	0x18, 1	; 24
    3da0:	81 e2       	ldi	r24, 0x21	; 33
    3da2:	8a 95       	dec	r24
    3da4:	f1 f7       	brne	.-4      	; 0x3da2 <i2nack+0x6>
    3da6:	00 00       	nop
  DDR_I2C &= ~_BV(SDA);
    3da8:	b9 98       	cbi	0x17, 1	; 23
  PORT_I2C |=  _BV(SCL);
    3daa:	c0 9a       	sbi	0x18, 0	; 24
    3dac:	83 e0       	ldi	r24, 0x03	; 3
    3dae:	91 e2       	ldi	r25, 0x21	; 33
    3db0:	9a 95       	dec	r25
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <i2nack+0x14>
    3db4:	00 00       	nop
  for (y = 3; y > 0; y--)
  {
    _delay_us(pause);
    if(bit_is_set(PIN_I2C,SDA)) break;
    3db6:	b1 99       	sbic	0x16, 1	; 22
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <i2nack+0x22>
    3dba:	81 50       	subi	r24, 0x01	; 1
  
  DDR_I2C |= _BV(SDA);
  PORT_I2C |= _BV(SDA); _delay_us(pause);
  DDR_I2C &= ~_BV(SDA);
  PORT_I2C |=  _BV(SCL);
  for (y = 3; y > 0; y--)
    3dbc:	c1 f7       	brne	.-16     	; 0x3dae <i2nack+0x12>
  {
    _delay_us(pause);
    if(bit_is_set(PIN_I2C,SDA)) break;
  }
  PORT_I2C &= ~ _BV(SCL); _delay_us(pause);
    3dbe:	c0 98       	cbi	0x18, 0	; 24
    3dc0:	81 e2       	ldi	r24, 0x21	; 33
    3dc2:	8a 95       	dec	r24
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <i2nack+0x26>
    3dc6:	00 00       	nop
    3dc8:	08 95       	ret

00003dca <i2read>:

unsigned char i2read(void)
{
  unsigned char k, d=0;
  
  DDR_I2C |= _BV(SDA);
    3dca:	b9 9a       	sbi	0x17, 1	; 23
  PORT_I2C |= _BV(SDA);
    3dcc:	c1 9a       	sbi	0x18, 1	; 24
  DDR_I2C &= ~_BV(SDA);
    3dce:	b9 98       	cbi	0x17, 1	; 23
    3dd0:	98 e0       	ldi	r25, 0x08	; 8
  PORT_I2C &= ~ _BV(SCL); _delay_us(pause);
}

unsigned char i2read(void)
{
  unsigned char k, d=0;
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
  DDR_I2C |= _BV(SDA);
  PORT_I2C |= _BV(SDA);
  DDR_I2C &= ~_BV(SDA);
  for (k = 0; k < 8; k++)
  {
    PORT_I2C |=  _BV(SCL); _delay_us(pause*2);
    3dd4:	c0 9a       	sbi	0x18, 0	; 24
    3dd6:	22 e4       	ldi	r18, 0x42	; 66
    3dd8:	2a 95       	dec	r18
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <i2read+0xe>
    3ddc:	00 c0       	rjmp	.+0      	; 0x3dde <i2read+0x14>
    d = d << 1;
    3dde:	88 0f       	add	r24, r24
    if(bit_is_set(PIN_I2C, SDA)) d |= 0x01;
    3de0:	b1 9b       	sbis	0x16, 1	; 22
    3de2:	02 c0       	rjmp	.+4      	; 0x3de8 <i2read+0x1e>
    3de4:	81 60       	ori	r24, 0x01	; 1
    3de6:	01 c0       	rjmp	.+2      	; 0x3dea <i2read+0x20>
    else                       d &= ~0x01;
    3de8:	8e 7f       	andi	r24, 0xFE	; 254
    3dea:	22 e4       	ldi	r18, 0x42	; 66
    3dec:	2a 95       	dec	r18
    3dee:	f1 f7       	brne	.-4      	; 0x3dec <i2read+0x22>
    3df0:	00 c0       	rjmp	.+0      	; 0x3df2 <i2read+0x28>
    _delay_us(pause*2);
    PORT_I2C &= ~ _BV(SCL); _delay_us(pause*2);
    3df2:	c0 98       	cbi	0x18, 0	; 24
    3df4:	22 e4       	ldi	r18, 0x42	; 66
    3df6:	2a 95       	dec	r18
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <i2read+0x2c>
    3dfa:	00 c0       	rjmp	.+0      	; 0x3dfc <i2read+0x32>
    3dfc:	91 50       	subi	r25, 0x01	; 1
  unsigned char k, d=0;
  
  DDR_I2C |= _BV(SDA);
  PORT_I2C |= _BV(SDA);
  DDR_I2C &= ~_BV(SDA);
  for (k = 0; k < 8; k++)
    3dfe:	51 f7       	brne	.-44     	; 0x3dd4 <i2read+0xa>
    else                       d &= ~0x01;
    _delay_us(pause*2);
    PORT_I2C &= ~ _BV(SCL); _delay_us(pause*2);
  }
  return (d);
}
    3e00:	08 95       	ret

00003e02 <__subsf3>:
    3e02:	50 58       	subi	r21, 0x80	; 128

00003e04 <__addsf3>:
    3e04:	bb 27       	eor	r27, r27
    3e06:	aa 27       	eor	r26, r26
    3e08:	0e d0       	rcall	.+28     	; 0x3e26 <__addsf3x>
    3e0a:	dc c1       	rjmp	.+952    	; 0x41c4 <__fp_round>
    3e0c:	a5 d1       	rcall	.+842    	; 0x4158 <__fp_pscA>
    3e0e:	30 f0       	brcs	.+12     	; 0x3e1c <__addsf3+0x18>
    3e10:	aa d1       	rcall	.+852    	; 0x4166 <__fp_pscB>
    3e12:	20 f0       	brcs	.+8      	; 0x3e1c <__addsf3+0x18>
    3e14:	31 f4       	brne	.+12     	; 0x3e22 <__addsf3+0x1e>
    3e16:	9f 3f       	cpi	r25, 0xFF	; 255
    3e18:	11 f4       	brne	.+4      	; 0x3e1e <__addsf3+0x1a>
    3e1a:	1e f4       	brtc	.+6      	; 0x3e22 <__addsf3+0x1e>
    3e1c:	9a c1       	rjmp	.+820    	; 0x4152 <__fp_nan>
    3e1e:	0e f4       	brtc	.+2      	; 0x3e22 <__addsf3+0x1e>
    3e20:	e0 95       	com	r30
    3e22:	e7 fb       	bst	r30, 7
    3e24:	67 c1       	rjmp	.+718    	; 0x40f4 <__fp_inf>

00003e26 <__addsf3x>:
    3e26:	e9 2f       	mov	r30, r25
    3e28:	ef d1       	rcall	.+990    	; 0x4208 <__fp_split3>
    3e2a:	80 f3       	brcs	.-32     	; 0x3e0c <__addsf3+0x8>
    3e2c:	ba 17       	cp	r27, r26
    3e2e:	62 07       	cpc	r22, r18
    3e30:	73 07       	cpc	r23, r19
    3e32:	84 07       	cpc	r24, r20
    3e34:	95 07       	cpc	r25, r21
    3e36:	18 f0       	brcs	.+6      	; 0x3e3e <__addsf3x+0x18>
    3e38:	71 f4       	brne	.+28     	; 0x3e56 <__addsf3x+0x30>
    3e3a:	9e f5       	brtc	.+102    	; 0x3ea2 <__addsf3x+0x7c>
    3e3c:	1e c2       	rjmp	.+1084   	; 0x427a <__fp_zero>
    3e3e:	0e f4       	brtc	.+2      	; 0x3e42 <__addsf3x+0x1c>
    3e40:	e0 95       	com	r30
    3e42:	0b 2e       	mov	r0, r27
    3e44:	ba 2f       	mov	r27, r26
    3e46:	a0 2d       	mov	r26, r0
    3e48:	0b 01       	movw	r0, r22
    3e4a:	b9 01       	movw	r22, r18
    3e4c:	90 01       	movw	r18, r0
    3e4e:	0c 01       	movw	r0, r24
    3e50:	ca 01       	movw	r24, r20
    3e52:	a0 01       	movw	r20, r0
    3e54:	11 24       	eor	r1, r1
    3e56:	ff 27       	eor	r31, r31
    3e58:	59 1b       	sub	r21, r25
    3e5a:	99 f0       	breq	.+38     	; 0x3e82 <__addsf3x+0x5c>
    3e5c:	59 3f       	cpi	r21, 0xF9	; 249
    3e5e:	50 f4       	brcc	.+20     	; 0x3e74 <__addsf3x+0x4e>
    3e60:	50 3e       	cpi	r21, 0xE0	; 224
    3e62:	68 f1       	brcs	.+90     	; 0x3ebe <__addsf3x+0x98>
    3e64:	1a 16       	cp	r1, r26
    3e66:	f0 40       	sbci	r31, 0x00	; 0
    3e68:	a2 2f       	mov	r26, r18
    3e6a:	23 2f       	mov	r18, r19
    3e6c:	34 2f       	mov	r19, r20
    3e6e:	44 27       	eor	r20, r20
    3e70:	58 5f       	subi	r21, 0xF8	; 248
    3e72:	f3 cf       	rjmp	.-26     	; 0x3e5a <__addsf3x+0x34>
    3e74:	46 95       	lsr	r20
    3e76:	37 95       	ror	r19
    3e78:	27 95       	ror	r18
    3e7a:	a7 95       	ror	r26
    3e7c:	f0 40       	sbci	r31, 0x00	; 0
    3e7e:	53 95       	inc	r21
    3e80:	c9 f7       	brne	.-14     	; 0x3e74 <__addsf3x+0x4e>
    3e82:	7e f4       	brtc	.+30     	; 0x3ea2 <__addsf3x+0x7c>
    3e84:	1f 16       	cp	r1, r31
    3e86:	ba 0b       	sbc	r27, r26
    3e88:	62 0b       	sbc	r22, r18
    3e8a:	73 0b       	sbc	r23, r19
    3e8c:	84 0b       	sbc	r24, r20
    3e8e:	ba f0       	brmi	.+46     	; 0x3ebe <__addsf3x+0x98>
    3e90:	91 50       	subi	r25, 0x01	; 1
    3e92:	a1 f0       	breq	.+40     	; 0x3ebc <__addsf3x+0x96>
    3e94:	ff 0f       	add	r31, r31
    3e96:	bb 1f       	adc	r27, r27
    3e98:	66 1f       	adc	r22, r22
    3e9a:	77 1f       	adc	r23, r23
    3e9c:	88 1f       	adc	r24, r24
    3e9e:	c2 f7       	brpl	.-16     	; 0x3e90 <__addsf3x+0x6a>
    3ea0:	0e c0       	rjmp	.+28     	; 0x3ebe <__addsf3x+0x98>
    3ea2:	ba 0f       	add	r27, r26
    3ea4:	62 1f       	adc	r22, r18
    3ea6:	73 1f       	adc	r23, r19
    3ea8:	84 1f       	adc	r24, r20
    3eaa:	48 f4       	brcc	.+18     	; 0x3ebe <__addsf3x+0x98>
    3eac:	87 95       	ror	r24
    3eae:	77 95       	ror	r23
    3eb0:	67 95       	ror	r22
    3eb2:	b7 95       	ror	r27
    3eb4:	f7 95       	ror	r31
    3eb6:	9e 3f       	cpi	r25, 0xFE	; 254
    3eb8:	08 f0       	brcs	.+2      	; 0x3ebc <__addsf3x+0x96>
    3eba:	b3 cf       	rjmp	.-154    	; 0x3e22 <__addsf3+0x1e>
    3ebc:	93 95       	inc	r25
    3ebe:	88 0f       	add	r24, r24
    3ec0:	08 f0       	brcs	.+2      	; 0x3ec4 <__addsf3x+0x9e>
    3ec2:	99 27       	eor	r25, r25
    3ec4:	ee 0f       	add	r30, r30
    3ec6:	97 95       	ror	r25
    3ec8:	87 95       	ror	r24
    3eca:	08 95       	ret

00003ecc <ceil>:
    3ecc:	bf d1       	rcall	.+894    	; 0x424c <__fp_trunc>
    3ece:	80 f0       	brcs	.+32     	; 0x3ef0 <ceil+0x24>
    3ed0:	9f 37       	cpi	r25, 0x7F	; 127
    3ed2:	40 f4       	brcc	.+16     	; 0x3ee4 <ceil+0x18>
    3ed4:	91 11       	cpse	r25, r1
    3ed6:	0e f4       	brtc	.+2      	; 0x3eda <ceil+0xe>
    3ed8:	d1 c1       	rjmp	.+930    	; 0x427c <__fp_szero>
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	80 e8       	ldi	r24, 0x80	; 128
    3ee0:	9f e3       	ldi	r25, 0x3F	; 63
    3ee2:	08 95       	ret
    3ee4:	26 f0       	brts	.+8      	; 0x3eee <ceil+0x22>
    3ee6:	1b 16       	cp	r1, r27
    3ee8:	61 1d       	adc	r22, r1
    3eea:	71 1d       	adc	r23, r1
    3eec:	81 1d       	adc	r24, r1
    3eee:	08 c1       	rjmp	.+528    	; 0x4100 <__fp_mintl>
    3ef0:	22 c1       	rjmp	.+580    	; 0x4136 <__fp_mpack>

00003ef2 <__cmpsf2>:
    3ef2:	dc d0       	rcall	.+440    	; 0x40ac <__fp_cmp>
    3ef4:	08 f4       	brcc	.+2      	; 0x3ef8 <__cmpsf2+0x6>
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	08 95       	ret

00003efa <cos>:
    3efa:	3d d1       	rcall	.+634    	; 0x4176 <__fp_rempio2>
    3efc:	e3 95       	inc	r30
    3efe:	73 c1       	rjmp	.+742    	; 0x41e6 <__fp_sinus>

00003f00 <__divsf3>:
    3f00:	0c d0       	rcall	.+24     	; 0x3f1a <__divsf3x>
    3f02:	60 c1       	rjmp	.+704    	; 0x41c4 <__fp_round>
    3f04:	30 d1       	rcall	.+608    	; 0x4166 <__fp_pscB>
    3f06:	40 f0       	brcs	.+16     	; 0x3f18 <__divsf3+0x18>
    3f08:	27 d1       	rcall	.+590    	; 0x4158 <__fp_pscA>
    3f0a:	30 f0       	brcs	.+12     	; 0x3f18 <__divsf3+0x18>
    3f0c:	21 f4       	brne	.+8      	; 0x3f16 <__divsf3+0x16>
    3f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    3f10:	19 f0       	breq	.+6      	; 0x3f18 <__divsf3+0x18>
    3f12:	f0 c0       	rjmp	.+480    	; 0x40f4 <__fp_inf>
    3f14:	51 11       	cpse	r21, r1
    3f16:	b2 c1       	rjmp	.+868    	; 0x427c <__fp_szero>
    3f18:	1c c1       	rjmp	.+568    	; 0x4152 <__fp_nan>

00003f1a <__divsf3x>:
    3f1a:	76 d1       	rcall	.+748    	; 0x4208 <__fp_split3>
    3f1c:	98 f3       	brcs	.-26     	; 0x3f04 <__divsf3+0x4>

00003f1e <__divsf3_pse>:
    3f1e:	99 23       	and	r25, r25
    3f20:	c9 f3       	breq	.-14     	; 0x3f14 <__divsf3+0x14>
    3f22:	55 23       	and	r21, r21
    3f24:	b1 f3       	breq	.-20     	; 0x3f12 <__divsf3+0x12>
    3f26:	95 1b       	sub	r25, r21
    3f28:	55 0b       	sbc	r21, r21
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	aa 27       	eor	r26, r26
    3f2e:	62 17       	cp	r22, r18
    3f30:	73 07       	cpc	r23, r19
    3f32:	84 07       	cpc	r24, r20
    3f34:	38 f0       	brcs	.+14     	; 0x3f44 <__divsf3_pse+0x26>
    3f36:	9f 5f       	subi	r25, 0xFF	; 255
    3f38:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3a:	22 0f       	add	r18, r18
    3f3c:	33 1f       	adc	r19, r19
    3f3e:	44 1f       	adc	r20, r20
    3f40:	aa 1f       	adc	r26, r26
    3f42:	a9 f3       	breq	.-22     	; 0x3f2e <__divsf3_pse+0x10>
    3f44:	33 d0       	rcall	.+102    	; 0x3fac <__divsf3_pse+0x8e>
    3f46:	0e 2e       	mov	r0, r30
    3f48:	3a f0       	brmi	.+14     	; 0x3f58 <__divsf3_pse+0x3a>
    3f4a:	e0 e8       	ldi	r30, 0x80	; 128
    3f4c:	30 d0       	rcall	.+96     	; 0x3fae <__divsf3_pse+0x90>
    3f4e:	91 50       	subi	r25, 0x01	; 1
    3f50:	50 40       	sbci	r21, 0x00	; 0
    3f52:	e6 95       	lsr	r30
    3f54:	00 1c       	adc	r0, r0
    3f56:	ca f7       	brpl	.-14     	; 0x3f4a <__divsf3_pse+0x2c>
    3f58:	29 d0       	rcall	.+82     	; 0x3fac <__divsf3_pse+0x8e>
    3f5a:	fe 2f       	mov	r31, r30
    3f5c:	27 d0       	rcall	.+78     	; 0x3fac <__divsf3_pse+0x8e>
    3f5e:	66 0f       	add	r22, r22
    3f60:	77 1f       	adc	r23, r23
    3f62:	88 1f       	adc	r24, r24
    3f64:	bb 1f       	adc	r27, r27
    3f66:	26 17       	cp	r18, r22
    3f68:	37 07       	cpc	r19, r23
    3f6a:	48 07       	cpc	r20, r24
    3f6c:	ab 07       	cpc	r26, r27
    3f6e:	b0 e8       	ldi	r27, 0x80	; 128
    3f70:	09 f0       	breq	.+2      	; 0x3f74 <__divsf3_pse+0x56>
    3f72:	bb 0b       	sbc	r27, r27
    3f74:	80 2d       	mov	r24, r0
    3f76:	bf 01       	movw	r22, r30
    3f78:	ff 27       	eor	r31, r31
    3f7a:	93 58       	subi	r25, 0x83	; 131
    3f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7e:	2a f0       	brmi	.+10     	; 0x3f8a <__divsf3_pse+0x6c>
    3f80:	9e 3f       	cpi	r25, 0xFE	; 254
    3f82:	51 05       	cpc	r21, r1
    3f84:	68 f0       	brcs	.+26     	; 0x3fa0 <__divsf3_pse+0x82>
    3f86:	b6 c0       	rjmp	.+364    	; 0x40f4 <__fp_inf>
    3f88:	79 c1       	rjmp	.+754    	; 0x427c <__fp_szero>
    3f8a:	5f 3f       	cpi	r21, 0xFF	; 255
    3f8c:	ec f3       	brlt	.-6      	; 0x3f88 <__divsf3_pse+0x6a>
    3f8e:	98 3e       	cpi	r25, 0xE8	; 232
    3f90:	dc f3       	brlt	.-10     	; 0x3f88 <__divsf3_pse+0x6a>
    3f92:	86 95       	lsr	r24
    3f94:	77 95       	ror	r23
    3f96:	67 95       	ror	r22
    3f98:	b7 95       	ror	r27
    3f9a:	f7 95       	ror	r31
    3f9c:	9f 5f       	subi	r25, 0xFF	; 255
    3f9e:	c9 f7       	brne	.-14     	; 0x3f92 <__divsf3_pse+0x74>
    3fa0:	88 0f       	add	r24, r24
    3fa2:	91 1d       	adc	r25, r1
    3fa4:	96 95       	lsr	r25
    3fa6:	87 95       	ror	r24
    3fa8:	97 f9       	bld	r25, 7
    3faa:	08 95       	ret
    3fac:	e1 e0       	ldi	r30, 0x01	; 1
    3fae:	66 0f       	add	r22, r22
    3fb0:	77 1f       	adc	r23, r23
    3fb2:	88 1f       	adc	r24, r24
    3fb4:	bb 1f       	adc	r27, r27
    3fb6:	62 17       	cp	r22, r18
    3fb8:	73 07       	cpc	r23, r19
    3fba:	84 07       	cpc	r24, r20
    3fbc:	ba 07       	cpc	r27, r26
    3fbe:	20 f0       	brcs	.+8      	; 0x3fc8 <__divsf3_pse+0xaa>
    3fc0:	62 1b       	sub	r22, r18
    3fc2:	73 0b       	sbc	r23, r19
    3fc4:	84 0b       	sbc	r24, r20
    3fc6:	ba 0b       	sbc	r27, r26
    3fc8:	ee 1f       	adc	r30, r30
    3fca:	88 f7       	brcc	.-30     	; 0x3fae <__divsf3_pse+0x90>
    3fcc:	e0 95       	com	r30
    3fce:	08 95       	ret

00003fd0 <__fixsfsi>:
    3fd0:	04 d0       	rcall	.+8      	; 0x3fda <__fixunssfsi>
    3fd2:	68 94       	set
    3fd4:	b1 11       	cpse	r27, r1
    3fd6:	52 c1       	rjmp	.+676    	; 0x427c <__fp_szero>
    3fd8:	08 95       	ret

00003fda <__fixunssfsi>:
    3fda:	1e d1       	rcall	.+572    	; 0x4218 <__fp_splitA>
    3fdc:	88 f0       	brcs	.+34     	; 0x4000 <__fixunssfsi+0x26>
    3fde:	9f 57       	subi	r25, 0x7F	; 127
    3fe0:	90 f0       	brcs	.+36     	; 0x4006 <__fixunssfsi+0x2c>
    3fe2:	b9 2f       	mov	r27, r25
    3fe4:	99 27       	eor	r25, r25
    3fe6:	b7 51       	subi	r27, 0x17	; 23
    3fe8:	a0 f0       	brcs	.+40     	; 0x4012 <__fixunssfsi+0x38>
    3fea:	d1 f0       	breq	.+52     	; 0x4020 <__fixunssfsi+0x46>
    3fec:	66 0f       	add	r22, r22
    3fee:	77 1f       	adc	r23, r23
    3ff0:	88 1f       	adc	r24, r24
    3ff2:	99 1f       	adc	r25, r25
    3ff4:	1a f0       	brmi	.+6      	; 0x3ffc <__fixunssfsi+0x22>
    3ff6:	ba 95       	dec	r27
    3ff8:	c9 f7       	brne	.-14     	; 0x3fec <__fixunssfsi+0x12>
    3ffa:	12 c0       	rjmp	.+36     	; 0x4020 <__fixunssfsi+0x46>
    3ffc:	b1 30       	cpi	r27, 0x01	; 1
    3ffe:	81 f0       	breq	.+32     	; 0x4020 <__fixunssfsi+0x46>
    4000:	3c d1       	rcall	.+632    	; 0x427a <__fp_zero>
    4002:	b1 e0       	ldi	r27, 0x01	; 1
    4004:	08 95       	ret
    4006:	39 c1       	rjmp	.+626    	; 0x427a <__fp_zero>
    4008:	67 2f       	mov	r22, r23
    400a:	78 2f       	mov	r23, r24
    400c:	88 27       	eor	r24, r24
    400e:	b8 5f       	subi	r27, 0xF8	; 248
    4010:	39 f0       	breq	.+14     	; 0x4020 <__fixunssfsi+0x46>
    4012:	b9 3f       	cpi	r27, 0xF9	; 249
    4014:	cc f3       	brlt	.-14     	; 0x4008 <__fixunssfsi+0x2e>
    4016:	86 95       	lsr	r24
    4018:	77 95       	ror	r23
    401a:	67 95       	ror	r22
    401c:	b3 95       	inc	r27
    401e:	d9 f7       	brne	.-10     	; 0x4016 <__fixunssfsi+0x3c>
    4020:	3e f4       	brtc	.+14     	; 0x4030 <__fixunssfsi+0x56>
    4022:	90 95       	com	r25
    4024:	80 95       	com	r24
    4026:	70 95       	com	r23
    4028:	61 95       	neg	r22
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	8f 4f       	sbci	r24, 0xFF	; 255
    402e:	9f 4f       	sbci	r25, 0xFF	; 255
    4030:	08 95       	ret

00004032 <__floatunsisf>:
    4032:	e8 94       	clt
    4034:	09 c0       	rjmp	.+18     	; 0x4048 <__floatsisf+0x12>

00004036 <__floatsisf>:
    4036:	97 fb       	bst	r25, 7
    4038:	3e f4       	brtc	.+14     	; 0x4048 <__floatsisf+0x12>
    403a:	90 95       	com	r25
    403c:	80 95       	com	r24
    403e:	70 95       	com	r23
    4040:	61 95       	neg	r22
    4042:	7f 4f       	sbci	r23, 0xFF	; 255
    4044:	8f 4f       	sbci	r24, 0xFF	; 255
    4046:	9f 4f       	sbci	r25, 0xFF	; 255
    4048:	99 23       	and	r25, r25
    404a:	a9 f0       	breq	.+42     	; 0x4076 <__floatsisf+0x40>
    404c:	f9 2f       	mov	r31, r25
    404e:	96 e9       	ldi	r25, 0x96	; 150
    4050:	bb 27       	eor	r27, r27
    4052:	93 95       	inc	r25
    4054:	f6 95       	lsr	r31
    4056:	87 95       	ror	r24
    4058:	77 95       	ror	r23
    405a:	67 95       	ror	r22
    405c:	b7 95       	ror	r27
    405e:	f1 11       	cpse	r31, r1
    4060:	f8 cf       	rjmp	.-16     	; 0x4052 <__floatsisf+0x1c>
    4062:	fa f4       	brpl	.+62     	; 0x40a2 <__floatsisf+0x6c>
    4064:	bb 0f       	add	r27, r27
    4066:	11 f4       	brne	.+4      	; 0x406c <__floatsisf+0x36>
    4068:	60 ff       	sbrs	r22, 0
    406a:	1b c0       	rjmp	.+54     	; 0x40a2 <__floatsisf+0x6c>
    406c:	6f 5f       	subi	r22, 0xFF	; 255
    406e:	7f 4f       	sbci	r23, 0xFF	; 255
    4070:	8f 4f       	sbci	r24, 0xFF	; 255
    4072:	9f 4f       	sbci	r25, 0xFF	; 255
    4074:	16 c0       	rjmp	.+44     	; 0x40a2 <__floatsisf+0x6c>
    4076:	88 23       	and	r24, r24
    4078:	11 f0       	breq	.+4      	; 0x407e <__floatsisf+0x48>
    407a:	96 e9       	ldi	r25, 0x96	; 150
    407c:	11 c0       	rjmp	.+34     	; 0x40a0 <__floatsisf+0x6a>
    407e:	77 23       	and	r23, r23
    4080:	21 f0       	breq	.+8      	; 0x408a <__floatsisf+0x54>
    4082:	9e e8       	ldi	r25, 0x8E	; 142
    4084:	87 2f       	mov	r24, r23
    4086:	76 2f       	mov	r23, r22
    4088:	05 c0       	rjmp	.+10     	; 0x4094 <__floatsisf+0x5e>
    408a:	66 23       	and	r22, r22
    408c:	71 f0       	breq	.+28     	; 0x40aa <__floatsisf+0x74>
    408e:	96 e8       	ldi	r25, 0x86	; 134
    4090:	86 2f       	mov	r24, r22
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	2a f0       	brmi	.+10     	; 0x40a2 <__floatsisf+0x6c>
    4098:	9a 95       	dec	r25
    409a:	66 0f       	add	r22, r22
    409c:	77 1f       	adc	r23, r23
    409e:	88 1f       	adc	r24, r24
    40a0:	da f7       	brpl	.-10     	; 0x4098 <__floatsisf+0x62>
    40a2:	88 0f       	add	r24, r24
    40a4:	96 95       	lsr	r25
    40a6:	87 95       	ror	r24
    40a8:	97 f9       	bld	r25, 7
    40aa:	08 95       	ret

000040ac <__fp_cmp>:
    40ac:	99 0f       	add	r25, r25
    40ae:	00 08       	sbc	r0, r0
    40b0:	55 0f       	add	r21, r21
    40b2:	aa 0b       	sbc	r26, r26
    40b4:	e0 e8       	ldi	r30, 0x80	; 128
    40b6:	fe ef       	ldi	r31, 0xFE	; 254
    40b8:	16 16       	cp	r1, r22
    40ba:	17 06       	cpc	r1, r23
    40bc:	e8 07       	cpc	r30, r24
    40be:	f9 07       	cpc	r31, r25
    40c0:	c0 f0       	brcs	.+48     	; 0x40f2 <__fp_cmp+0x46>
    40c2:	12 16       	cp	r1, r18
    40c4:	13 06       	cpc	r1, r19
    40c6:	e4 07       	cpc	r30, r20
    40c8:	f5 07       	cpc	r31, r21
    40ca:	98 f0       	brcs	.+38     	; 0x40f2 <__fp_cmp+0x46>
    40cc:	62 1b       	sub	r22, r18
    40ce:	73 0b       	sbc	r23, r19
    40d0:	84 0b       	sbc	r24, r20
    40d2:	95 0b       	sbc	r25, r21
    40d4:	39 f4       	brne	.+14     	; 0x40e4 <__fp_cmp+0x38>
    40d6:	0a 26       	eor	r0, r26
    40d8:	61 f0       	breq	.+24     	; 0x40f2 <__fp_cmp+0x46>
    40da:	23 2b       	or	r18, r19
    40dc:	24 2b       	or	r18, r20
    40de:	25 2b       	or	r18, r21
    40e0:	21 f4       	brne	.+8      	; 0x40ea <__fp_cmp+0x3e>
    40e2:	08 95       	ret
    40e4:	0a 26       	eor	r0, r26
    40e6:	09 f4       	brne	.+2      	; 0x40ea <__fp_cmp+0x3e>
    40e8:	a1 40       	sbci	r26, 0x01	; 1
    40ea:	a6 95       	lsr	r26
    40ec:	8f ef       	ldi	r24, 0xFF	; 255
    40ee:	81 1d       	adc	r24, r1
    40f0:	81 1d       	adc	r24, r1
    40f2:	08 95       	ret

000040f4 <__fp_inf>:
    40f4:	97 f9       	bld	r25, 7
    40f6:	9f 67       	ori	r25, 0x7F	; 127
    40f8:	80 e8       	ldi	r24, 0x80	; 128
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	08 95       	ret

00004100 <__fp_mintl>:
    4100:	88 23       	and	r24, r24
    4102:	71 f4       	brne	.+28     	; 0x4120 <__fp_mintl+0x20>
    4104:	77 23       	and	r23, r23
    4106:	21 f0       	breq	.+8      	; 0x4110 <__fp_mintl+0x10>
    4108:	98 50       	subi	r25, 0x08	; 8
    410a:	87 2b       	or	r24, r23
    410c:	76 2f       	mov	r23, r22
    410e:	07 c0       	rjmp	.+14     	; 0x411e <__fp_mintl+0x1e>
    4110:	66 23       	and	r22, r22
    4112:	11 f4       	brne	.+4      	; 0x4118 <__fp_mintl+0x18>
    4114:	99 27       	eor	r25, r25
    4116:	0d c0       	rjmp	.+26     	; 0x4132 <__fp_mintl+0x32>
    4118:	90 51       	subi	r25, 0x10	; 16
    411a:	86 2b       	or	r24, r22
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	2a f0       	brmi	.+10     	; 0x412c <__fp_mintl+0x2c>
    4122:	9a 95       	dec	r25
    4124:	66 0f       	add	r22, r22
    4126:	77 1f       	adc	r23, r23
    4128:	88 1f       	adc	r24, r24
    412a:	da f7       	brpl	.-10     	; 0x4122 <__fp_mintl+0x22>
    412c:	88 0f       	add	r24, r24
    412e:	96 95       	lsr	r25
    4130:	87 95       	ror	r24
    4132:	97 f9       	bld	r25, 7
    4134:	08 95       	ret

00004136 <__fp_mpack>:
    4136:	9f 3f       	cpi	r25, 0xFF	; 255
    4138:	31 f0       	breq	.+12     	; 0x4146 <__fp_mpack_finite+0xc>

0000413a <__fp_mpack_finite>:
    413a:	91 50       	subi	r25, 0x01	; 1
    413c:	20 f4       	brcc	.+8      	; 0x4146 <__fp_mpack_finite+0xc>
    413e:	87 95       	ror	r24
    4140:	77 95       	ror	r23
    4142:	67 95       	ror	r22
    4144:	b7 95       	ror	r27
    4146:	88 0f       	add	r24, r24
    4148:	91 1d       	adc	r25, r1
    414a:	96 95       	lsr	r25
    414c:	87 95       	ror	r24
    414e:	97 f9       	bld	r25, 7
    4150:	08 95       	ret

00004152 <__fp_nan>:
    4152:	9f ef       	ldi	r25, 0xFF	; 255
    4154:	80 ec       	ldi	r24, 0xC0	; 192
    4156:	08 95       	ret

00004158 <__fp_pscA>:
    4158:	00 24       	eor	r0, r0
    415a:	0a 94       	dec	r0
    415c:	16 16       	cp	r1, r22
    415e:	17 06       	cpc	r1, r23
    4160:	18 06       	cpc	r1, r24
    4162:	09 06       	cpc	r0, r25
    4164:	08 95       	ret

00004166 <__fp_pscB>:
    4166:	00 24       	eor	r0, r0
    4168:	0a 94       	dec	r0
    416a:	12 16       	cp	r1, r18
    416c:	13 06       	cpc	r1, r19
    416e:	14 06       	cpc	r1, r20
    4170:	05 06       	cpc	r0, r21
    4172:	08 95       	ret
    4174:	ee cf       	rjmp	.-36     	; 0x4152 <__fp_nan>

00004176 <__fp_rempio2>:
    4176:	50 d0       	rcall	.+160    	; 0x4218 <__fp_splitA>
    4178:	e8 f3       	brcs	.-6      	; 0x4174 <__fp_pscB+0xe>
    417a:	e8 94       	clt
    417c:	e0 e0       	ldi	r30, 0x00	; 0
    417e:	bb 27       	eor	r27, r27
    4180:	9f 57       	subi	r25, 0x7F	; 127
    4182:	f0 f0       	brcs	.+60     	; 0x41c0 <__fp_rempio2+0x4a>
    4184:	2a ed       	ldi	r18, 0xDA	; 218
    4186:	3f e0       	ldi	r19, 0x0F	; 15
    4188:	49 ec       	ldi	r20, 0xC9	; 201
    418a:	06 c0       	rjmp	.+12     	; 0x4198 <__fp_rempio2+0x22>
    418c:	ee 0f       	add	r30, r30
    418e:	bb 0f       	add	r27, r27
    4190:	66 1f       	adc	r22, r22
    4192:	77 1f       	adc	r23, r23
    4194:	88 1f       	adc	r24, r24
    4196:	28 f0       	brcs	.+10     	; 0x41a2 <__fp_rempio2+0x2c>
    4198:	b2 3a       	cpi	r27, 0xA2	; 162
    419a:	62 07       	cpc	r22, r18
    419c:	73 07       	cpc	r23, r19
    419e:	84 07       	cpc	r24, r20
    41a0:	28 f0       	brcs	.+10     	; 0x41ac <__fp_rempio2+0x36>
    41a2:	b2 5a       	subi	r27, 0xA2	; 162
    41a4:	62 0b       	sbc	r22, r18
    41a6:	73 0b       	sbc	r23, r19
    41a8:	84 0b       	sbc	r24, r20
    41aa:	e3 95       	inc	r30
    41ac:	9a 95       	dec	r25
    41ae:	72 f7       	brpl	.-36     	; 0x418c <__fp_rempio2+0x16>
    41b0:	80 38       	cpi	r24, 0x80	; 128
    41b2:	30 f4       	brcc	.+12     	; 0x41c0 <__fp_rempio2+0x4a>
    41b4:	9a 95       	dec	r25
    41b6:	bb 0f       	add	r27, r27
    41b8:	66 1f       	adc	r22, r22
    41ba:	77 1f       	adc	r23, r23
    41bc:	88 1f       	adc	r24, r24
    41be:	d2 f7       	brpl	.-12     	; 0x41b4 <__fp_rempio2+0x3e>
    41c0:	90 48       	sbci	r25, 0x80	; 128
    41c2:	bb cf       	rjmp	.-138    	; 0x413a <__fp_mpack_finite>

000041c4 <__fp_round>:
    41c4:	09 2e       	mov	r0, r25
    41c6:	03 94       	inc	r0
    41c8:	00 0c       	add	r0, r0
    41ca:	11 f4       	brne	.+4      	; 0x41d0 <__fp_round+0xc>
    41cc:	88 23       	and	r24, r24
    41ce:	52 f0       	brmi	.+20     	; 0x41e4 <__fp_round+0x20>
    41d0:	bb 0f       	add	r27, r27
    41d2:	40 f4       	brcc	.+16     	; 0x41e4 <__fp_round+0x20>
    41d4:	bf 2b       	or	r27, r31
    41d6:	11 f4       	brne	.+4      	; 0x41dc <__fp_round+0x18>
    41d8:	60 ff       	sbrs	r22, 0
    41da:	04 c0       	rjmp	.+8      	; 0x41e4 <__fp_round+0x20>
    41dc:	6f 5f       	subi	r22, 0xFF	; 255
    41de:	7f 4f       	sbci	r23, 0xFF	; 255
    41e0:	8f 4f       	sbci	r24, 0xFF	; 255
    41e2:	9f 4f       	sbci	r25, 0xFF	; 255
    41e4:	08 95       	ret

000041e6 <__fp_sinus>:
    41e6:	ef 93       	push	r30
    41e8:	e0 ff       	sbrs	r30, 0
    41ea:	06 c0       	rjmp	.+12     	; 0x41f8 <__fp_sinus+0x12>
    41ec:	a2 ea       	ldi	r26, 0xA2	; 162
    41ee:	2a ed       	ldi	r18, 0xDA	; 218
    41f0:	3f e0       	ldi	r19, 0x0F	; 15
    41f2:	49 ec       	ldi	r20, 0xC9	; 201
    41f4:	5f eb       	ldi	r21, 0xBF	; 191
    41f6:	17 de       	rcall	.-978    	; 0x3e26 <__addsf3x>
    41f8:	e5 df       	rcall	.-54     	; 0x41c4 <__fp_round>
    41fa:	0f 90       	pop	r0
    41fc:	03 94       	inc	r0
    41fe:	01 fc       	sbrc	r0, 1
    4200:	90 58       	subi	r25, 0x80	; 128
    4202:	e4 e5       	ldi	r30, 0x54	; 84
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	f3 c0       	rjmp	.+486    	; 0x43ee <__fp_powsodd>

00004208 <__fp_split3>:
    4208:	57 fd       	sbrc	r21, 7
    420a:	90 58       	subi	r25, 0x80	; 128
    420c:	44 0f       	add	r20, r20
    420e:	55 1f       	adc	r21, r21
    4210:	59 f0       	breq	.+22     	; 0x4228 <__fp_splitA+0x10>
    4212:	5f 3f       	cpi	r21, 0xFF	; 255
    4214:	71 f0       	breq	.+28     	; 0x4232 <__fp_splitA+0x1a>
    4216:	47 95       	ror	r20

00004218 <__fp_splitA>:
    4218:	88 0f       	add	r24, r24
    421a:	97 fb       	bst	r25, 7
    421c:	99 1f       	adc	r25, r25
    421e:	61 f0       	breq	.+24     	; 0x4238 <__fp_splitA+0x20>
    4220:	9f 3f       	cpi	r25, 0xFF	; 255
    4222:	79 f0       	breq	.+30     	; 0x4242 <__fp_splitA+0x2a>
    4224:	87 95       	ror	r24
    4226:	08 95       	ret
    4228:	12 16       	cp	r1, r18
    422a:	13 06       	cpc	r1, r19
    422c:	14 06       	cpc	r1, r20
    422e:	55 1f       	adc	r21, r21
    4230:	f2 cf       	rjmp	.-28     	; 0x4216 <__fp_split3+0xe>
    4232:	46 95       	lsr	r20
    4234:	f1 df       	rcall	.-30     	; 0x4218 <__fp_splitA>
    4236:	08 c0       	rjmp	.+16     	; 0x4248 <__fp_splitA+0x30>
    4238:	16 16       	cp	r1, r22
    423a:	17 06       	cpc	r1, r23
    423c:	18 06       	cpc	r1, r24
    423e:	99 1f       	adc	r25, r25
    4240:	f1 cf       	rjmp	.-30     	; 0x4224 <__fp_splitA+0xc>
    4242:	86 95       	lsr	r24
    4244:	71 05       	cpc	r23, r1
    4246:	61 05       	cpc	r22, r1
    4248:	08 94       	sec
    424a:	08 95       	ret

0000424c <__fp_trunc>:
    424c:	e5 df       	rcall	.-54     	; 0x4218 <__fp_splitA>
    424e:	a0 f0       	brcs	.+40     	; 0x4278 <__fp_trunc+0x2c>
    4250:	be e7       	ldi	r27, 0x7E	; 126
    4252:	b9 17       	cp	r27, r25
    4254:	88 f4       	brcc	.+34     	; 0x4278 <__fp_trunc+0x2c>
    4256:	bb 27       	eor	r27, r27
    4258:	9f 38       	cpi	r25, 0x8F	; 143
    425a:	60 f4       	brcc	.+24     	; 0x4274 <__fp_trunc+0x28>
    425c:	16 16       	cp	r1, r22
    425e:	b1 1d       	adc	r27, r1
    4260:	67 2f       	mov	r22, r23
    4262:	78 2f       	mov	r23, r24
    4264:	88 27       	eor	r24, r24
    4266:	98 5f       	subi	r25, 0xF8	; 248
    4268:	f7 cf       	rjmp	.-18     	; 0x4258 <__fp_trunc+0xc>
    426a:	86 95       	lsr	r24
    426c:	77 95       	ror	r23
    426e:	67 95       	ror	r22
    4270:	b1 1d       	adc	r27, r1
    4272:	93 95       	inc	r25
    4274:	96 39       	cpi	r25, 0x96	; 150
    4276:	c8 f3       	brcs	.-14     	; 0x426a <__fp_trunc+0x1e>
    4278:	08 95       	ret

0000427a <__fp_zero>:
    427a:	e8 94       	clt

0000427c <__fp_szero>:
    427c:	bb 27       	eor	r27, r27
    427e:	66 27       	eor	r22, r22
    4280:	77 27       	eor	r23, r23
    4282:	cb 01       	movw	r24, r22
    4284:	97 f9       	bld	r25, 7
    4286:	08 95       	ret

00004288 <__gesf2>:
    4288:	11 df       	rcall	.-478    	; 0x40ac <__fp_cmp>
    428a:	08 f4       	brcc	.+2      	; 0x428e <__gesf2+0x6>
    428c:	8f ef       	ldi	r24, 0xFF	; 255
    428e:	08 95       	ret

00004290 <__mulsf3>:
    4290:	0b d0       	rcall	.+22     	; 0x42a8 <__mulsf3x>
    4292:	98 cf       	rjmp	.-208    	; 0x41c4 <__fp_round>
    4294:	61 df       	rcall	.-318    	; 0x4158 <__fp_pscA>
    4296:	28 f0       	brcs	.+10     	; 0x42a2 <__mulsf3+0x12>
    4298:	66 df       	rcall	.-308    	; 0x4166 <__fp_pscB>
    429a:	18 f0       	brcs	.+6      	; 0x42a2 <__mulsf3+0x12>
    429c:	95 23       	and	r25, r21
    429e:	09 f0       	breq	.+2      	; 0x42a2 <__mulsf3+0x12>
    42a0:	29 cf       	rjmp	.-430    	; 0x40f4 <__fp_inf>
    42a2:	57 cf       	rjmp	.-338    	; 0x4152 <__fp_nan>
    42a4:	11 24       	eor	r1, r1
    42a6:	ea cf       	rjmp	.-44     	; 0x427c <__fp_szero>

000042a8 <__mulsf3x>:
    42a8:	af df       	rcall	.-162    	; 0x4208 <__fp_split3>
    42aa:	a0 f3       	brcs	.-24     	; 0x4294 <__mulsf3+0x4>

000042ac <__mulsf3_pse>:
    42ac:	95 9f       	mul	r25, r21
    42ae:	d1 f3       	breq	.-12     	; 0x42a4 <__mulsf3+0x14>
    42b0:	95 0f       	add	r25, r21
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	55 1f       	adc	r21, r21
    42b6:	62 9f       	mul	r22, r18
    42b8:	f0 01       	movw	r30, r0
    42ba:	72 9f       	mul	r23, r18
    42bc:	bb 27       	eor	r27, r27
    42be:	f0 0d       	add	r31, r0
    42c0:	b1 1d       	adc	r27, r1
    42c2:	63 9f       	mul	r22, r19
    42c4:	aa 27       	eor	r26, r26
    42c6:	f0 0d       	add	r31, r0
    42c8:	b1 1d       	adc	r27, r1
    42ca:	aa 1f       	adc	r26, r26
    42cc:	64 9f       	mul	r22, r20
    42ce:	66 27       	eor	r22, r22
    42d0:	b0 0d       	add	r27, r0
    42d2:	a1 1d       	adc	r26, r1
    42d4:	66 1f       	adc	r22, r22
    42d6:	82 9f       	mul	r24, r18
    42d8:	22 27       	eor	r18, r18
    42da:	b0 0d       	add	r27, r0
    42dc:	a1 1d       	adc	r26, r1
    42de:	62 1f       	adc	r22, r18
    42e0:	73 9f       	mul	r23, r19
    42e2:	b0 0d       	add	r27, r0
    42e4:	a1 1d       	adc	r26, r1
    42e6:	62 1f       	adc	r22, r18
    42e8:	83 9f       	mul	r24, r19
    42ea:	a0 0d       	add	r26, r0
    42ec:	61 1d       	adc	r22, r1
    42ee:	22 1f       	adc	r18, r18
    42f0:	74 9f       	mul	r23, r20
    42f2:	33 27       	eor	r19, r19
    42f4:	a0 0d       	add	r26, r0
    42f6:	61 1d       	adc	r22, r1
    42f8:	23 1f       	adc	r18, r19
    42fa:	84 9f       	mul	r24, r20
    42fc:	60 0d       	add	r22, r0
    42fe:	21 1d       	adc	r18, r1
    4300:	82 2f       	mov	r24, r18
    4302:	76 2f       	mov	r23, r22
    4304:	6a 2f       	mov	r22, r26
    4306:	11 24       	eor	r1, r1
    4308:	9f 57       	subi	r25, 0x7F	; 127
    430a:	50 40       	sbci	r21, 0x00	; 0
    430c:	8a f0       	brmi	.+34     	; 0x4330 <__mulsf3_pse+0x84>
    430e:	e1 f0       	breq	.+56     	; 0x4348 <__mulsf3_pse+0x9c>
    4310:	88 23       	and	r24, r24
    4312:	4a f0       	brmi	.+18     	; 0x4326 <__mulsf3_pse+0x7a>
    4314:	ee 0f       	add	r30, r30
    4316:	ff 1f       	adc	r31, r31
    4318:	bb 1f       	adc	r27, r27
    431a:	66 1f       	adc	r22, r22
    431c:	77 1f       	adc	r23, r23
    431e:	88 1f       	adc	r24, r24
    4320:	91 50       	subi	r25, 0x01	; 1
    4322:	50 40       	sbci	r21, 0x00	; 0
    4324:	a9 f7       	brne	.-22     	; 0x4310 <__mulsf3_pse+0x64>
    4326:	9e 3f       	cpi	r25, 0xFE	; 254
    4328:	51 05       	cpc	r21, r1
    432a:	70 f0       	brcs	.+28     	; 0x4348 <__mulsf3_pse+0x9c>
    432c:	e3 ce       	rjmp	.-570    	; 0x40f4 <__fp_inf>
    432e:	a6 cf       	rjmp	.-180    	; 0x427c <__fp_szero>
    4330:	5f 3f       	cpi	r21, 0xFF	; 255
    4332:	ec f3       	brlt	.-6      	; 0x432e <__mulsf3_pse+0x82>
    4334:	98 3e       	cpi	r25, 0xE8	; 232
    4336:	dc f3       	brlt	.-10     	; 0x432e <__mulsf3_pse+0x82>
    4338:	86 95       	lsr	r24
    433a:	77 95       	ror	r23
    433c:	67 95       	ror	r22
    433e:	b7 95       	ror	r27
    4340:	f7 95       	ror	r31
    4342:	e7 95       	ror	r30
    4344:	9f 5f       	subi	r25, 0xFF	; 255
    4346:	c1 f7       	brne	.-16     	; 0x4338 <__mulsf3_pse+0x8c>
    4348:	fe 2b       	or	r31, r30
    434a:	88 0f       	add	r24, r24
    434c:	91 1d       	adc	r25, r1
    434e:	96 95       	lsr	r25
    4350:	87 95       	ror	r24
    4352:	97 f9       	bld	r25, 7
    4354:	08 95       	ret
    4356:	11 f4       	brne	.+4      	; 0x435c <__mulsf3_pse+0xb0>
    4358:	0e f4       	brtc	.+2      	; 0x435c <__mulsf3_pse+0xb0>
    435a:	fb ce       	rjmp	.-522    	; 0x4152 <__fp_nan>
    435c:	ec ce       	rjmp	.-552    	; 0x4136 <__fp_mpack>

0000435e <sqrt>:
    435e:	5c df       	rcall	.-328    	; 0x4218 <__fp_splitA>
    4360:	d0 f3       	brcs	.-12     	; 0x4356 <__mulsf3_pse+0xaa>
    4362:	99 23       	and	r25, r25
    4364:	d9 f3       	breq	.-10     	; 0x435c <__mulsf3_pse+0xb0>
    4366:	ce f3       	brts	.-14     	; 0x435a <__mulsf3_pse+0xae>
    4368:	9f 57       	subi	r25, 0x7F	; 127
    436a:	55 0b       	sbc	r21, r21
    436c:	87 ff       	sbrs	r24, 7
    436e:	38 d0       	rcall	.+112    	; 0x43e0 <__fp_norm2>
    4370:	00 24       	eor	r0, r0
    4372:	a0 e6       	ldi	r26, 0x60	; 96
    4374:	40 ea       	ldi	r20, 0xA0	; 160
    4376:	90 01       	movw	r18, r0
    4378:	80 58       	subi	r24, 0x80	; 128
    437a:	56 95       	lsr	r21
    437c:	97 95       	ror	r25
    437e:	28 f4       	brcc	.+10     	; 0x438a <sqrt+0x2c>
    4380:	80 5c       	subi	r24, 0xC0	; 192
    4382:	66 0f       	add	r22, r22
    4384:	77 1f       	adc	r23, r23
    4386:	88 1f       	adc	r24, r24
    4388:	20 f0       	brcs	.+8      	; 0x4392 <sqrt+0x34>
    438a:	26 17       	cp	r18, r22
    438c:	37 07       	cpc	r19, r23
    438e:	48 07       	cpc	r20, r24
    4390:	30 f4       	brcc	.+12     	; 0x439e <sqrt+0x40>
    4392:	62 1b       	sub	r22, r18
    4394:	73 0b       	sbc	r23, r19
    4396:	84 0b       	sbc	r24, r20
    4398:	20 29       	or	r18, r0
    439a:	31 29       	or	r19, r1
    439c:	4a 2b       	or	r20, r26
    439e:	a6 95       	lsr	r26
    43a0:	17 94       	ror	r1
    43a2:	07 94       	ror	r0
    43a4:	20 25       	eor	r18, r0
    43a6:	31 25       	eor	r19, r1
    43a8:	4a 27       	eor	r20, r26
    43aa:	58 f7       	brcc	.-42     	; 0x4382 <sqrt+0x24>
    43ac:	66 0f       	add	r22, r22
    43ae:	77 1f       	adc	r23, r23
    43b0:	88 1f       	adc	r24, r24
    43b2:	20 f0       	brcs	.+8      	; 0x43bc <sqrt+0x5e>
    43b4:	26 17       	cp	r18, r22
    43b6:	37 07       	cpc	r19, r23
    43b8:	48 07       	cpc	r20, r24
    43ba:	30 f4       	brcc	.+12     	; 0x43c8 <sqrt+0x6a>
    43bc:	62 0b       	sbc	r22, r18
    43be:	73 0b       	sbc	r23, r19
    43c0:	84 0b       	sbc	r24, r20
    43c2:	20 0d       	add	r18, r0
    43c4:	31 1d       	adc	r19, r1
    43c6:	41 1d       	adc	r20, r1
    43c8:	a0 95       	com	r26
    43ca:	81 f7       	brne	.-32     	; 0x43ac <sqrt+0x4e>
    43cc:	b9 01       	movw	r22, r18
    43ce:	84 2f       	mov	r24, r20
    43d0:	91 58       	subi	r25, 0x81	; 129
    43d2:	88 0f       	add	r24, r24
    43d4:	96 95       	lsr	r25
    43d6:	87 95       	ror	r24
    43d8:	08 95       	ret

000043da <square>:
    43da:	9b 01       	movw	r18, r22
    43dc:	ac 01       	movw	r20, r24
    43de:	58 cf       	rjmp	.-336    	; 0x4290 <__mulsf3>

000043e0 <__fp_norm2>:
    43e0:	91 50       	subi	r25, 0x01	; 1
    43e2:	50 40       	sbci	r21, 0x00	; 0
    43e4:	66 0f       	add	r22, r22
    43e6:	77 1f       	adc	r23, r23
    43e8:	88 1f       	adc	r24, r24
    43ea:	d2 f7       	brpl	.-12     	; 0x43e0 <__fp_norm2>
    43ec:	08 95       	ret

000043ee <__fp_powsodd>:
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	7f 93       	push	r23
    43f4:	6f 93       	push	r22
    43f6:	ff 93       	push	r31
    43f8:	ef 93       	push	r30
    43fa:	9b 01       	movw	r18, r22
    43fc:	ac 01       	movw	r20, r24
    43fe:	48 df       	rcall	.-368    	; 0x4290 <__mulsf3>
    4400:	ef 91       	pop	r30
    4402:	ff 91       	pop	r31
    4404:	05 d0       	rcall	.+10     	; 0x4410 <__fp_powser>
    4406:	2f 91       	pop	r18
    4408:	3f 91       	pop	r19
    440a:	4f 91       	pop	r20
    440c:	5f 91       	pop	r21
    440e:	40 cf       	rjmp	.-384    	; 0x4290 <__mulsf3>

00004410 <__fp_powser>:
    4410:	df 93       	push	r29
    4412:	cf 93       	push	r28
    4414:	1f 93       	push	r17
    4416:	0f 93       	push	r16
    4418:	ff 92       	push	r15
    441a:	ef 92       	push	r14
    441c:	df 92       	push	r13
    441e:	7b 01       	movw	r14, r22
    4420:	8c 01       	movw	r16, r24
    4422:	68 94       	set
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <__fp_powser+0x20>
    4426:	da 2e       	mov	r13, r26
    4428:	ef 01       	movw	r28, r30
    442a:	3e df       	rcall	.-388    	; 0x42a8 <__mulsf3x>
    442c:	fe 01       	movw	r30, r28
    442e:	e8 94       	clt
    4430:	a5 91       	lpm	r26, Z+
    4432:	25 91       	lpm	r18, Z+
    4434:	35 91       	lpm	r19, Z+
    4436:	45 91       	lpm	r20, Z+
    4438:	55 91       	lpm	r21, Z+
    443a:	ae f3       	brts	.-22     	; 0x4426 <__fp_powser+0x16>
    443c:	ef 01       	movw	r28, r30
    443e:	f3 dc       	rcall	.-1562   	; 0x3e26 <__addsf3x>
    4440:	fe 01       	movw	r30, r28
    4442:	97 01       	movw	r18, r14
    4444:	a8 01       	movw	r20, r16
    4446:	da 94       	dec	r13
    4448:	79 f7       	brne	.-34     	; 0x4428 <__fp_powser+0x18>
    444a:	df 90       	pop	r13
    444c:	ef 90       	pop	r14
    444e:	ff 90       	pop	r15
    4450:	0f 91       	pop	r16
    4452:	1f 91       	pop	r17
    4454:	cf 91       	pop	r28
    4456:	df 91       	pop	r29
    4458:	08 95       	ret

0000445a <__mulsi3>:
    445a:	db 01       	movw	r26, r22
    445c:	8f 93       	push	r24
    445e:	9f 93       	push	r25
    4460:	0e 94 a7 22 	call	0x454e	; 0x454e <__muluhisi3>
    4464:	bf 91       	pop	r27
    4466:	af 91       	pop	r26
    4468:	a2 9f       	mul	r26, r18
    446a:	80 0d       	add	r24, r0
    446c:	91 1d       	adc	r25, r1
    446e:	a3 9f       	mul	r26, r19
    4470:	90 0d       	add	r25, r0
    4472:	b2 9f       	mul	r27, r18
    4474:	90 0d       	add	r25, r0
    4476:	11 24       	eor	r1, r1
    4478:	08 95       	ret

0000447a <__udivmodqi4>:
    447a:	99 1b       	sub	r25, r25
    447c:	79 e0       	ldi	r23, 0x09	; 9
    447e:	04 c0       	rjmp	.+8      	; 0x4488 <__udivmodqi4_ep>

00004480 <__udivmodqi4_loop>:
    4480:	99 1f       	adc	r25, r25
    4482:	96 17       	cp	r25, r22
    4484:	08 f0       	brcs	.+2      	; 0x4488 <__udivmodqi4_ep>
    4486:	96 1b       	sub	r25, r22

00004488 <__udivmodqi4_ep>:
    4488:	88 1f       	adc	r24, r24
    448a:	7a 95       	dec	r23
    448c:	c9 f7       	brne	.-14     	; 0x4480 <__udivmodqi4_loop>
    448e:	80 95       	com	r24
    4490:	08 95       	ret

00004492 <__udivmodhi4>:
    4492:	aa 1b       	sub	r26, r26
    4494:	bb 1b       	sub	r27, r27
    4496:	51 e1       	ldi	r21, 0x11	; 17
    4498:	07 c0       	rjmp	.+14     	; 0x44a8 <__udivmodhi4_ep>

0000449a <__udivmodhi4_loop>:
    449a:	aa 1f       	adc	r26, r26
    449c:	bb 1f       	adc	r27, r27
    449e:	a6 17       	cp	r26, r22
    44a0:	b7 07       	cpc	r27, r23
    44a2:	10 f0       	brcs	.+4      	; 0x44a8 <__udivmodhi4_ep>
    44a4:	a6 1b       	sub	r26, r22
    44a6:	b7 0b       	sbc	r27, r23

000044a8 <__udivmodhi4_ep>:
    44a8:	88 1f       	adc	r24, r24
    44aa:	99 1f       	adc	r25, r25
    44ac:	5a 95       	dec	r21
    44ae:	a9 f7       	brne	.-22     	; 0x449a <__udivmodhi4_loop>
    44b0:	80 95       	com	r24
    44b2:	90 95       	com	r25
    44b4:	bc 01       	movw	r22, r24
    44b6:	cd 01       	movw	r24, r26
    44b8:	08 95       	ret

000044ba <__udivmodsi4>:
    44ba:	a1 e2       	ldi	r26, 0x21	; 33
    44bc:	1a 2e       	mov	r1, r26
    44be:	aa 1b       	sub	r26, r26
    44c0:	bb 1b       	sub	r27, r27
    44c2:	fd 01       	movw	r30, r26
    44c4:	0d c0       	rjmp	.+26     	; 0x44e0 <__udivmodsi4_ep>

000044c6 <__udivmodsi4_loop>:
    44c6:	aa 1f       	adc	r26, r26
    44c8:	bb 1f       	adc	r27, r27
    44ca:	ee 1f       	adc	r30, r30
    44cc:	ff 1f       	adc	r31, r31
    44ce:	a2 17       	cp	r26, r18
    44d0:	b3 07       	cpc	r27, r19
    44d2:	e4 07       	cpc	r30, r20
    44d4:	f5 07       	cpc	r31, r21
    44d6:	20 f0       	brcs	.+8      	; 0x44e0 <__udivmodsi4_ep>
    44d8:	a2 1b       	sub	r26, r18
    44da:	b3 0b       	sbc	r27, r19
    44dc:	e4 0b       	sbc	r30, r20
    44de:	f5 0b       	sbc	r31, r21

000044e0 <__udivmodsi4_ep>:
    44e0:	66 1f       	adc	r22, r22
    44e2:	77 1f       	adc	r23, r23
    44e4:	88 1f       	adc	r24, r24
    44e6:	99 1f       	adc	r25, r25
    44e8:	1a 94       	dec	r1
    44ea:	69 f7       	brne	.-38     	; 0x44c6 <__udivmodsi4_loop>
    44ec:	60 95       	com	r22
    44ee:	70 95       	com	r23
    44f0:	80 95       	com	r24
    44f2:	90 95       	com	r25
    44f4:	9b 01       	movw	r18, r22
    44f6:	ac 01       	movw	r20, r24
    44f8:	bd 01       	movw	r22, r26
    44fa:	cf 01       	movw	r24, r30
    44fc:	08 95       	ret

000044fe <__divmodsi4>:
    44fe:	05 2e       	mov	r0, r21
    4500:	97 fb       	bst	r25, 7
    4502:	16 f4       	brtc	.+4      	; 0x4508 <__divmodsi4+0xa>
    4504:	00 94       	com	r0
    4506:	07 d0       	rcall	.+14     	; 0x4516 <__divmodsi4_neg1>
    4508:	57 fd       	sbrc	r21, 7
    450a:	0d d0       	rcall	.+26     	; 0x4526 <__divmodsi4_neg2>
    450c:	0e 94 5d 22 	call	0x44ba	; 0x44ba <__udivmodsi4>
    4510:	07 fc       	sbrc	r0, 7
    4512:	09 d0       	rcall	.+18     	; 0x4526 <__divmodsi4_neg2>
    4514:	7e f4       	brtc	.+30     	; 0x4534 <__divmodsi4_exit>

00004516 <__divmodsi4_neg1>:
    4516:	90 95       	com	r25
    4518:	80 95       	com	r24
    451a:	70 95       	com	r23
    451c:	61 95       	neg	r22
    451e:	7f 4f       	sbci	r23, 0xFF	; 255
    4520:	8f 4f       	sbci	r24, 0xFF	; 255
    4522:	9f 4f       	sbci	r25, 0xFF	; 255
    4524:	08 95       	ret

00004526 <__divmodsi4_neg2>:
    4526:	50 95       	com	r21
    4528:	40 95       	com	r20
    452a:	30 95       	com	r19
    452c:	21 95       	neg	r18
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	4f 4f       	sbci	r20, 0xFF	; 255
    4532:	5f 4f       	sbci	r21, 0xFF	; 255

00004534 <__divmodsi4_exit>:
    4534:	08 95       	ret

00004536 <__umulhisi3>:
    4536:	a2 9f       	mul	r26, r18
    4538:	b0 01       	movw	r22, r0
    453a:	b3 9f       	mul	r27, r19
    453c:	c0 01       	movw	r24, r0
    453e:	a3 9f       	mul	r26, r19
    4540:	01 d0       	rcall	.+2      	; 0x4544 <__umulhisi3+0xe>
    4542:	b2 9f       	mul	r27, r18
    4544:	70 0d       	add	r23, r0
    4546:	81 1d       	adc	r24, r1
    4548:	11 24       	eor	r1, r1
    454a:	91 1d       	adc	r25, r1
    454c:	08 95       	ret

0000454e <__muluhisi3>:
    454e:	0e 94 9b 22 	call	0x4536	; 0x4536 <__umulhisi3>
    4552:	a5 9f       	mul	r26, r21
    4554:	90 0d       	add	r25, r0
    4556:	b4 9f       	mul	r27, r20
    4558:	90 0d       	add	r25, r0
    455a:	a4 9f       	mul	r26, r20
    455c:	80 0d       	add	r24, r0
    455e:	91 1d       	adc	r25, r1
    4560:	11 24       	eor	r1, r1
    4562:	08 95       	ret

00004564 <_exit>:
    4564:	f8 94       	cli

00004566 <__stop_program>:
    4566:	ff cf       	rjmp	.-2      	; 0x4566 <__stop_program>
